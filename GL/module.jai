#scope_module

#import "Runtime";
mem :: #import "Memory";
log :: #import "Log";
window :: #import "Window";

#scope_export

#if OS == .WINDOWS
	#load "win32.jai";

GL_Context_Creation_Flags :: enum_flags
{
	NONE :: 0x00;
	MULTISAMPLED :: 0x01;
}

load :: inline ($log_errors := false) -> bool
{
	load_functions :: (ptr : *$T, $prefix := "")
	{
		#insert -> string
		{
			strbuild :: #import "String/Builder";

			info := type_info (T);
			code : strbuild.Builder;
			strbuild.init (*code, mem.HEAP_ALLOC);
			strbuild.append_line (*code, "// load_functions for T = %", T);
			strbuild.append_line (*code, "member_ptr : **void;");
			for * info.members
			{
				if flagged (it.flags, .CONSTANT)
					continue;
				if it.type.type == .PROCEDURE || flagged (it.flags, .PROCEDURE_WITH_VOID_POINTER_TYPE_INFO)
				{
					strbuild.append_line (*code, "member_ptr = cast (**void) (cast (*u8) ptr + %);", it.offset_in_bytes);
					if prefix
						strbuild.append_line (*code, "<<member_ptr = get_proc_address (\"{}{}\");", prefix, it.name);
					else
						strbuild.append_line (*code, "<<member_ptr = get_proc_address (\"{}\");", it.name);
					#if log_errors
					{
						strbuild.append_line (*code, "if !(<<member_ptr)");
						if prefix
							strbuild.append_line (*code, "\tlog.warning (\"get_proc_address returned null for procedure {}{}.\");", prefix, it.name);
						else
							strbuild.append_line (*code, "\tlog.warning (\"get_proc_address returned null for procedure {}.\");", it.name);
					}
				}
			}

			return strbuild.build (*code, mem.HEAP_ALLOC);
		};
	}

	dummy_window := window.create ("Dummy", -1, -1, -1, -1, .NONE);
	if !dummy_window
		return log.error ("Could not create dummy window to load GL functions.");
	defer window.destroy (dummy_window);
	dummy_ctx := create_context (dummy_window, .NONE);
	if !dummy_ctx
		return log.error ("Could not create dummy GL context to load GL functions.");
	defer destroy_context (dummy_window, dummy_ctx);

	GetIntegerv (MAJOR_VERSION, *version_major);
	GetIntegerv (MINOR_VERSION, *version_minor);
	load_functions (*g_gl, "gl");
	load_functions (*g_gl_extensions);
	log.message ("OpenGL version is %.%", version_major, version_minor);

	return true;
}

using g_gl : GL;
using g_gl_extensions : GL_Extensions;

GL :: struct #type_info_none
{
	GLenum     :: u32;
	GLboolean  :: bool;
	GLbitfield :: u32;
	GLbyte     :: s8;
	GLshort    :: s16;
	GLint      :: s32;
	GLclampx   :: s32;
	GLubyte    :: u8;
	GLushort   :: u16;
	GLuint     :: u32;
	GLsizei    :: u32;
	GLfloat    :: float32;
	GLclampf   :: float32;
	GLdouble   :: float64;
	GLclampd   :: float64;
	GLchar     :: u8;
	GLcharARB  :: u8;
	GLhandleARB :: u32;
	GLhalfARB  :: u16;
	GLhalf     :: u16;
	GLfixed    :: s32;
	GLintptr   :: s64;
	GLsizeiptr :: s64;
	GLint64    :: s64;
	GLuint64   :: u64;
	GLintptrARB   :: s64;
	GLsizeiptrARB :: u64;
	GLint64EXT  :: s64;
	GLuint64EXT :: u64;
	GLsync      :: u64;
	GLhalfNV    :: u16;
	
	GLDEBUGPROC    :: #type (GLenum, GLenum, GLuint, GLenum, GLsizei, *GLchar, *void) #c_call;
	GLDEBUGPROCKHR :: GLDEBUGPROC;
	GLDEBUGPROCARB :: GLDEBUGPROC;
	GLDEBUGPROCAMD :: #type (GLuint, GLenum, GLenum, GLsizei, *GLchar, *void) #c_call;
	
	// Version flags:
	
	version_major : s32;
	version_minor : s32;
	VERSION_1_0 : bool;
	VERSION_1_1 : bool;
	VERSION_1_2 : bool;
	VERSION_1_3 : bool;
	VERSION_1_4 : bool;
	VERSION_1_5 : bool;
	VERSION_2_0 : bool;
	VERSION_2_1 : bool;
	VERSION_3_0 : bool;
	VERSION_3_1 : bool;
	VERSION_3_2 : bool;
	VERSION_3_3 : bool;
	VERSION_4_0 : bool;
	VERSION_4_1 : bool;
	VERSION_4_2 : bool;
	VERSION_4_3 : bool;
	VERSION_4_4 : bool;
	VERSION_4_5 : bool;
	VERSION_4_6 : bool;
	
	// Core enums:
	
	// VERSION_1_0
	DEPTH_BUFFER_BIT :: 0x00000100;
	STENCIL_BUFFER_BIT :: 0x00000400;
	COLOR_BUFFER_BIT :: 0x00004000;
	FALSE :: false;
	TRUE :: true;
	POINTS :: 0x0000;
	LINES :: 0x0001;
	LINE_LOOP :: 0x0002;
	LINE_STRIP :: 0x0003;
	TRIANGLES :: 0x0004;
	TRIANGLE_STRIP :: 0x0005;
	TRIANGLE_FAN :: 0x0006;
	QUADS :: 0x0007;
	NEVER :: 0x0200;
	LESS :: 0x0201;
	EQUAL :: 0x0202;
	LEQUAL :: 0x0203;
	GREATER :: 0x0204;
	NOTEQUAL :: 0x0205;
	GEQUAL :: 0x0206;
	ALWAYS :: 0x0207;
	ZERO :: 0;
	ONE :: 1;
	SRC_COLOR :: 0x0300;
	ONE_MINUS_SRC_COLOR :: 0x0301;
	SRC_ALPHA :: 0x0302;
	ONE_MINUS_SRC_ALPHA :: 0x0303;
	DST_ALPHA :: 0x0304;
	ONE_MINUS_DST_ALPHA :: 0x0305;
	DST_COLOR :: 0x0306;
	ONE_MINUS_DST_COLOR :: 0x0307;
	SRC_ALPHA_SATURATE :: 0x0308;
	NONE :: 0;
	FRONT_LEFT :: 0x0400;
	FRONT_RIGHT :: 0x0401;
	BACK_LEFT :: 0x0402;
	BACK_RIGHT :: 0x0403;
	FRONT :: 0x0404;
	BACK :: 0x0405;
	LEFT :: 0x0406;
	RIGHT :: 0x0407;
	FRONT_AND_BACK :: 0x0408;
	NO_ERROR :: 0;
	INVALID_ENUM :: 0x0500;
	INVALID_VALUE :: 0x0501;
	INVALID_OPERATION :: 0x0502;
	OUT_OF_MEMORY :: 0x0505;
	CW :: 0x0900;
	CCW :: 0x0901;
	POINT_SIZE :: 0x0B11;
	POINT_SIZE_RANGE :: 0x0B12;
	POINT_SIZE_GRANULARITY :: 0x0B13;
	LINE_SMOOTH :: 0x0B20;
	LINE_WIDTH :: 0x0B21;
	LINE_WIDTH_RANGE :: 0x0B22;
	LINE_WIDTH_GRANULARITY :: 0x0B23;
	POLYGON_MODE :: 0x0B40;
	POLYGON_SMOOTH :: 0x0B41;
	CULL_FACE :: 0x0B44;
	CULL_FACE_MODE :: 0x0B45;
	FRONT_FACE :: 0x0B46;
	DEPTH_RANGE :: 0x0B70;
	DEPTH_TEST :: 0x0B71;
	DEPTH_WRITEMASK :: 0x0B72;
	DEPTH_CLEAR_VALUE :: 0x0B73;
	DEPTH_FUNC :: 0x0B74;
	STENCIL_TEST :: 0x0B90;
	STENCIL_CLEAR_VALUE :: 0x0B91;
	STENCIL_FUNC :: 0x0B92;
	STENCIL_VALUE_MASK :: 0x0B93;
	STENCIL_FAIL :: 0x0B94;
	STENCIL_PASS_DEPTH_FAIL :: 0x0B95;
	STENCIL_PASS_DEPTH_PASS :: 0x0B96;
	STENCIL_REF :: 0x0B97;
	STENCIL_WRITEMASK :: 0x0B98;
	VIEWPORT :: 0x0BA2;
	DITHER :: 0x0BD0;
	BLEND_DST :: 0x0BE0;
	BLEND_SRC :: 0x0BE1;
	BLEND :: 0x0BE2;
	LOGIC_OP_MODE :: 0x0BF0;
	DRAW_BUFFER :: 0x0C01;
	READ_BUFFER :: 0x0C02;
	SCISSOR_BOX :: 0x0C10;
	SCISSOR_TEST :: 0x0C11;
	COLOR_CLEAR_VALUE :: 0x0C22;
	COLOR_WRITEMASK :: 0x0C23;
	DOUBLEBUFFER :: 0x0C32;
	STEREO :: 0x0C33;
	LINE_SMOOTH_HINT :: 0x0C52;
	POLYGON_SMOOTH_HINT :: 0x0C53;
	UNPACK_SWAP_BYTES :: 0x0CF0;
	UNPACK_LSB_FIRST :: 0x0CF1;
	UNPACK_ROW_LENGTH :: 0x0CF2;
	UNPACK_SKIP_ROWS :: 0x0CF3;
	UNPACK_SKIP_PIXELS :: 0x0CF4;
	UNPACK_ALIGNMENT :: 0x0CF5;
	PACK_SWAP_BYTES :: 0x0D00;
	PACK_LSB_FIRST :: 0x0D01;
	PACK_ROW_LENGTH :: 0x0D02;
	PACK_SKIP_ROWS :: 0x0D03;
	PACK_SKIP_PIXELS :: 0x0D04;
	PACK_ALIGNMENT :: 0x0D05;
	MAX_TEXTURE_SIZE :: 0x0D33;
	MAX_VIEWPORT_DIMS :: 0x0D3A;
	SUBPIXEL_BITS :: 0x0D50;
	TEXTURE_1D :: 0x0DE0;
	TEXTURE_2D :: 0x0DE1;
	TEXTURE_WIDTH :: 0x1000;
	TEXTURE_HEIGHT :: 0x1001;
	TEXTURE_BORDER_COLOR :: 0x1004;
	DONT_CARE :: 0x1100;
	FASTEST :: 0x1101;
	NICEST :: 0x1102;
	BYTE :: 0x1400;
	UNSIGNED_BYTE :: 0x1401;
	SHORT :: 0x1402;
	UNSIGNED_SHORT :: 0x1403;
	INT :: 0x1404;
	UNSIGNED_INT :: 0x1405;
	FLOAT :: 0x1406;
	STACK_OVERFLOW :: 0x0503;
	STACK_UNDERFLOW :: 0x0504;
	CLEAR :: 0x1500;
	AND :: 0x1501;
	AND_REVERSE :: 0x1502;
	COPY :: 0x1503;
	AND_INVERTED :: 0x1504;
	NOOP :: 0x1505;
	XOR :: 0x1506;
	OR :: 0x1507;
	NOR :: 0x1508;
	EQUIV :: 0x1509;
	INVERT :: 0x150A;
	OR_REVERSE :: 0x150B;
	COPY_INVERTED :: 0x150C;
	OR_INVERTED :: 0x150D;
	NAND :: 0x150E;
	SET :: 0x150F;
	TEXTURE :: 0x1702;
	COLOR :: 0x1800;
	DEPTH :: 0x1801;
	STENCIL :: 0x1802;
	STENCIL_INDEX :: 0x1901;
	DEPTH_COMPONENT :: 0x1902;
	RED :: 0x1903;
	GREEN :: 0x1904;
	BLUE :: 0x1905;
	ALPHA :: 0x1906;
	RGB :: 0x1907;
	RGBA :: 0x1908;
	POINT :: 0x1B00;
	LINE :: 0x1B01;
	FILL :: 0x1B02;
	KEEP :: 0x1E00;
	REPLACE :: 0x1E01;
	INCR :: 0x1E02;
	DECR :: 0x1E03;
	VENDOR :: 0x1F00;
	RENDERER :: 0x1F01;
	VERSION :: 0x1F02;
	EXTENSIONS :: 0x1F03;
	NEAREST :: 0x2600;
	LINEAR :: 0x2601;
	NEAREST_MIPMAP_NEAREST :: 0x2700;
	LINEAR_MIPMAP_NEAREST :: 0x2701;
	NEAREST_MIPMAP_LINEAR :: 0x2702;
	LINEAR_MIPMAP_LINEAR :: 0x2703;
	TEXTURE_MAG_FILTER :: 0x2800;
	TEXTURE_MIN_FILTER :: 0x2801;
	TEXTURE_WRAP_S :: 0x2802;
	TEXTURE_WRAP_T :: 0x2803;
	REPEAT :: 0x2901;
	CURRENT_BIT :: 0x00000001;
	POINT_BIT :: 0x00000002;
	LINE_BIT :: 0x00000004;
	POLYGON_BIT :: 0x00000008;
	POLYGON_STIPPLE_BIT :: 0x00000010;
	PIXEL_MODE_BIT :: 0x00000020;
	LIGHTING_BIT :: 0x00000040;
	FOG_BIT :: 0x00000080;
	ACCUM_BUFFER_BIT :: 0x00000200;
	VIEWPORT_BIT :: 0x00000800;
	TRANSFORM_BIT :: 0x00001000;
	ENABLE_BIT :: 0x00002000;
	HINT_BIT :: 0x00008000;
	EVAL_BIT :: 0x00010000;
	LIST_BIT :: 0x00020000;
	TEXTURE_BIT :: 0x00040000;
	SCISSOR_BIT :: 0x00080000;
	ALL_ATTRIB_BITS :: 0xFFFFFFFF;
	QUAD_STRIP :: 0x0008;
	POLYGON :: 0x0009;
	ACCUM :: 0x0100;
	LOAD :: 0x0101;
	RETURN :: 0x0102;
	MULT :: 0x0103;
	ADD :: 0x0104;
	AUX0 :: 0x0409;
	AUX1 :: 0x040A;
	AUX2 :: 0x040B;
	AUX3 :: 0x040C;
	GL_2D :: 0x0600;
	GL_3D :: 0x0601;
	GL_3D_COLOR :: 0x0602;
	GL_3D_COLOR_TEXTURE :: 0x0603;
	GL_4D_COLOR_TEXTURE :: 0x0604;
	PASS_THROUGH_TOKEN :: 0x0700;
	POINT_TOKEN :: 0x0701;
	LINE_TOKEN :: 0x0702;
	POLYGON_TOKEN :: 0x0703;
	BITMAP_TOKEN :: 0x0704;
	DRAW_PIXEL_TOKEN :: 0x0705;
	COPY_PIXEL_TOKEN :: 0x0706;
	LINE_RESET_TOKEN :: 0x0707;
	EXP :: 0x0800;
	EXP2 :: 0x0801;
	COEFF :: 0x0A00;
	ORDER :: 0x0A01;
	DOMAIN :: 0x0A02;
	PIXEL_MAP_I_TO_I :: 0x0C70;
	PIXEL_MAP_S_TO_S :: 0x0C71;
	PIXEL_MAP_I_TO_R :: 0x0C72;
	PIXEL_MAP_I_TO_G :: 0x0C73;
	PIXEL_MAP_I_TO_B :: 0x0C74;
	PIXEL_MAP_I_TO_A :: 0x0C75;
	PIXEL_MAP_R_TO_R :: 0x0C76;
	PIXEL_MAP_G_TO_G :: 0x0C77;
	PIXEL_MAP_B_TO_B :: 0x0C78;
	PIXEL_MAP_A_TO_A :: 0x0C79;
	CURRENT_COLOR :: 0x0B00;
	CURRENT_INDEX :: 0x0B01;
	CURRENT_NORMAL :: 0x0B02;
	CURRENT_TEXTURE_COORDS :: 0x0B03;
	CURRENT_RASTER_COLOR :: 0x0B04;
	CURRENT_RASTER_INDEX :: 0x0B05;
	CURRENT_RASTER_TEXTURE_COORDS :: 0x0B06;
	CURRENT_RASTER_POSITION :: 0x0B07;
	CURRENT_RASTER_POSITION_VALID :: 0x0B08;
	CURRENT_RASTER_DISTANCE :: 0x0B09;
	POINT_SMOOTH :: 0x0B10;
	LINE_STIPPLE :: 0x0B24;
	LINE_STIPPLE_PATTERN :: 0x0B25;
	LINE_STIPPLE_REPEAT :: 0x0B26;
	LIST_MODE :: 0x0B30;
	MAX_LIST_NESTING :: 0x0B31;
	LIST_BASE :: 0x0B32;
	LIST_INDEX :: 0x0B33;
	POLYGON_STIPPLE :: 0x0B42;
	EDGE_FLAG :: 0x0B43;
	LIGHTING :: 0x0B50;
	LIGHT_MODEL_LOCAL_VIEWER :: 0x0B51;
	LIGHT_MODEL_TWO_SIDE :: 0x0B52;
	LIGHT_MODEL_AMBIENT :: 0x0B53;
	SHADE_MODEL :: 0x0B54;
	COLOR_MATERIAL_FACE :: 0x0B55;
	COLOR_MATERIAL_PARAMETER :: 0x0B56;
	COLOR_MATERIAL :: 0x0B57;
	FOG :: 0x0B60;
	FOG_INDEX :: 0x0B61;
	FOG_DENSITY :: 0x0B62;
	FOG_START :: 0x0B63;
	FOG_END :: 0x0B64;
	FOG_MODE :: 0x0B65;
	FOG_COLOR :: 0x0B66;
	ACCUM_CLEAR_VALUE :: 0x0B80;
	MATRIX_MODE :: 0x0BA0;
	NORMALIZE :: 0x0BA1;
	MODELVIEW_STACK_DEPTH :: 0x0BA3;
	PROJECTION_STACK_DEPTH :: 0x0BA4;
	TEXTURE_STACK_DEPTH :: 0x0BA5;
	MODELVIEW_MATRIX :: 0x0BA6;
	PROJECTION_MATRIX :: 0x0BA7;
	TEXTURE_MATRIX :: 0x0BA8;
	ATTRIB_STACK_DEPTH :: 0x0BB0;
	ALPHA_TEST :: 0x0BC0;
	ALPHA_TEST_FUNC :: 0x0BC1;
	ALPHA_TEST_REF :: 0x0BC2;
	LOGIC_OP :: 0x0BF1;
	AUX_BUFFERS :: 0x0C00;
	INDEX_CLEAR_VALUE :: 0x0C20;
	INDEX_WRITEMASK :: 0x0C21;
	INDEX_MODE :: 0x0C30;
	RGBA_MODE :: 0x0C31;
	RENDER_MODE :: 0x0C40;
	PERSPECTIVE_CORRECTION_HINT :: 0x0C50;
	POINT_SMOOTH_HINT :: 0x0C51;
	FOG_HINT :: 0x0C54;
	TEXTURE_GEN_S :: 0x0C60;
	TEXTURE_GEN_T :: 0x0C61;
	TEXTURE_GEN_R :: 0x0C62;
	TEXTURE_GEN_Q :: 0x0C63;
	PIXEL_MAP_I_TO_I_SIZE :: 0x0CB0;
	PIXEL_MAP_S_TO_S_SIZE :: 0x0CB1;
	PIXEL_MAP_I_TO_R_SIZE :: 0x0CB2;
	PIXEL_MAP_I_TO_G_SIZE :: 0x0CB3;
	PIXEL_MAP_I_TO_B_SIZE :: 0x0CB4;
	PIXEL_MAP_I_TO_A_SIZE :: 0x0CB5;
	PIXEL_MAP_R_TO_R_SIZE :: 0x0CB6;
	PIXEL_MAP_G_TO_G_SIZE :: 0x0CB7;
	PIXEL_MAP_B_TO_B_SIZE :: 0x0CB8;
	PIXEL_MAP_A_TO_A_SIZE :: 0x0CB9;
	MAP_COLOR :: 0x0D10;
	MAP_STENCIL :: 0x0D11;
	INDEX_SHIFT :: 0x0D12;
	INDEX_OFFSET :: 0x0D13;
	RED_SCALE :: 0x0D14;
	RED_BIAS :: 0x0D15;
	ZOOM_X :: 0x0D16;
	ZOOM_Y :: 0x0D17;
	GREEN_SCALE :: 0x0D18;
	GREEN_BIAS :: 0x0D19;
	BLUE_SCALE :: 0x0D1A;
	BLUE_BIAS :: 0x0D1B;
	ALPHA_SCALE :: 0x0D1C;
	ALPHA_BIAS :: 0x0D1D;
	DEPTH_SCALE :: 0x0D1E;
	DEPTH_BIAS :: 0x0D1F;
	MAX_EVAL_ORDER :: 0x0D30;
	MAX_LIGHTS :: 0x0D31;
	MAX_CLIP_PLANES :: 0x0D32;
	MAX_PIXEL_MAP_TABLE :: 0x0D34;
	MAX_ATTRIB_STACK_DEPTH :: 0x0D35;
	MAX_MODELVIEW_STACK_DEPTH :: 0x0D36;
	MAX_NAME_STACK_DEPTH :: 0x0D37;
	MAX_PROJECTION_STACK_DEPTH :: 0x0D38;
	MAX_TEXTURE_STACK_DEPTH :: 0x0D39;
	INDEX_BITS :: 0x0D51;
	RED_BITS :: 0x0D52;
	GREEN_BITS :: 0x0D53;
	BLUE_BITS :: 0x0D54;
	ALPHA_BITS :: 0x0D55;
	DEPTH_BITS :: 0x0D56;
	STENCIL_BITS :: 0x0D57;
	ACCUM_RED_BITS :: 0x0D58;
	ACCUM_GREEN_BITS :: 0x0D59;
	ACCUM_BLUE_BITS :: 0x0D5A;
	ACCUM_ALPHA_BITS :: 0x0D5B;
	NAME_STACK_DEPTH :: 0x0D70;
	AUTO_NORMAL :: 0x0D80;
	MAP1_COLOR_4 :: 0x0D90;
	MAP1_INDEX :: 0x0D91;
	MAP1_NORMAL :: 0x0D92;
	MAP1_TEXTURE_COORD_1 :: 0x0D93;
	MAP1_TEXTURE_COORD_2 :: 0x0D94;
	MAP1_TEXTURE_COORD_3 :: 0x0D95;
	MAP1_TEXTURE_COORD_4 :: 0x0D96;
	MAP1_VERTEX_3 :: 0x0D97;
	MAP1_VERTEX_4 :: 0x0D98;
	MAP2_COLOR_4 :: 0x0DB0;
	MAP2_INDEX :: 0x0DB1;
	MAP2_NORMAL :: 0x0DB2;
	MAP2_TEXTURE_COORD_1 :: 0x0DB3;
	MAP2_TEXTURE_COORD_2 :: 0x0DB4;
	MAP2_TEXTURE_COORD_3 :: 0x0DB5;
	MAP2_TEXTURE_COORD_4 :: 0x0DB6;
	MAP2_VERTEX_3 :: 0x0DB7;
	MAP2_VERTEX_4 :: 0x0DB8;
	MAP1_GRID_DOMAIN :: 0x0DD0;
	MAP1_GRID_SEGMENTS :: 0x0DD1;
	MAP2_GRID_DOMAIN :: 0x0DD2;
	MAP2_GRID_SEGMENTS :: 0x0DD3;
	TEXTURE_COMPONENTS :: 0x1003;
	TEXTURE_BORDER :: 0x1005;
	AMBIENT :: 0x1200;
	DIFFUSE :: 0x1201;
	SPECULAR :: 0x1202;
	POSITION :: 0x1203;
	SPOT_DIRECTION :: 0x1204;
	SPOT_EXPONENT :: 0x1205;
	SPOT_CUTOFF :: 0x1206;
	CONSTANT_ATTENUATION :: 0x1207;
	LINEAR_ATTENUATION :: 0x1208;
	QUADRATIC_ATTENUATION :: 0x1209;
	COMPILE :: 0x1300;
	COMPILE_AND_EXECUTE :: 0x1301;
	GL_2_BYTES :: 0x1407;
	GL_3_BYTES :: 0x1408;
	GL_4_BYTES :: 0x1409;
	EMISSION :: 0x1600;
	SHININESS :: 0x1601;
	AMBIENT_AND_DIFFUSE :: 0x1602;
	COLOR_INDEXES :: 0x1603;
	MODELVIEW :: 0x1700;
	PROJECTION :: 0x1701;
	COLOR_INDEX :: 0x1900;
	LUMINANCE :: 0x1909;
	LUMINANCE_ALPHA :: 0x190A;
	BITMAP :: 0x1A00;
	RENDER :: 0x1C00;
	FEEDBACK :: 0x1C01;
	SELECT :: 0x1C02;
	FLAT :: 0x1D00;
	SMOOTH :: 0x1D01;
	S :: 0x2000;
	T :: 0x2001;
	R :: 0x2002;
	Q :: 0x2003;
	MODULATE :: 0x2100;
	DECAL :: 0x2101;
	TEXTURE_ENV_MODE :: 0x2200;
	TEXTURE_ENV_COLOR :: 0x2201;
	TEXTURE_ENV :: 0x2300;
	EYE_LINEAR :: 0x2400;
	OBJECT_LINEAR :: 0x2401;
	SPHERE_MAP :: 0x2402;
	TEXTURE_GEN_MODE :: 0x2500;
	OBJECT_PLANE :: 0x2501;
	EYE_PLANE :: 0x2502;
	CLAMP :: 0x2900;
	CLIP_PLANE0 :: 0x3000;
	CLIP_PLANE1 :: 0x3001;
	CLIP_PLANE2 :: 0x3002;
	CLIP_PLANE3 :: 0x3003;
	CLIP_PLANE4 :: 0x3004;
	CLIP_PLANE5 :: 0x3005;
	LIGHT0 :: 0x4000;
	LIGHT1 :: 0x4001;
	LIGHT2 :: 0x4002;
	LIGHT3 :: 0x4003;
	LIGHT4 :: 0x4004;
	LIGHT5 :: 0x4005;
	LIGHT6 :: 0x4006;
	LIGHT7 :: 0x4007;
	
	// VERSION_1_1
	COLOR_LOGIC_OP :: 0x0BF2;
	POLYGON_OFFSET_UNITS :: 0x2A00;
	POLYGON_OFFSET_POINT :: 0x2A01;
	POLYGON_OFFSET_LINE :: 0x2A02;
	POLYGON_OFFSET_FILL :: 0x8037;
	POLYGON_OFFSET_FACTOR :: 0x8038;
	TEXTURE_BINDING_1D :: 0x8068;
	TEXTURE_BINDING_2D :: 0x8069;
	TEXTURE_INTERNAL_FORMAT :: 0x1003;
	TEXTURE_RED_SIZE :: 0x805C;
	TEXTURE_GREEN_SIZE :: 0x805D;
	TEXTURE_BLUE_SIZE :: 0x805E;
	TEXTURE_ALPHA_SIZE :: 0x805F;
	DOUBLE :: 0x140A;
	PROXY_TEXTURE_1D :: 0x8063;
	PROXY_TEXTURE_2D :: 0x8064;
	R3_G3_B2 :: 0x2A10;
	RGB4 :: 0x804F;
	RGB5 :: 0x8050;
	RGB8 :: 0x8051;
	RGB10 :: 0x8052;
	RGB12 :: 0x8053;
	RGB16 :: 0x8054;
	RGBA2 :: 0x8055;
	RGBA4 :: 0x8056;
	RGB5_A1 :: 0x8057;
	RGBA8 :: 0x8058;
	RGB10_A2 :: 0x8059;
	RGBA12 :: 0x805A;
	RGBA16 :: 0x805B;
	CLIENT_PIXEL_STORE_BIT :: 0x00000001;
	CLIENT_VERTEX_ARRAY_BIT :: 0x00000002;
	CLIENT_ALL_ATTRIB_BITS :: 0xFFFFFFFF;
	VERTEX_ARRAY_POINTER :: 0x808E;
	NORMAL_ARRAY_POINTER :: 0x808F;
	COLOR_ARRAY_POINTER :: 0x8090;
	INDEX_ARRAY_POINTER :: 0x8091;
	TEXTURE_COORD_ARRAY_POINTER :: 0x8092;
	EDGE_FLAG_ARRAY_POINTER :: 0x8093;
	FEEDBACK_BUFFER_POINTER :: 0x0DF0;
	SELECTION_BUFFER_POINTER :: 0x0DF3;
	CLIENT_ATTRIB_STACK_DEPTH :: 0x0BB1;
	INDEX_LOGIC_OP :: 0x0BF1;
	MAX_CLIENT_ATTRIB_STACK_DEPTH :: 0x0D3B;
	FEEDBACK_BUFFER_SIZE :: 0x0DF1;
	FEEDBACK_BUFFER_TYPE :: 0x0DF2;
	SELECTION_BUFFER_SIZE :: 0x0DF4;
	VERTEX_ARRAY :: 0x8074;
	NORMAL_ARRAY :: 0x8075;
	COLOR_ARRAY :: 0x8076;
	INDEX_ARRAY :: 0x8077;
	TEXTURE_COORD_ARRAY :: 0x8078;
	EDGE_FLAG_ARRAY :: 0x8079;
	VERTEX_ARRAY_SIZE :: 0x807A;
	VERTEX_ARRAY_TYPE :: 0x807B;
	VERTEX_ARRAY_STRIDE :: 0x807C;
	NORMAL_ARRAY_TYPE :: 0x807E;
	NORMAL_ARRAY_STRIDE :: 0x807F;
	COLOR_ARRAY_SIZE :: 0x8081;
	COLOR_ARRAY_TYPE :: 0x8082;
	COLOR_ARRAY_STRIDE :: 0x8083;
	INDEX_ARRAY_TYPE :: 0x8085;
	INDEX_ARRAY_STRIDE :: 0x8086;
	TEXTURE_COORD_ARRAY_SIZE :: 0x8088;
	TEXTURE_COORD_ARRAY_TYPE :: 0x8089;
	TEXTURE_COORD_ARRAY_STRIDE :: 0x808A;
	EDGE_FLAG_ARRAY_STRIDE :: 0x808C;
	TEXTURE_LUMINANCE_SIZE :: 0x8060;
	TEXTURE_INTENSITY_SIZE :: 0x8061;
	TEXTURE_PRIORITY :: 0x8066;
	TEXTURE_RESIDENT :: 0x8067;
	ALPHA4 :: 0x803B;
	ALPHA8 :: 0x803C;
	ALPHA12 :: 0x803D;
	ALPHA16 :: 0x803E;
	LUMINANCE4 :: 0x803F;
	LUMINANCE8 :: 0x8040;
	LUMINANCE12 :: 0x8041;
	LUMINANCE16 :: 0x8042;
	LUMINANCE4_ALPHA4 :: 0x8043;
	LUMINANCE6_ALPHA2 :: 0x8044;
	LUMINANCE8_ALPHA8 :: 0x8045;
	LUMINANCE12_ALPHA4 :: 0x8046;
	LUMINANCE12_ALPHA12 :: 0x8047;
	LUMINANCE16_ALPHA16 :: 0x8048;
	INTENSITY :: 0x8049;
	INTENSITY4 :: 0x804A;
	INTENSITY8 :: 0x804B;
	INTENSITY12 :: 0x804C;
	INTENSITY16 :: 0x804D;
	V2F :: 0x2A20;
	V3F :: 0x2A21;
	C4UB_V2F :: 0x2A22;
	C4UB_V3F :: 0x2A23;
	C3F_V3F :: 0x2A24;
	N3F_V3F :: 0x2A25;
	C4F_N3F_V3F :: 0x2A26;
	T2F_V3F :: 0x2A27;
	T4F_V4F :: 0x2A28;
	T2F_C4UB_V3F :: 0x2A29;
	T2F_C3F_V3F :: 0x2A2A;
	T2F_N3F_V3F :: 0x2A2B;
	T2F_C4F_N3F_V3F :: 0x2A2C;
	T4F_C4F_N3F_V4F :: 0x2A2D;
	
	// VERSION_1_2
	UNSIGNED_BYTE_3_3_2 :: 0x8032;
	UNSIGNED_SHORT_4_4_4_4 :: 0x8033;
	UNSIGNED_SHORT_5_5_5_1 :: 0x8034;
	UNSIGNED_INT_8_8_8_8 :: 0x8035;
	UNSIGNED_INT_10_10_10_2 :: 0x8036;
	TEXTURE_BINDING_3D :: 0x806A;
	PACK_SKIP_IMAGES :: 0x806B;
	PACK_IMAGE_HEIGHT :: 0x806C;
	UNPACK_SKIP_IMAGES :: 0x806D;
	UNPACK_IMAGE_HEIGHT :: 0x806E;
	TEXTURE_3D :: 0x806F;
	PROXY_TEXTURE_3D :: 0x8070;
	TEXTURE_DEPTH :: 0x8071;
	TEXTURE_WRAP_R :: 0x8072;
	MAX_3D_TEXTURE_SIZE :: 0x8073;
	UNSIGNED_BYTE_2_3_3_REV :: 0x8362;
	UNSIGNED_SHORT_5_6_5 :: 0x8363;
	UNSIGNED_SHORT_5_6_5_REV :: 0x8364;
	UNSIGNED_SHORT_4_4_4_4_REV :: 0x8365;
	UNSIGNED_SHORT_1_5_5_5_REV :: 0x8366;
	UNSIGNED_INT_8_8_8_8_REV :: 0x8367;
	UNSIGNED_INT_2_10_10_10_REV :: 0x8368;
	BGR :: 0x80E0;
	BGRA :: 0x80E1;
	MAX_ELEMENTS_VERTICES :: 0x80E8;
	MAX_ELEMENTS_INDICES :: 0x80E9;
	CLAMP_TO_EDGE :: 0x812F;
	TEXTURE_MIN_LOD :: 0x813A;
	TEXTURE_MAX_LOD :: 0x813B;
	TEXTURE_BASE_LEVEL :: 0x813C;
	TEXTURE_MAX_LEVEL :: 0x813D;
	SMOOTH_POINT_SIZE_RANGE :: 0x0B12;
	SMOOTH_POINT_SIZE_GRANULARITY :: 0x0B13;
	SMOOTH_LINE_WIDTH_RANGE :: 0x0B22;
	SMOOTH_LINE_WIDTH_GRANULARITY :: 0x0B23;
	ALIASED_LINE_WIDTH_RANGE :: 0x846E;
	RESCALE_NORMAL :: 0x803A;
	LIGHT_MODEL_COLOR_CONTROL :: 0x81F8;
	SINGLE_COLOR :: 0x81F9;
	SEPARATE_SPECULAR_COLOR :: 0x81FA;
	ALIASED_POINT_SIZE_RANGE :: 0x846D;
	
	// VERSION_1_3
	TEXTURE0 :: 0x84C0;
	TEXTURE1 :: 0x84C1;
	TEXTURE2 :: 0x84C2;
	TEXTURE3 :: 0x84C3;
	TEXTURE4 :: 0x84C4;
	TEXTURE5 :: 0x84C5;
	TEXTURE6 :: 0x84C6;
	TEXTURE7 :: 0x84C7;
	TEXTURE8 :: 0x84C8;
	TEXTURE9 :: 0x84C9;
	TEXTURE10 :: 0x84CA;
	TEXTURE11 :: 0x84CB;
	TEXTURE12 :: 0x84CC;
	TEXTURE13 :: 0x84CD;
	TEXTURE14 :: 0x84CE;
	TEXTURE15 :: 0x84CF;
	TEXTURE16 :: 0x84D0;
	TEXTURE17 :: 0x84D1;
	TEXTURE18 :: 0x84D2;
	TEXTURE19 :: 0x84D3;
	TEXTURE20 :: 0x84D4;
	TEXTURE21 :: 0x84D5;
	TEXTURE22 :: 0x84D6;
	TEXTURE23 :: 0x84D7;
	TEXTURE24 :: 0x84D8;
	TEXTURE25 :: 0x84D9;
	TEXTURE26 :: 0x84DA;
	TEXTURE27 :: 0x84DB;
	TEXTURE28 :: 0x84DC;
	TEXTURE29 :: 0x84DD;
	TEXTURE30 :: 0x84DE;
	TEXTURE31 :: 0x84DF;
	ACTIVE_TEXTURE :: 0x84E0;
	MULTISAMPLE :: 0x809D;
	SAMPLE_ALPHA_TO_COVERAGE :: 0x809E;
	SAMPLE_ALPHA_TO_ONE :: 0x809F;
	SAMPLE_COVERAGE :: 0x80A0;
	SAMPLE_BUFFERS :: 0x80A8;
	SAMPLES :: 0x80A9;
	SAMPLE_COVERAGE_VALUE :: 0x80AA;
	SAMPLE_COVERAGE_INVERT :: 0x80AB;
	TEXTURE_CUBE_MAP :: 0x8513;
	TEXTURE_BINDING_CUBE_MAP :: 0x8514;
	TEXTURE_CUBE_MAP_POSITIVE_X :: 0x8515;
	TEXTURE_CUBE_MAP_NEGATIVE_X :: 0x8516;
	TEXTURE_CUBE_MAP_POSITIVE_Y :: 0x8517;
	TEXTURE_CUBE_MAP_NEGATIVE_Y :: 0x8518;
	TEXTURE_CUBE_MAP_POSITIVE_Z :: 0x8519;
	TEXTURE_CUBE_MAP_NEGATIVE_Z :: 0x851A;
	PROXY_TEXTURE_CUBE_MAP :: 0x851B;
	MAX_CUBE_MAP_TEXTURE_SIZE :: 0x851C;
	COMPRESSED_RGB :: 0x84ED;
	COMPRESSED_RGBA :: 0x84EE;
	TEXTURE_COMPRESSION_HINT :: 0x84EF;
	TEXTURE_COMPRESSED_IMAGE_SIZE :: 0x86A0;
	TEXTURE_COMPRESSED :: 0x86A1;
	NUM_COMPRESSED_TEXTURE_FORMATS :: 0x86A2;
	COMPRESSED_TEXTURE_FORMATS :: 0x86A3;
	CLAMP_TO_BORDER :: 0x812D;
	CLIENT_ACTIVE_TEXTURE :: 0x84E1;
	MAX_TEXTURE_UNITS :: 0x84E2;
	TRANSPOSE_MODELVIEW_MATRIX :: 0x84E3;
	TRANSPOSE_PROJECTION_MATRIX :: 0x84E4;
	TRANSPOSE_TEXTURE_MATRIX :: 0x84E5;
	TRANSPOSE_COLOR_MATRIX :: 0x84E6;
	MULTISAMPLE_BIT :: 0x20000000;
	NORMAL_MAP :: 0x8511;
	REFLECTION_MAP :: 0x8512;
	COMPRESSED_ALPHA :: 0x84E9;
	COMPRESSED_LUMINANCE :: 0x84EA;
	COMPRESSED_LUMINANCE_ALPHA :: 0x84EB;
	COMPRESSED_INTENSITY :: 0x84EC;
	COMBINE :: 0x8570;
	COMBINE_RGB :: 0x8571;
	COMBINE_ALPHA :: 0x8572;
	SOURCE0_RGB :: 0x8580;
	SOURCE1_RGB :: 0x8581;
	SOURCE2_RGB :: 0x8582;
	SOURCE0_ALPHA :: 0x8588;
	SOURCE1_ALPHA :: 0x8589;
	SOURCE2_ALPHA :: 0x858A;
	OPERAND0_RGB :: 0x8590;
	OPERAND1_RGB :: 0x8591;
	OPERAND2_RGB :: 0x8592;
	OPERAND0_ALPHA :: 0x8598;
	OPERAND1_ALPHA :: 0x8599;
	OPERAND2_ALPHA :: 0x859A;
	RGB_SCALE :: 0x8573;
	ADD_SIGNED :: 0x8574;
	INTERPOLATE :: 0x8575;
	SUBTRACT :: 0x84E7;
	CONSTANT :: 0x8576;
	PRIMARY_COLOR :: 0x8577;
	PREVIOUS :: 0x8578;
	DOT3_RGB :: 0x86AE;
	DOT3_RGBA :: 0x86AF;
	
	// VERSION_1_4
	BLEND_DST_RGB :: 0x80C8;
	BLEND_SRC_RGB :: 0x80C9;
	BLEND_DST_ALPHA :: 0x80CA;
	BLEND_SRC_ALPHA :: 0x80CB;
	POINT_FADE_THRESHOLD_SIZE :: 0x8128;
	DEPTH_COMPONENT16 :: 0x81A5;
	DEPTH_COMPONENT24 :: 0x81A6;
	DEPTH_COMPONENT32 :: 0x81A7;
	MIRRORED_REPEAT :: 0x8370;
	MAX_TEXTURE_LOD_BIAS :: 0x84FD;
	TEXTURE_LOD_BIAS :: 0x8501;
	INCR_WRAP :: 0x8507;
	DECR_WRAP :: 0x8508;
	TEXTURE_DEPTH_SIZE :: 0x884A;
	TEXTURE_COMPARE_MODE :: 0x884C;
	TEXTURE_COMPARE_FUNC :: 0x884D;
	POINT_SIZE_MIN :: 0x8126;
	POINT_SIZE_MAX :: 0x8127;
	POINT_DISTANCE_ATTENUATION :: 0x8129;
	GENERATE_MIPMAP :: 0x8191;
	GENERATE_MIPMAP_HINT :: 0x8192;
	FOG_COORDINATE_SOURCE :: 0x8450;
	FOG_COORDINATE :: 0x8451;
	FRAGMENT_DEPTH :: 0x8452;
	CURRENT_FOG_COORDINATE :: 0x8453;
	FOG_COORDINATE_ARRAY_TYPE :: 0x8454;
	FOG_COORDINATE_ARRAY_STRIDE :: 0x8455;
	FOG_COORDINATE_ARRAY_POINTER :: 0x8456;
	FOG_COORDINATE_ARRAY :: 0x8457;
	COLOR_SUM :: 0x8458;
	CURRENT_SECONDARY_COLOR :: 0x8459;
	SECONDARY_COLOR_ARRAY_SIZE :: 0x845A;
	SECONDARY_COLOR_ARRAY_TYPE :: 0x845B;
	SECONDARY_COLOR_ARRAY_STRIDE :: 0x845C;
	SECONDARY_COLOR_ARRAY_POINTER :: 0x845D;
	SECONDARY_COLOR_ARRAY :: 0x845E;
	TEXTURE_FILTER_CONTROL :: 0x8500;
	DEPTH_TEXTURE_MODE :: 0x884B;
	COMPARE_R_TO_TEXTURE :: 0x884E;
	BLEND_COLOR :: 0x8005;
	BLEND_EQUATION :: 0x8009;
	CONSTANT_COLOR :: 0x8001;
	ONE_MINUS_CONSTANT_COLOR :: 0x8002;
	CONSTANT_ALPHA :: 0x8003;
	ONE_MINUS_CONSTANT_ALPHA :: 0x8004;
	FUNC_ADD :: 0x8006;
	FUNC_REVERSE_SUBTRACT :: 0x800B;
	FUNC_SUBTRACT :: 0x800A;
	MIN :: 0x8007;
	MAX :: 0x8008;
	
	// VERSION_1_5
	BUFFER_SIZE :: 0x8764;
	BUFFER_USAGE :: 0x8765;
	QUERY_COUNTER_BITS :: 0x8864;
	CURRENT_QUERY :: 0x8865;
	QUERY_RESULT :: 0x8866;
	QUERY_RESULT_AVAILABLE :: 0x8867;
	ARRAY_BUFFER :: 0x8892;
	ELEMENT_ARRAY_BUFFER :: 0x8893;
	ARRAY_BUFFER_BINDING :: 0x8894;
	ELEMENT_ARRAY_BUFFER_BINDING :: 0x8895;
	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :: 0x889F;
	READ_ONLY :: 0x88B8;
	WRITE_ONLY :: 0x88B9;
	READ_WRITE :: 0x88BA;
	BUFFER_ACCESS :: 0x88BB;
	BUFFER_MAPPED :: 0x88BC;
	BUFFER_MAP_POINTER :: 0x88BD;
	STREAM_DRAW :: 0x88E0;
	STREAM_READ :: 0x88E1;
	STREAM_COPY :: 0x88E2;
	STATIC_DRAW :: 0x88E4;
	STATIC_READ :: 0x88E5;
	STATIC_COPY :: 0x88E6;
	DYNAMIC_DRAW :: 0x88E8;
	DYNAMIC_READ :: 0x88E9;
	DYNAMIC_COPY :: 0x88EA;
	SAMPLES_PASSED :: 0x8914;
	SRC1_ALPHA :: 0x8589;
	VERTEX_ARRAY_BUFFER_BINDING :: 0x8896;
	NORMAL_ARRAY_BUFFER_BINDING :: 0x8897;
	COLOR_ARRAY_BUFFER_BINDING :: 0x8898;
	INDEX_ARRAY_BUFFER_BINDING :: 0x8899;
	TEXTURE_COORD_ARRAY_BUFFER_BINDING :: 0x889A;
	EDGE_FLAG_ARRAY_BUFFER_BINDING :: 0x889B;
	SECONDARY_COLOR_ARRAY_BUFFER_BINDING :: 0x889C;
	FOG_COORDINATE_ARRAY_BUFFER_BINDING :: 0x889D;
	WEIGHT_ARRAY_BUFFER_BINDING :: 0x889E;
	FOG_COORD_SRC :: 0x8450;
	FOG_COORD :: 0x8451;
	CURRENT_FOG_COORD :: 0x8453;
	FOG_COORD_ARRAY_TYPE :: 0x8454;
	FOG_COORD_ARRAY_STRIDE :: 0x8455;
	FOG_COORD_ARRAY_POINTER :: 0x8456;
	FOG_COORD_ARRAY :: 0x8457;
	FOG_COORD_ARRAY_BUFFER_BINDING :: 0x889D;
	SRC0_RGB :: 0x8580;
	SRC1_RGB :: 0x8581;
	SRC2_RGB :: 0x8582;
	SRC0_ALPHA :: 0x8588;
	SRC2_ALPHA :: 0x858A;
	
	// VERSION_2_0
	BLEND_EQUATION_RGB :: 0x8009;
	VERTEX_ATTRIB_ARRAY_ENABLED :: 0x8622;
	VERTEX_ATTRIB_ARRAY_SIZE :: 0x8623;
	VERTEX_ATTRIB_ARRAY_STRIDE :: 0x8624;
	VERTEX_ATTRIB_ARRAY_TYPE :: 0x8625;
	CURRENT_VERTEX_ATTRIB :: 0x8626;
	VERTEX_PROGRAM_POINT_SIZE :: 0x8642;
	VERTEX_ATTRIB_ARRAY_POINTER :: 0x8645;
	STENCIL_BACK_FUNC :: 0x8800;
	STENCIL_BACK_FAIL :: 0x8801;
	STENCIL_BACK_PASS_DEPTH_FAIL :: 0x8802;
	STENCIL_BACK_PASS_DEPTH_PASS :: 0x8803;
	MAX_DRAW_BUFFERS :: 0x8824;
	DRAW_BUFFER0 :: 0x8825;
	DRAW_BUFFER1 :: 0x8826;
	DRAW_BUFFER2 :: 0x8827;
	DRAW_BUFFER3 :: 0x8828;
	DRAW_BUFFER4 :: 0x8829;
	DRAW_BUFFER5 :: 0x882A;
	DRAW_BUFFER6 :: 0x882B;
	DRAW_BUFFER7 :: 0x882C;
	DRAW_BUFFER8 :: 0x882D;
	DRAW_BUFFER9 :: 0x882E;
	DRAW_BUFFER10 :: 0x882F;
	DRAW_BUFFER11 :: 0x8830;
	DRAW_BUFFER12 :: 0x8831;
	DRAW_BUFFER13 :: 0x8832;
	DRAW_BUFFER14 :: 0x8833;
	DRAW_BUFFER15 :: 0x8834;
	BLEND_EQUATION_ALPHA :: 0x883D;
	MAX_VERTEX_ATTRIBS :: 0x8869;
	VERTEX_ATTRIB_ARRAY_NORMALIZED :: 0x886A;
	MAX_TEXTURE_IMAGE_UNITS :: 0x8872;
	FRAGMENT_SHADER :: 0x8B30;
	VERTEX_SHADER :: 0x8B31;
	MAX_FRAGMENT_UNIFORM_COMPONENTS :: 0x8B49;
	MAX_VERTEX_UNIFORM_COMPONENTS :: 0x8B4A;
	MAX_VARYING_FLOATS :: 0x8B4B;
	MAX_VERTEX_TEXTURE_IMAGE_UNITS :: 0x8B4C;
	MAX_COMBINED_TEXTURE_IMAGE_UNITS :: 0x8B4D;
	SHADER_TYPE :: 0x8B4F;
	FLOAT_VEC2 :: 0x8B50;
	FLOAT_VEC3 :: 0x8B51;
	FLOAT_VEC4 :: 0x8B52;
	INT_VEC2 :: 0x8B53;
	INT_VEC3 :: 0x8B54;
	INT_VEC4 :: 0x8B55;
	BOOL :: 0x8B56;
	BOOL_VEC2 :: 0x8B57;
	BOOL_VEC3 :: 0x8B58;
	BOOL_VEC4 :: 0x8B59;
	FLOAT_MAT2 :: 0x8B5A;
	FLOAT_MAT3 :: 0x8B5B;
	FLOAT_MAT4 :: 0x8B5C;
	SAMPLER_1D :: 0x8B5D;
	SAMPLER_2D :: 0x8B5E;
	SAMPLER_3D :: 0x8B5F;
	SAMPLER_CUBE :: 0x8B60;
	SAMPLER_1D_SHADOW :: 0x8B61;
	SAMPLER_2D_SHADOW :: 0x8B62;
	DELETE_STATUS :: 0x8B80;
	COMPILE_STATUS :: 0x8B81;
	LINK_STATUS :: 0x8B82;
	VALIDATE_STATUS :: 0x8B83;
	INFO_LOG_LENGTH :: 0x8B84;
	ATTACHED_SHADERS :: 0x8B85;
	ACTIVE_UNIFORMS :: 0x8B86;
	ACTIVE_UNIFORM_MAX_LENGTH :: 0x8B87;
	SHADER_SOURCE_LENGTH :: 0x8B88;
	ACTIVE_ATTRIBUTES :: 0x8B89;
	ACTIVE_ATTRIBUTE_MAX_LENGTH :: 0x8B8A;
	FRAGMENT_SHADER_DERIVATIVE_HINT :: 0x8B8B;
	SHADING_LANGUAGE_VERSION :: 0x8B8C;
	CURRENT_PROGRAM :: 0x8B8D;
	POINT_SPRITE_COORD_ORIGIN :: 0x8CA0;
	LOWER_LEFT :: 0x8CA1;
	UPPER_LEFT :: 0x8CA2;
	STENCIL_BACK_REF :: 0x8CA3;
	STENCIL_BACK_VALUE_MASK :: 0x8CA4;
	STENCIL_BACK_WRITEMASK :: 0x8CA5;
	VERTEX_PROGRAM_TWO_SIDE :: 0x8643;
	POINT_SPRITE :: 0x8861;
	COORD_REPLACE :: 0x8862;
	MAX_TEXTURE_COORDS :: 0x8871;
	
	// VERSION_2_1
	PIXEL_PACK_BUFFER :: 0x88EB;
	PIXEL_UNPACK_BUFFER :: 0x88EC;
	PIXEL_PACK_BUFFER_BINDING :: 0x88ED;
	PIXEL_UNPACK_BUFFER_BINDING :: 0x88EF;
	FLOAT_MAT2x3 :: 0x8B65;
	FLOAT_MAT2x4 :: 0x8B66;
	FLOAT_MAT3x2 :: 0x8B67;
	FLOAT_MAT3x4 :: 0x8B68;
	FLOAT_MAT4x2 :: 0x8B69;
	FLOAT_MAT4x3 :: 0x8B6A;
	SRGB :: 0x8C40;
	SRGB8 :: 0x8C41;
	SRGB_ALPHA :: 0x8C42;
	SRGB8_ALPHA8 :: 0x8C43;
	COMPRESSED_SRGB :: 0x8C48;
	COMPRESSED_SRGB_ALPHA :: 0x8C49;
	CURRENT_RASTER_SECONDARY_COLOR :: 0x845F;
	SLUMINANCE_ALPHA :: 0x8C44;
	SLUMINANCE8_ALPHA8 :: 0x8C45;
	SLUMINANCE :: 0x8C46;
	SLUMINANCE8 :: 0x8C47;
	COMPRESSED_SLUMINANCE :: 0x8C4A;
	COMPRESSED_SLUMINANCE_ALPHA :: 0x8C4B;
	
	// VERSION_3_0
	COMPARE_REF_TO_TEXTURE :: 0x884E;
	CLIP_DISTANCE0 :: 0x3000;
	CLIP_DISTANCE1 :: 0x3001;
	CLIP_DISTANCE2 :: 0x3002;
	CLIP_DISTANCE3 :: 0x3003;
	CLIP_DISTANCE4 :: 0x3004;
	CLIP_DISTANCE5 :: 0x3005;
	CLIP_DISTANCE6 :: 0x3006;
	CLIP_DISTANCE7 :: 0x3007;
	MAX_CLIP_DISTANCES :: 0x0D32;
	MAJOR_VERSION :: 0x821B;
	MINOR_VERSION :: 0x821C;
	NUM_EXTENSIONS :: 0x821D;
	CONTEXT_FLAGS :: 0x821E;
	COMPRESSED_RED :: 0x8225;
	COMPRESSED_RG :: 0x8226;
	CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT :: 0x00000001;
	RGBA32F :: 0x8814;
	RGB32F :: 0x8815;
	RGBA16F :: 0x881A;
	RGB16F :: 0x881B;
	VERTEX_ATTRIB_ARRAY_INTEGER :: 0x88FD;
	MAX_ARRAY_TEXTURE_LAYERS :: 0x88FF;
	MIN_PROGRAM_TEXEL_OFFSET :: 0x8904;
	MAX_PROGRAM_TEXEL_OFFSET :: 0x8905;
	CLAMP_READ_COLOR :: 0x891C;
	FIXED_ONLY :: 0x891D;
	MAX_VARYING_COMPONENTS :: 0x8B4B;
	TEXTURE_1D_ARRAY :: 0x8C18;
	PROXY_TEXTURE_1D_ARRAY :: 0x8C19;
	TEXTURE_2D_ARRAY :: 0x8C1A;
	PROXY_TEXTURE_2D_ARRAY :: 0x8C1B;
	TEXTURE_BINDING_1D_ARRAY :: 0x8C1C;
	TEXTURE_BINDING_2D_ARRAY :: 0x8C1D;
	R11F_G11F_B10F :: 0x8C3A;
	UNSIGNED_INT_10F_11F_11F_REV :: 0x8C3B;
	RGB9_E5 :: 0x8C3D;
	UNSIGNED_INT_5_9_9_9_REV :: 0x8C3E;
	TEXTURE_SHARED_SIZE :: 0x8C3F;
	TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH :: 0x8C76;
	TRANSFORM_FEEDBACK_BUFFER_MODE :: 0x8C7F;
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :: 0x8C80;
	TRANSFORM_FEEDBACK_VARYINGS :: 0x8C83;
	TRANSFORM_FEEDBACK_BUFFER_START :: 0x8C84;
	TRANSFORM_FEEDBACK_BUFFER_SIZE :: 0x8C85;
	PRIMITIVES_GENERATED :: 0x8C87;
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN :: 0x8C88;
	RASTERIZER_DISCARD :: 0x8C89;
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :: 0x8C8A;
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :: 0x8C8B;
	INTERLEAVED_ATTRIBS :: 0x8C8C;
	SEPARATE_ATTRIBS :: 0x8C8D;
	TRANSFORM_FEEDBACK_BUFFER :: 0x8C8E;
	TRANSFORM_FEEDBACK_BUFFER_BINDING :: 0x8C8F;
	RGBA32UI :: 0x8D70;
	RGB32UI :: 0x8D71;
	RGBA16UI :: 0x8D76;
	RGB16UI :: 0x8D77;
	RGBA8UI :: 0x8D7C;
	RGB8UI :: 0x8D7D;
	RGBA32I :: 0x8D82;
	RGB32I :: 0x8D83;
	RGBA16I :: 0x8D88;
	RGB16I :: 0x8D89;
	RGBA8I :: 0x8D8E;
	RGB8I :: 0x8D8F;
	RED_INTEGER :: 0x8D94;
	GREEN_INTEGER :: 0x8D95;
	BLUE_INTEGER :: 0x8D96;
	RGB_INTEGER :: 0x8D98;
	RGBA_INTEGER :: 0x8D99;
	BGR_INTEGER :: 0x8D9A;
	BGRA_INTEGER :: 0x8D9B;
	SAMPLER_1D_ARRAY :: 0x8DC0;
	SAMPLER_2D_ARRAY :: 0x8DC1;
	SAMPLER_1D_ARRAY_SHADOW :: 0x8DC3;
	SAMPLER_2D_ARRAY_SHADOW :: 0x8DC4;
	SAMPLER_CUBE_SHADOW :: 0x8DC5;
	UNSIGNED_INT_VEC2 :: 0x8DC6;
	UNSIGNED_INT_VEC3 :: 0x8DC7;
	UNSIGNED_INT_VEC4 :: 0x8DC8;
	INT_SAMPLER_1D :: 0x8DC9;
	INT_SAMPLER_2D :: 0x8DCA;
	INT_SAMPLER_3D :: 0x8DCB;
	INT_SAMPLER_CUBE :: 0x8DCC;
	INT_SAMPLER_1D_ARRAY :: 0x8DCE;
	INT_SAMPLER_2D_ARRAY :: 0x8DCF;
	UNSIGNED_INT_SAMPLER_1D :: 0x8DD1;
	UNSIGNED_INT_SAMPLER_2D :: 0x8DD2;
	UNSIGNED_INT_SAMPLER_3D :: 0x8DD3;
	UNSIGNED_INT_SAMPLER_CUBE :: 0x8DD4;
	UNSIGNED_INT_SAMPLER_1D_ARRAY :: 0x8DD6;
	UNSIGNED_INT_SAMPLER_2D_ARRAY :: 0x8DD7;
	QUERY_WAIT :: 0x8E13;
	QUERY_NO_WAIT :: 0x8E14;
	QUERY_BY_REGION_WAIT :: 0x8E15;
	QUERY_BY_REGION_NO_WAIT :: 0x8E16;
	BUFFER_ACCESS_FLAGS :: 0x911F;
	BUFFER_MAP_LENGTH :: 0x9120;
	BUFFER_MAP_OFFSET :: 0x9121;
	DEPTH_COMPONENT32F :: 0x8CAC;
	DEPTH32F_STENCIL8 :: 0x8CAD;
	FLOAT_32_UNSIGNED_INT_24_8_REV :: 0x8DAD;
	INVALID_FRAMEBUFFER_OPERATION :: 0x0506;
	FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING :: 0x8210;
	FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE :: 0x8211;
	FRAMEBUFFER_ATTACHMENT_RED_SIZE :: 0x8212;
	FRAMEBUFFER_ATTACHMENT_GREEN_SIZE :: 0x8213;
	FRAMEBUFFER_ATTACHMENT_BLUE_SIZE :: 0x8214;
	FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE :: 0x8215;
	FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE :: 0x8216;
	FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE :: 0x8217;
	FRAMEBUFFER_DEFAULT :: 0x8218;
	FRAMEBUFFER_UNDEFINED :: 0x8219;
	DEPTH_STENCIL_ATTACHMENT :: 0x821A;
	MAX_RENDERBUFFER_SIZE :: 0x84E8;
	DEPTH_STENCIL :: 0x84F9;
	UNSIGNED_INT_24_8 :: 0x84FA;
	DEPTH24_STENCIL8 :: 0x88F0;
	TEXTURE_STENCIL_SIZE :: 0x88F1;
	TEXTURE_RED_TYPE :: 0x8C10;
	TEXTURE_GREEN_TYPE :: 0x8C11;
	TEXTURE_BLUE_TYPE :: 0x8C12;
	TEXTURE_ALPHA_TYPE :: 0x8C13;
	TEXTURE_DEPTH_TYPE :: 0x8C16;
	UNSIGNED_NORMALIZED :: 0x8C17;
	FRAMEBUFFER_BINDING :: 0x8CA6;
	DRAW_FRAMEBUFFER_BINDING :: 0x8CA6;
	RENDERBUFFER_BINDING :: 0x8CA7;
	READ_FRAMEBUFFER :: 0x8CA8;
	DRAW_FRAMEBUFFER :: 0x8CA9;
	READ_FRAMEBUFFER_BINDING :: 0x8CAA;
	RENDERBUFFER_SAMPLES :: 0x8CAB;
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :: 0x8CD0;
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :: 0x8CD1;
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :: 0x8CD2;
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :: 0x8CD3;
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :: 0x8CD4;
	FRAMEBUFFER_COMPLETE :: 0x8CD5;
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT :: 0x8CD6;
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :: 0x8CD7;
	FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER :: 0x8CDB;
	FRAMEBUFFER_INCOMPLETE_READ_BUFFER :: 0x8CDC;
	FRAMEBUFFER_UNSUPPORTED :: 0x8CDD;
	MAX_COLOR_ATTACHMENTS :: 0x8CDF;
	COLOR_ATTACHMENT0 :: 0x8CE0;
	COLOR_ATTACHMENT1 :: 0x8CE1;
	COLOR_ATTACHMENT2 :: 0x8CE2;
	COLOR_ATTACHMENT3 :: 0x8CE3;
	COLOR_ATTACHMENT4 :: 0x8CE4;
	COLOR_ATTACHMENT5 :: 0x8CE5;
	COLOR_ATTACHMENT6 :: 0x8CE6;
	COLOR_ATTACHMENT7 :: 0x8CE7;
	COLOR_ATTACHMENT8 :: 0x8CE8;
	COLOR_ATTACHMENT9 :: 0x8CE9;
	COLOR_ATTACHMENT10 :: 0x8CEA;
	COLOR_ATTACHMENT11 :: 0x8CEB;
	COLOR_ATTACHMENT12 :: 0x8CEC;
	COLOR_ATTACHMENT13 :: 0x8CED;
	COLOR_ATTACHMENT14 :: 0x8CEE;
	COLOR_ATTACHMENT15 :: 0x8CEF;
	COLOR_ATTACHMENT16 :: 0x8CF0;
	COLOR_ATTACHMENT17 :: 0x8CF1;
	COLOR_ATTACHMENT18 :: 0x8CF2;
	COLOR_ATTACHMENT19 :: 0x8CF3;
	COLOR_ATTACHMENT20 :: 0x8CF4;
	COLOR_ATTACHMENT21 :: 0x8CF5;
	COLOR_ATTACHMENT22 :: 0x8CF6;
	COLOR_ATTACHMENT23 :: 0x8CF7;
	COLOR_ATTACHMENT24 :: 0x8CF8;
	COLOR_ATTACHMENT25 :: 0x8CF9;
	COLOR_ATTACHMENT26 :: 0x8CFA;
	COLOR_ATTACHMENT27 :: 0x8CFB;
	COLOR_ATTACHMENT28 :: 0x8CFC;
	COLOR_ATTACHMENT29 :: 0x8CFD;
	COLOR_ATTACHMENT30 :: 0x8CFE;
	COLOR_ATTACHMENT31 :: 0x8CFF;
	DEPTH_ATTACHMENT :: 0x8D00;
	STENCIL_ATTACHMENT :: 0x8D20;
	FRAMEBUFFER :: 0x8D40;
	RENDERBUFFER :: 0x8D41;
	RENDERBUFFER_WIDTH :: 0x8D42;
	RENDERBUFFER_HEIGHT :: 0x8D43;
	RENDERBUFFER_INTERNAL_FORMAT :: 0x8D44;
	STENCIL_INDEX1 :: 0x8D46;
	STENCIL_INDEX4 :: 0x8D47;
	STENCIL_INDEX8 :: 0x8D48;
	STENCIL_INDEX16 :: 0x8D49;
	RENDERBUFFER_RED_SIZE :: 0x8D50;
	RENDERBUFFER_GREEN_SIZE :: 0x8D51;
	RENDERBUFFER_BLUE_SIZE :: 0x8D52;
	RENDERBUFFER_ALPHA_SIZE :: 0x8D53;
	RENDERBUFFER_DEPTH_SIZE :: 0x8D54;
	RENDERBUFFER_STENCIL_SIZE :: 0x8D55;
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE :: 0x8D56;
	MAX_SAMPLES :: 0x8D57;
	INDEX :: 0x8222;
	TEXTURE_LUMINANCE_TYPE :: 0x8C14;
	TEXTURE_INTENSITY_TYPE :: 0x8C15;
	FRAMEBUFFER_SRGB :: 0x8DB9;
	HALF_FLOAT :: 0x140B;
	MAP_READ_BIT :: 0x0001;
	MAP_WRITE_BIT :: 0x0002;
	MAP_INVALIDATE_RANGE_BIT :: 0x0004;
	MAP_INVALIDATE_BUFFER_BIT :: 0x0008;
	MAP_FLUSH_EXPLICIT_BIT :: 0x0010;
	MAP_UNSYNCHRONIZED_BIT :: 0x0020;
	COMPRESSED_RED_RGTC1 :: 0x8DBB;
	COMPRESSED_SIGNED_RED_RGTC1 :: 0x8DBC;
	COMPRESSED_RG_RGTC2 :: 0x8DBD;
	COMPRESSED_SIGNED_RG_RGTC2 :: 0x8DBE;
	RG :: 0x8227;
	RG_INTEGER :: 0x8228;
	R8 :: 0x8229;
	R16 :: 0x822A;
	RG8 :: 0x822B;
	RG16 :: 0x822C;
	R16F :: 0x822D;
	R32F :: 0x822E;
	RG16F :: 0x822F;
	RG32F :: 0x8230;
	R8I :: 0x8231;
	R8UI :: 0x8232;
	R16I :: 0x8233;
	R16UI :: 0x8234;
	R32I :: 0x8235;
	R32UI :: 0x8236;
	RG8I :: 0x8237;
	RG8UI :: 0x8238;
	RG16I :: 0x8239;
	RG16UI :: 0x823A;
	RG32I :: 0x823B;
	RG32UI :: 0x823C;
	VERTEX_ARRAY_BINDING :: 0x85B5;
	CLAMP_VERTEX_COLOR :: 0x891A;
	CLAMP_FRAGMENT_COLOR :: 0x891B;
	ALPHA_INTEGER :: 0x8D97;
	
	// VERSION_3_1
	SAMPLER_2D_RECT :: 0x8B63;
	SAMPLER_2D_RECT_SHADOW :: 0x8B64;
	SAMPLER_BUFFER :: 0x8DC2;
	INT_SAMPLER_2D_RECT :: 0x8DCD;
	INT_SAMPLER_BUFFER :: 0x8DD0;
	UNSIGNED_INT_SAMPLER_2D_RECT :: 0x8DD5;
	UNSIGNED_INT_SAMPLER_BUFFER :: 0x8DD8;
	TEXTURE_BUFFER :: 0x8C2A;
	MAX_TEXTURE_BUFFER_SIZE :: 0x8C2B;
	TEXTURE_BINDING_BUFFER :: 0x8C2C;
	TEXTURE_BUFFER_DATA_STORE_BINDING :: 0x8C2D;
	TEXTURE_RECTANGLE :: 0x84F5;
	TEXTURE_BINDING_RECTANGLE :: 0x84F6;
	PROXY_TEXTURE_RECTANGLE :: 0x84F7;
	MAX_RECTANGLE_TEXTURE_SIZE :: 0x84F8;
	R8_SNORM :: 0x8F94;
	RG8_SNORM :: 0x8F95;
	RGB8_SNORM :: 0x8F96;
	RGBA8_SNORM :: 0x8F97;
	R16_SNORM :: 0x8F98;
	RG16_SNORM :: 0x8F99;
	RGB16_SNORM :: 0x8F9A;
	RGBA16_SNORM :: 0x8F9B;
	SIGNED_NORMALIZED :: 0x8F9C;
	PRIMITIVE_RESTART :: 0x8F9D;
	PRIMITIVE_RESTART_INDEX :: 0x8F9E;
	COPY_READ_BUFFER :: 0x8F36;
	COPY_WRITE_BUFFER :: 0x8F37;
	UNIFORM_BUFFER :: 0x8A11;
	UNIFORM_BUFFER_BINDING :: 0x8A28;
	UNIFORM_BUFFER_START :: 0x8A29;
	UNIFORM_BUFFER_SIZE :: 0x8A2A;
	MAX_VERTEX_UNIFORM_BLOCKS :: 0x8A2B;
	MAX_GEOMETRY_UNIFORM_BLOCKS :: 0x8A2C;
	MAX_FRAGMENT_UNIFORM_BLOCKS :: 0x8A2D;
	MAX_COMBINED_UNIFORM_BLOCKS :: 0x8A2E;
	MAX_UNIFORM_BUFFER_BINDINGS :: 0x8A2F;
	MAX_UNIFORM_BLOCK_SIZE :: 0x8A30;
	MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS :: 0x8A31;
	MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS :: 0x8A32;
	MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :: 0x8A33;
	UNIFORM_BUFFER_OFFSET_ALIGNMENT :: 0x8A34;
	ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH :: 0x8A35;
	ACTIVE_UNIFORM_BLOCKS :: 0x8A36;
	UNIFORM_TYPE :: 0x8A37;
	UNIFORM_SIZE :: 0x8A38;
	UNIFORM_NAME_LENGTH :: 0x8A39;
	UNIFORM_BLOCK_INDEX :: 0x8A3A;
	UNIFORM_OFFSET :: 0x8A3B;
	UNIFORM_ARRAY_STRIDE :: 0x8A3C;
	UNIFORM_MATRIX_STRIDE :: 0x8A3D;
	UNIFORM_IS_ROW_MAJOR :: 0x8A3E;
	UNIFORM_BLOCK_BINDING :: 0x8A3F;
	UNIFORM_BLOCK_DATA_SIZE :: 0x8A40;
	UNIFORM_BLOCK_NAME_LENGTH :: 0x8A41;
	UNIFORM_BLOCK_ACTIVE_UNIFORMS :: 0x8A42;
	UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES :: 0x8A43;
	UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :: 0x8A44;
	UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER :: 0x8A45;
	UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :: 0x8A46;
	INVALID_INDEX :: 0xFFFFFFFF;
	
	// VERSION_3_2
	CONTEXT_CORE_PROFILE_BIT :: 0x00000001;
	CONTEXT_COMPATIBILITY_PROFILE_BIT :: 0x00000002;
	LINES_ADJACENCY :: 0x000A;
	LINE_STRIP_ADJACENCY :: 0x000B;
	TRIANGLES_ADJACENCY :: 0x000C;
	TRIANGLE_STRIP_ADJACENCY :: 0x000D;
	PROGRAM_POINT_SIZE :: 0x8642;
	MAX_GEOMETRY_TEXTURE_IMAGE_UNITS :: 0x8C29;
	FRAMEBUFFER_ATTACHMENT_LAYERED :: 0x8DA7;
	FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS :: 0x8DA8;
	GEOMETRY_SHADER :: 0x8DD9;
	GEOMETRY_VERTICES_OUT :: 0x8916;
	GEOMETRY_INPUT_TYPE :: 0x8917;
	GEOMETRY_OUTPUT_TYPE :: 0x8918;
	MAX_GEOMETRY_UNIFORM_COMPONENTS :: 0x8DDF;
	MAX_GEOMETRY_OUTPUT_VERTICES :: 0x8DE0;
	MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS :: 0x8DE1;
	MAX_VERTEX_OUTPUT_COMPONENTS :: 0x9122;
	MAX_GEOMETRY_INPUT_COMPONENTS :: 0x9123;
	MAX_GEOMETRY_OUTPUT_COMPONENTS :: 0x9124;
	MAX_FRAGMENT_INPUT_COMPONENTS :: 0x9125;
	CONTEXT_PROFILE_MASK :: 0x9126;
	DEPTH_CLAMP :: 0x864F;
	QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION :: 0x8E4C;
	FIRST_VERTEX_CONVENTION :: 0x8E4D;
	LAST_VERTEX_CONVENTION :: 0x8E4E;
	PROVOKING_VERTEX :: 0x8E4F;
	TEXTURE_CUBE_MAP_SEAMLESS :: 0x884F;
	MAX_SERVER_WAIT_TIMEOUT :: 0x9111;
	OBJECT_TYPE :: 0x9112;
	SYNC_CONDITION :: 0x9113;
	SYNC_STATUS :: 0x9114;
	SYNC_FLAGS :: 0x9115;
	SYNC_FENCE :: 0x9116;
	SYNC_GPU_COMMANDS_COMPLETE :: 0x9117;
	UNSIGNALED :: 0x9118;
	SIGNALED :: 0x9119;
	ALREADY_SIGNALED :: 0x911A;
	TIMEOUT_EXPIRED :: 0x911B;
	CONDITION_SATISFIED :: 0x911C;
	WAIT_FAILED :: 0x911D;
	TIMEOUT_IGNORED :: 0xFFFFFFFFFFFFFFFF;
	SYNC_FLUSH_COMMANDS_BIT :: 0x00000001;
	SAMPLE_POSITION :: 0x8E50;
	SAMPLE_MASK :: 0x8E51;
	SAMPLE_MASK_VALUE :: 0x8E52;
	MAX_SAMPLE_MASK_WORDS :: 0x8E59;
	TEXTURE_2D_MULTISAMPLE :: 0x9100;
	PROXY_TEXTURE_2D_MULTISAMPLE :: 0x9101;
	TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9102;
	PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9103;
	TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104;
	TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105;
	TEXTURE_SAMPLES :: 0x9106;
	TEXTURE_FIXED_SAMPLE_LOCATIONS :: 0x9107;
	SAMPLER_2D_MULTISAMPLE :: 0x9108;
	INT_SAMPLER_2D_MULTISAMPLE :: 0x9109;
	UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE :: 0x910A;
	SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910B;
	INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910C;
	UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910D;
	MAX_COLOR_TEXTURE_SAMPLES :: 0x910E;
	MAX_DEPTH_TEXTURE_SAMPLES :: 0x910F;
	MAX_INTEGER_SAMPLES :: 0x9110;
	
	// VERSION_3_3
	VERTEX_ATTRIB_ARRAY_DIVISOR :: 0x88FE;
	SRC1_COLOR :: 0x88F9;
	ONE_MINUS_SRC1_COLOR :: 0x88FA;
	ONE_MINUS_SRC1_ALPHA :: 0x88FB;
	MAX_DUAL_SOURCE_DRAW_BUFFERS :: 0x88FC;
	ANY_SAMPLES_PASSED :: 0x8C2F;
	SAMPLER_BINDING :: 0x8919;
	RGB10_A2UI :: 0x906F;
	TEXTURE_SWIZZLE_R :: 0x8E42;
	TEXTURE_SWIZZLE_G :: 0x8E43;
	TEXTURE_SWIZZLE_B :: 0x8E44;
	TEXTURE_SWIZZLE_A :: 0x8E45;
	TEXTURE_SWIZZLE_RGBA :: 0x8E46;
	TIME_ELAPSED :: 0x88BF;
	TIMESTAMP :: 0x8E28;
	INT_2_10_10_10_REV :: 0x8D9F;
	
	// VERSION_4_0
	SAMPLE_SHADING :: 0x8C36;
	MIN_SAMPLE_SHADING_VALUE :: 0x8C37;
	MIN_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5E;
	MAX_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5F;
	TEXTURE_CUBE_MAP_ARRAY :: 0x9009;
	TEXTURE_BINDING_CUBE_MAP_ARRAY :: 0x900A;
	PROXY_TEXTURE_CUBE_MAP_ARRAY :: 0x900B;
	SAMPLER_CUBE_MAP_ARRAY :: 0x900C;
	SAMPLER_CUBE_MAP_ARRAY_SHADOW :: 0x900D;
	INT_SAMPLER_CUBE_MAP_ARRAY :: 0x900E;
	UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY :: 0x900F;
	DRAW_INDIRECT_BUFFER :: 0x8F3F;
	DRAW_INDIRECT_BUFFER_BINDING :: 0x8F43;
	GEOMETRY_SHADER_INVOCATIONS :: 0x887F;
	MAX_GEOMETRY_SHADER_INVOCATIONS :: 0x8E5A;
	MIN_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5B;
	MAX_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5C;
	FRAGMENT_INTERPOLATION_OFFSET_BITS :: 0x8E5D;
	MAX_VERTEX_STREAMS :: 0x8E71;
	DOUBLE_VEC2 :: 0x8FFC;
	DOUBLE_VEC3 :: 0x8FFD;
	DOUBLE_VEC4 :: 0x8FFE;
	DOUBLE_MAT2 :: 0x8F46;
	DOUBLE_MAT3 :: 0x8F47;
	DOUBLE_MAT4 :: 0x8F48;
	DOUBLE_MAT2x3 :: 0x8F49;
	DOUBLE_MAT2x4 :: 0x8F4A;
	DOUBLE_MAT3x2 :: 0x8F4B;
	DOUBLE_MAT3x4 :: 0x8F4C;
	DOUBLE_MAT4x2 :: 0x8F4D;
	DOUBLE_MAT4x3 :: 0x8F4E;
	ACTIVE_SUBROUTINES :: 0x8DE5;
	ACTIVE_SUBROUTINE_UNIFORMS :: 0x8DE6;
	ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8E47;
	ACTIVE_SUBROUTINE_MAX_LENGTH :: 0x8E48;
	ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH :: 0x8E49;
	MAX_SUBROUTINES :: 0x8DE7;
	MAX_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8DE8;
	NUM_COMPATIBLE_SUBROUTINES :: 0x8E4A;
	COMPATIBLE_SUBROUTINES :: 0x8E4B;
	PATCHES :: 0x000E;
	PATCH_VERTICES :: 0x8E72;
	PATCH_DEFAULT_INNER_LEVEL :: 0x8E73;
	PATCH_DEFAULT_OUTER_LEVEL :: 0x8E74;
	TESS_CONTROL_OUTPUT_VERTICES :: 0x8E75;
	TESS_GEN_MODE :: 0x8E76;
	TESS_GEN_SPACING :: 0x8E77;
	TESS_GEN_VERTEX_ORDER :: 0x8E78;
	TESS_GEN_POINT_MODE :: 0x8E79;
	ISOLINES :: 0x8E7A;
	// QUADS :: 0x0007;
	FRACTIONAL_ODD :: 0x8E7B;
	FRACTIONAL_EVEN :: 0x8E7C;
	MAX_PATCH_VERTICES :: 0x8E7D;
	MAX_TESS_GEN_LEVEL :: 0x8E7E;
	MAX_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E7F;
	MAX_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E80;
	MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS :: 0x8E81;
	MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS :: 0x8E82;
	MAX_TESS_CONTROL_OUTPUT_COMPONENTS :: 0x8E83;
	MAX_TESS_PATCH_COMPONENTS :: 0x8E84;
	MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS :: 0x8E85;
	MAX_TESS_EVALUATION_OUTPUT_COMPONENTS :: 0x8E86;
	MAX_TESS_CONTROL_UNIFORM_BLOCKS :: 0x8E89;
	MAX_TESS_EVALUATION_UNIFORM_BLOCKS :: 0x8E8A;
	MAX_TESS_CONTROL_INPUT_COMPONENTS :: 0x886C;
	MAX_TESS_EVALUATION_INPUT_COMPONENTS :: 0x886D;
	MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E1E;
	MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E1F;
	UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x84F0;
	UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x84F1;
	TESS_EVALUATION_SHADER :: 0x8E87;
	TESS_CONTROL_SHADER :: 0x8E88;
	TRANSFORM_FEEDBACK :: 0x8E22;
	TRANSFORM_FEEDBACK_BUFFER_PAUSED :: 0x8E23;
	TRANSFORM_FEEDBACK_BUFFER_ACTIVE :: 0x8E24;
	TRANSFORM_FEEDBACK_BINDING :: 0x8E25;
	MAX_TRANSFORM_FEEDBACK_BUFFERS :: 0x8E70;
	// MAX_VERTEX_STREAMS :: 0x8E71;
	
	// VERSION_4_1
	FIXED :: 0x140C;
	IMPLEMENTATION_COLOR_READ_TYPE :: 0x8B9A;
	IMPLEMENTATION_COLOR_READ_FORMAT :: 0x8B9B;
	LOW_FLOAT :: 0x8DF0;
	MEDIUM_FLOAT :: 0x8DF1;
	HIGH_FLOAT :: 0x8DF2;
	LOW_INT :: 0x8DF3;
	MEDIUM_INT :: 0x8DF4;
	HIGH_INT :: 0x8DF5;
	SHADER_COMPILER :: 0x8DFA;
	SHADER_BINARY_FORMATS :: 0x8DF8;
	NUM_SHADER_BINARY_FORMATS :: 0x8DF9;
	MAX_VERTEX_UNIFORM_VECTORS :: 0x8DFB;
	MAX_VARYING_VECTORS :: 0x8DFC;
	MAX_FRAGMENT_UNIFORM_VECTORS :: 0x8DFD;
	RGB565 :: 0x8D62;
	PROGRAM_BINARY_RETRIEVABLE_HINT :: 0x8257;
	PROGRAM_BINARY_LENGTH :: 0x8741;
	NUM_PROGRAM_BINARY_FORMATS :: 0x87FE;
	PROGRAM_BINARY_FORMATS :: 0x87FF;
	VERTEX_SHADER_BIT :: 0x00000001;
	FRAGMENT_SHADER_BIT :: 0x00000002;
	GEOMETRY_SHADER_BIT :: 0x00000004;
	TESS_CONTROL_SHADER_BIT :: 0x00000008;
	TESS_EVALUATION_SHADER_BIT :: 0x00000010;
	ALL_SHADER_BITS :: 0xFFFFFFFF;
	PROGRAM_SEPARABLE :: 0x8258;
	ACTIVE_PROGRAM :: 0x8259;
	PROGRAM_PIPELINE_BINDING :: 0x825A;
	MAX_VIEWPORTS :: 0x825B;
	VIEWPORT_SUBPIXEL_BITS :: 0x825C;
	VIEWPORT_BOUNDS_RANGE :: 0x825D;
	LAYER_PROVOKING_VERTEX :: 0x825E;
	VIEWPORT_INDEX_PROVOKING_VERTEX :: 0x825F;
	UNDEFINED_VERTEX :: 0x8260;
	
	// VERSION_4_2
	COPY_READ_BUFFER_BINDING :: 0x8F36;
	COPY_WRITE_BUFFER_BINDING :: 0x8F37;
	TRANSFORM_FEEDBACK_ACTIVE :: 0x8E24;
	TRANSFORM_FEEDBACK_PAUSED :: 0x8E23;
	UNPACK_COMPRESSED_BLOCK_WIDTH :: 0x9127;
	UNPACK_COMPRESSED_BLOCK_HEIGHT :: 0x9128;
	UNPACK_COMPRESSED_BLOCK_DEPTH :: 0x9129;
	UNPACK_COMPRESSED_BLOCK_SIZE :: 0x912A;
	PACK_COMPRESSED_BLOCK_WIDTH :: 0x912B;
	PACK_COMPRESSED_BLOCK_HEIGHT :: 0x912C;
	PACK_COMPRESSED_BLOCK_DEPTH :: 0x912D;
	PACK_COMPRESSED_BLOCK_SIZE :: 0x912E;
	NUM_SAMPLE_COUNTS :: 0x9380;
	MIN_MAP_BUFFER_ALIGNMENT :: 0x90BC;
	ATOMIC_COUNTER_BUFFER :: 0x92C0;
	ATOMIC_COUNTER_BUFFER_BINDING :: 0x92C1;
	ATOMIC_COUNTER_BUFFER_START :: 0x92C2;
	ATOMIC_COUNTER_BUFFER_SIZE :: 0x92C3;
	ATOMIC_COUNTER_BUFFER_DATA_SIZE :: 0x92C4;
	ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS :: 0x92C5;
	ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES :: 0x92C6;
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER :: 0x92C7;
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x92C8;
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x92C9;
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER :: 0x92CA;
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER :: 0x92CB;
	MAX_VERTEX_ATOMIC_COUNTER_BUFFERS :: 0x92CC;
	MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS :: 0x92CD;
	MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS :: 0x92CE;
	MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS :: 0x92CF;
	MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS :: 0x92D0;
	MAX_COMBINED_ATOMIC_COUNTER_BUFFERS :: 0x92D1;
	MAX_VERTEX_ATOMIC_COUNTERS :: 0x92D2;
	MAX_TESS_CONTROL_ATOMIC_COUNTERS :: 0x92D3;
	MAX_TESS_EVALUATION_ATOMIC_COUNTERS :: 0x92D4;
	MAX_GEOMETRY_ATOMIC_COUNTERS :: 0x92D5;
	MAX_FRAGMENT_ATOMIC_COUNTERS :: 0x92D6;
	MAX_COMBINED_ATOMIC_COUNTERS :: 0x92D7;
	MAX_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92D8;
	MAX_ATOMIC_COUNTER_BUFFER_BINDINGS :: 0x92DC;
	ACTIVE_ATOMIC_COUNTER_BUFFERS :: 0x92D9;
	UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX :: 0x92DA;
	UNSIGNED_INT_ATOMIC_COUNTER :: 0x92DB;
	VERTEX_ATTRIB_ARRAY_BARRIER_BIT :: 0x00000001;
	ELEMENT_ARRAY_BARRIER_BIT :: 0x00000002;
	UNIFORM_BARRIER_BIT :: 0x00000004;
	TEXTURE_FETCH_BARRIER_BIT :: 0x00000008;
	SHADER_IMAGE_ACCESS_BARRIER_BIT :: 0x00000020;
	COMMAND_BARRIER_BIT :: 0x00000040;
	PIXEL_BUFFER_BARRIER_BIT :: 0x00000080;
	TEXTURE_UPDATE_BARRIER_BIT :: 0x00000100;
	BUFFER_UPDATE_BARRIER_BIT :: 0x00000200;
	FRAMEBUFFER_BARRIER_BIT :: 0x00000400;
	TRANSFORM_FEEDBACK_BARRIER_BIT :: 0x00000800;
	ATOMIC_COUNTER_BARRIER_BIT :: 0x00001000;
	ALL_BARRIER_BITS :: 0xFFFFFFFF;
	MAX_IMAGE_UNITS :: 0x8F38;
	MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS :: 0x8F39;
	IMAGE_BINDING_NAME :: 0x8F3A;
	IMAGE_BINDING_LEVEL :: 0x8F3B;
	IMAGE_BINDING_LAYERED :: 0x8F3C;
	IMAGE_BINDING_LAYER :: 0x8F3D;
	IMAGE_BINDING_ACCESS :: 0x8F3E;
	IMAGE_1D :: 0x904C;
	IMAGE_2D :: 0x904D;
	IMAGE_3D :: 0x904E;
	IMAGE_2D_RECT :: 0x904F;
	IMAGE_CUBE :: 0x9050;
	IMAGE_BUFFER :: 0x9051;
	IMAGE_1D_ARRAY :: 0x9052;
	IMAGE_2D_ARRAY :: 0x9053;
	IMAGE_CUBE_MAP_ARRAY :: 0x9054;
	IMAGE_2D_MULTISAMPLE :: 0x9055;
	IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9056;
	INT_IMAGE_1D :: 0x9057;
	INT_IMAGE_2D :: 0x9058;
	INT_IMAGE_3D :: 0x9059;
	INT_IMAGE_2D_RECT :: 0x905A;
	INT_IMAGE_CUBE :: 0x905B;
	INT_IMAGE_BUFFER :: 0x905C;
	INT_IMAGE_1D_ARRAY :: 0x905D;
	INT_IMAGE_2D_ARRAY :: 0x905E;
	INT_IMAGE_CUBE_MAP_ARRAY :: 0x905F;
	INT_IMAGE_2D_MULTISAMPLE :: 0x9060;
	INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9061;
	UNSIGNED_INT_IMAGE_1D :: 0x9062;
	UNSIGNED_INT_IMAGE_2D :: 0x9063;
	UNSIGNED_INT_IMAGE_3D :: 0x9064;
	UNSIGNED_INT_IMAGE_2D_RECT :: 0x9065;
	UNSIGNED_INT_IMAGE_CUBE :: 0x9066;
	UNSIGNED_INT_IMAGE_BUFFER :: 0x9067;
	UNSIGNED_INT_IMAGE_1D_ARRAY :: 0x9068;
	UNSIGNED_INT_IMAGE_2D_ARRAY :: 0x9069;
	UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY :: 0x906A;
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE :: 0x906B;
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x906C;
	MAX_IMAGE_SAMPLES :: 0x906D;
	IMAGE_BINDING_FORMAT :: 0x906E;
	IMAGE_FORMAT_COMPATIBILITY_TYPE :: 0x90C7;
	IMAGE_FORMAT_COMPATIBILITY_BY_SIZE :: 0x90C8;
	IMAGE_FORMAT_COMPATIBILITY_BY_CLASS :: 0x90C9;
	MAX_VERTEX_IMAGE_UNIFORMS :: 0x90CA;
	MAX_TESS_CONTROL_IMAGE_UNIFORMS :: 0x90CB;
	MAX_TESS_EVALUATION_IMAGE_UNIFORMS :: 0x90CC;
	MAX_GEOMETRY_IMAGE_UNIFORMS :: 0x90CD;
	MAX_FRAGMENT_IMAGE_UNIFORMS :: 0x90CE;
	MAX_COMBINED_IMAGE_UNIFORMS :: 0x90CF;
	COMPRESSED_RGBA_BPTC_UNORM :: 0x8E8C;
	COMPRESSED_SRGB_ALPHA_BPTC_UNORM :: 0x8E8D;
	COMPRESSED_RGB_BPTC_SIGNED_FLOAT :: 0x8E8E;
	COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT :: 0x8E8F;
	TEXTURE_IMMUTABLE_FORMAT :: 0x912F;
	
	// VERSION_4_3
	NUM_SHADING_LANGUAGE_VERSIONS :: 0x82E9;
	VERTEX_ATTRIB_ARRAY_LONG :: 0x874E;
	COMPRESSED_RGB8_ETC2 :: 0x9274;
	COMPRESSED_SRGB8_ETC2 :: 0x9275;
	COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9276;
	COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9277;
	COMPRESSED_RGBA8_ETC2_EAC :: 0x9278;
	COMPRESSED_SRGB8_ALPHA8_ETC2_EAC :: 0x9279;
	COMPRESSED_R11_EAC :: 0x9270;
	COMPRESSED_SIGNED_R11_EAC :: 0x9271;
	COMPRESSED_RG11_EAC :: 0x9272;
	COMPRESSED_SIGNED_RG11_EAC :: 0x9273;
	PRIMITIVE_RESTART_FIXED_INDEX :: 0x8D69;
	ANY_SAMPLES_PASSED_CONSERVATIVE :: 0x8D6A;
	MAX_ELEMENT_INDEX :: 0x8D6B;
	COMPUTE_SHADER :: 0x91B9;
	MAX_COMPUTE_UNIFORM_BLOCKS :: 0x91BB;
	MAX_COMPUTE_TEXTURE_IMAGE_UNITS :: 0x91BC;
	MAX_COMPUTE_IMAGE_UNIFORMS :: 0x91BD;
	MAX_COMPUTE_SHARED_MEMORY_SIZE :: 0x8262;
	MAX_COMPUTE_UNIFORM_COMPONENTS :: 0x8263;
	MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS :: 0x8264;
	MAX_COMPUTE_ATOMIC_COUNTERS :: 0x8265;
	MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS :: 0x8266;
	MAX_COMPUTE_WORK_GROUP_INVOCATIONS :: 0x90EB;
	MAX_COMPUTE_WORK_GROUP_COUNT :: 0x91BE;
	MAX_COMPUTE_WORK_GROUP_SIZE :: 0x91BF;
	COMPUTE_WORK_GROUP_SIZE :: 0x8267;
	UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER :: 0x90EC;
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER :: 0x90ED;
	DISPATCH_INDIRECT_BUFFER :: 0x90EE;
	DISPATCH_INDIRECT_BUFFER_BINDING :: 0x90EF;
	COMPUTE_SHADER_BIT :: 0x00000020;
	DEBUG_OUTPUT_SYNCHRONOUS :: 0x8242;
	DEBUG_NEXT_LOGGED_MESSAGE_LENGTH :: 0x8243;
	DEBUG_CALLBACK_FUNCTION :: 0x8244;
	DEBUG_CALLBACK_USER_PARAM :: 0x8245;
	DEBUG_SOURCE_API :: 0x8246;
	DEBUG_SOURCE_WINDOW_SYSTEM :: 0x8247;
	DEBUG_SOURCE_SHADER_COMPILER :: 0x8248;
	DEBUG_SOURCE_THIRD_PARTY :: 0x8249;
	DEBUG_SOURCE_APPLICATION :: 0x824A;
	DEBUG_SOURCE_OTHER :: 0x824B;
	DEBUG_TYPE_ERROR :: 0x824C;
	DEBUG_TYPE_DEPRECATED_BEHAVIOR :: 0x824D;
	DEBUG_TYPE_UNDEFINED_BEHAVIOR :: 0x824E;
	DEBUG_TYPE_PORTABILITY :: 0x824F;
	DEBUG_TYPE_PERFORMANCE :: 0x8250;
	DEBUG_TYPE_OTHER :: 0x8251;
	MAX_DEBUG_MESSAGE_LENGTH :: 0x9143;
	MAX_DEBUG_LOGGED_MESSAGES :: 0x9144;
	DEBUG_LOGGED_MESSAGES :: 0x9145;
	DEBUG_SEVERITY_HIGH :: 0x9146;
	DEBUG_SEVERITY_MEDIUM :: 0x9147;
	DEBUG_SEVERITY_LOW :: 0x9148;
	DEBUG_TYPE_MARKER :: 0x8268;
	DEBUG_TYPE_PUSH_GROUP :: 0x8269;
	DEBUG_TYPE_POP_GROUP :: 0x826A;
	DEBUG_SEVERITY_NOTIFICATION :: 0x826B;
	MAX_DEBUG_GROUP_STACK_DEPTH :: 0x826C;
	DEBUG_GROUP_STACK_DEPTH :: 0x826D;
	BUFFER :: 0x82E0;
	SHADER :: 0x82E1;
	PROGRAM :: 0x82E2;
	// VERTEX_ARRAY :: 0x8074;
	QUERY :: 0x82E3;
	PROGRAM_PIPELINE :: 0x82E4;
	SAMPLER :: 0x82E6;
	MAX_LABEL_LENGTH :: 0x82E8;
	DEBUG_OUTPUT :: 0x92E0;
	CONTEXT_FLAG_DEBUG_BIT :: 0x00000002;
	MAX_UNIFORM_LOCATIONS :: 0x826E;
	FRAMEBUFFER_DEFAULT_WIDTH :: 0x9310;
	FRAMEBUFFER_DEFAULT_HEIGHT :: 0x9311;
	FRAMEBUFFER_DEFAULT_LAYERS :: 0x9312;
	FRAMEBUFFER_DEFAULT_SAMPLES :: 0x9313;
	FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS :: 0x9314;
	MAX_FRAMEBUFFER_WIDTH :: 0x9315;
	MAX_FRAMEBUFFER_HEIGHT :: 0x9316;
	MAX_FRAMEBUFFER_LAYERS :: 0x9317;
	MAX_FRAMEBUFFER_SAMPLES :: 0x9318;
	INTERNALFORMAT_SUPPORTED :: 0x826F;
	INTERNALFORMAT_PREFERRED :: 0x8270;
	INTERNALFORMAT_RED_SIZE :: 0x8271;
	INTERNALFORMAT_GREEN_SIZE :: 0x8272;
	INTERNALFORMAT_BLUE_SIZE :: 0x8273;
	INTERNALFORMAT_ALPHA_SIZE :: 0x8274;
	INTERNALFORMAT_DEPTH_SIZE :: 0x8275;
	INTERNALFORMAT_STENCIL_SIZE :: 0x8276;
	INTERNALFORMAT_SHARED_SIZE :: 0x8277;
	INTERNALFORMAT_RED_TYPE :: 0x8278;
	INTERNALFORMAT_GREEN_TYPE :: 0x8279;
	INTERNALFORMAT_BLUE_TYPE :: 0x827A;
	INTERNALFORMAT_ALPHA_TYPE :: 0x827B;
	INTERNALFORMAT_DEPTH_TYPE :: 0x827C;
	INTERNALFORMAT_STENCIL_TYPE :: 0x827D;
	MAX_WIDTH :: 0x827E;
	MAX_HEIGHT :: 0x827F;
	MAX_DEPTH :: 0x8280;
	MAX_LAYERS :: 0x8281;
	MAX_COMBINED_DIMENSIONS :: 0x8282;
	COLOR_COMPONENTS :: 0x8283;
	DEPTH_COMPONENTS :: 0x8284;
	STENCIL_COMPONENTS :: 0x8285;
	COLOR_RENDERABLE :: 0x8286;
	DEPTH_RENDERABLE :: 0x8287;
	STENCIL_RENDERABLE :: 0x8288;
	FRAMEBUFFER_RENDERABLE :: 0x8289;
	FRAMEBUFFER_RENDERABLE_LAYERED :: 0x828A;
	FRAMEBUFFER_BLEND :: 0x828B;
	READ_PIXELS :: 0x828C;
	READ_PIXELS_FORMAT :: 0x828D;
	READ_PIXELS_TYPE :: 0x828E;
	TEXTURE_IMAGE_FORMAT :: 0x828F;
	TEXTURE_IMAGE_TYPE :: 0x8290;
	GET_TEXTURE_IMAGE_FORMAT :: 0x8291;
	GET_TEXTURE_IMAGE_TYPE :: 0x8292;
	MIPMAP :: 0x8293;
	MANUAL_GENERATE_MIPMAP :: 0x8294;
	AUTO_GENERATE_MIPMAP :: 0x8295;
	COLOR_ENCODING :: 0x8296;
	SRGB_READ :: 0x8297;
	SRGB_WRITE :: 0x8298;
	FILTER :: 0x829A;
	VERTEX_TEXTURE :: 0x829B;
	TESS_CONTROL_TEXTURE :: 0x829C;
	TESS_EVALUATION_TEXTURE :: 0x829D;
	GEOMETRY_TEXTURE :: 0x829E;
	FRAGMENT_TEXTURE :: 0x829F;
	COMPUTE_TEXTURE :: 0x82A0;
	TEXTURE_SHADOW :: 0x82A1;
	TEXTURE_GATHER :: 0x82A2;
	TEXTURE_GATHER_SHADOW :: 0x82A3;
	SHADER_IMAGE_LOAD :: 0x82A4;
	SHADER_IMAGE_STORE :: 0x82A5;
	SHADER_IMAGE_ATOMIC :: 0x82A6;
	IMAGE_TEXEL_SIZE :: 0x82A7;
	IMAGE_COMPATIBILITY_CLASS :: 0x82A8;
	IMAGE_PIXEL_FORMAT :: 0x82A9;
	IMAGE_PIXEL_TYPE :: 0x82AA;
	SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST :: 0x82AC;
	SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST :: 0x82AD;
	SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE :: 0x82AE;
	SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE :: 0x82AF;
	TEXTURE_COMPRESSED_BLOCK_WIDTH :: 0x82B1;
	TEXTURE_COMPRESSED_BLOCK_HEIGHT :: 0x82B2;
	TEXTURE_COMPRESSED_BLOCK_SIZE :: 0x82B3;
	CLEAR_BUFFER :: 0x82B4;
	TEXTURE_VIEW :: 0x82B5;
	VIEW_COMPATIBILITY_CLASS :: 0x82B6;
	FULL_SUPPORT :: 0x82B7;
	CAVEAT_SUPPORT :: 0x82B8;
	IMAGE_CLASS_4_X_32 :: 0x82B9;
	IMAGE_CLASS_2_X_32 :: 0x82BA;
	IMAGE_CLASS_1_X_32 :: 0x82BB;
	IMAGE_CLASS_4_X_16 :: 0x82BC;
	IMAGE_CLASS_2_X_16 :: 0x82BD;
	IMAGE_CLASS_1_X_16 :: 0x82BE;
	IMAGE_CLASS_4_X_8 :: 0x82BF;
	IMAGE_CLASS_2_X_8 :: 0x82C0;
	IMAGE_CLASS_1_X_8 :: 0x82C1;
	IMAGE_CLASS_11_11_10 :: 0x82C2;
	IMAGE_CLASS_10_10_10_2 :: 0x82C3;
	VIEW_CLASS_128_BITS :: 0x82C4;
	VIEW_CLASS_96_BITS :: 0x82C5;
	VIEW_CLASS_64_BITS :: 0x82C6;
	VIEW_CLASS_48_BITS :: 0x82C7;
	VIEW_CLASS_32_BITS :: 0x82C8;
	VIEW_CLASS_24_BITS :: 0x82C9;
	VIEW_CLASS_16_BITS :: 0x82CA;
	VIEW_CLASS_8_BITS :: 0x82CB;
	VIEW_CLASS_S3TC_DXT1_RGB :: 0x82CC;
	VIEW_CLASS_S3TC_DXT1_RGBA :: 0x82CD;
	VIEW_CLASS_S3TC_DXT3_RGBA :: 0x82CE;
	VIEW_CLASS_S3TC_DXT5_RGBA :: 0x82CF;
	VIEW_CLASS_RGTC1_RED :: 0x82D0;
	VIEW_CLASS_RGTC2_RG :: 0x82D1;
	VIEW_CLASS_BPTC_UNORM :: 0x82D2;
	VIEW_CLASS_BPTC_FLOAT :: 0x82D3;
	UNIFORM :: 0x92E1;
	UNIFORM_BLOCK :: 0x92E2;
	PROGRAM_INPUT :: 0x92E3;
	PROGRAM_OUTPUT :: 0x92E4;
	BUFFER_VARIABLE :: 0x92E5;
	SHADER_STORAGE_BLOCK :: 0x92E6;
	VERTEX_SUBROUTINE :: 0x92E8;
	TESS_CONTROL_SUBROUTINE :: 0x92E9;
	TESS_EVALUATION_SUBROUTINE :: 0x92EA;
	GEOMETRY_SUBROUTINE :: 0x92EB;
	FRAGMENT_SUBROUTINE :: 0x92EC;
	COMPUTE_SUBROUTINE :: 0x92ED;
	VERTEX_SUBROUTINE_UNIFORM :: 0x92EE;
	TESS_CONTROL_SUBROUTINE_UNIFORM :: 0x92EF;
	TESS_EVALUATION_SUBROUTINE_UNIFORM :: 0x92F0;
	GEOMETRY_SUBROUTINE_UNIFORM :: 0x92F1;
	FRAGMENT_SUBROUTINE_UNIFORM :: 0x92F2;
	COMPUTE_SUBROUTINE_UNIFORM :: 0x92F3;
	TRANSFORM_FEEDBACK_VARYING :: 0x92F4;
	ACTIVE_RESOURCES :: 0x92F5;
	MAX_NAME_LENGTH :: 0x92F6;
	MAX_NUM_ACTIVE_VARIABLES :: 0x92F7;
	MAX_NUM_COMPATIBLE_SUBROUTINES :: 0x92F8;
	NAME_LENGTH :: 0x92F9;
	TYPE :: 0x92FA;
	ARRAY_SIZE :: 0x92FB;
	OFFSET :: 0x92FC;
	BLOCK_INDEX :: 0x92FD;
	ARRAY_STRIDE :: 0x92FE;
	MATRIX_STRIDE :: 0x92FF;
	IS_ROW_MAJOR :: 0x9300;
	ATOMIC_COUNTER_BUFFER_INDEX :: 0x9301;
	BUFFER_BINDING :: 0x9302;
	BUFFER_DATA_SIZE :: 0x9303;
	NUM_ACTIVE_VARIABLES :: 0x9304;
	ACTIVE_VARIABLES :: 0x9305;
	REFERENCED_BY_VERTEX_SHADER :: 0x9306;
	REFERENCED_BY_TESS_CONTROL_SHADER :: 0x9307;
	REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x9308;
	REFERENCED_BY_GEOMETRY_SHADER :: 0x9309;
	REFERENCED_BY_FRAGMENT_SHADER :: 0x930A;
	REFERENCED_BY_COMPUTE_SHADER :: 0x930B;
	TOP_LEVEL_ARRAY_SIZE :: 0x930C;
	TOP_LEVEL_ARRAY_STRIDE :: 0x930D;
	LOCATION :: 0x930E;
	LOCATION_INDEX :: 0x930F;
	IS_PER_PATCH :: 0x92E7;
	SHADER_STORAGE_BUFFER :: 0x90D2;
	SHADER_STORAGE_BUFFER_BINDING :: 0x90D3;
	SHADER_STORAGE_BUFFER_START :: 0x90D4;
	SHADER_STORAGE_BUFFER_SIZE :: 0x90D5;
	MAX_VERTEX_SHADER_STORAGE_BLOCKS :: 0x90D6;
	MAX_GEOMETRY_SHADER_STORAGE_BLOCKS :: 0x90D7;
	MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS :: 0x90D8;
	MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS :: 0x90D9;
	MAX_FRAGMENT_SHADER_STORAGE_BLOCKS :: 0x90DA;
	MAX_COMPUTE_SHADER_STORAGE_BLOCKS :: 0x90DB;
	MAX_COMBINED_SHADER_STORAGE_BLOCKS :: 0x90DC;
	MAX_SHADER_STORAGE_BUFFER_BINDINGS :: 0x90DD;
	MAX_SHADER_STORAGE_BLOCK_SIZE :: 0x90DE;
	SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT :: 0x90DF;
	SHADER_STORAGE_BARRIER_BIT :: 0x00002000;
	MAX_COMBINED_SHADER_OUTPUT_RESOURCES :: 0x8F39;
	DEPTH_STENCIL_TEXTURE_MODE :: 0x90EA;
	TEXTURE_BUFFER_OFFSET :: 0x919D;
	TEXTURE_BUFFER_SIZE :: 0x919E;
	TEXTURE_BUFFER_OFFSET_ALIGNMENT :: 0x919F;
	TEXTURE_VIEW_MIN_LEVEL :: 0x82DB;
	TEXTURE_VIEW_NUM_LEVELS :: 0x82DC;
	TEXTURE_VIEW_MIN_LAYER :: 0x82DD;
	TEXTURE_VIEW_NUM_LAYERS :: 0x82DE;
	TEXTURE_IMMUTABLE_LEVELS :: 0x82DF;
	VERTEX_ATTRIB_BINDING :: 0x82D4;
	VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D5;
	VERTEX_BINDING_DIVISOR :: 0x82D6;
	VERTEX_BINDING_OFFSET :: 0x82D7;
	VERTEX_BINDING_STRIDE :: 0x82D8;
	MAX_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D9;
	MAX_VERTEX_ATTRIB_BINDINGS :: 0x82DA;
	VERTEX_BINDING_BUFFER :: 0x8F4F;
	DISPLAY_LIST :: 0x82E7;
	// STACK_UNDERFLOW :: 0x0504;
	// STACK_OVERFLOW :: 0x0503;
	
	// VERSION_4_4
	MAX_VERTEX_ATTRIB_STRIDE :: 0x82E5;
	PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED :: 0x8221;
	TEXTURE_BUFFER_BINDING :: 0x8C2A;
	// MAP_READ_BIT :: 0x0001;
	// MAP_WRITE_BIT :: 0x0002;
	MAP_PERSISTENT_BIT :: 0x0040;
	MAP_COHERENT_BIT :: 0x0080;
	DYNAMIC_STORAGE_BIT :: 0x0100;
	CLIENT_STORAGE_BIT :: 0x0200;
	CLIENT_MAPPED_BUFFER_BARRIER_BIT :: 0x00004000;
	BUFFER_IMMUTABLE_STORAGE :: 0x821F;
	BUFFER_STORAGE_FLAGS :: 0x8220;
	CLEAR_TEXTURE :: 0x9365;
	LOCATION_COMPONENT :: 0x934A;
	// TRANSFORM_FEEDBACK_BUFFER :: 0x8C8E;
	TRANSFORM_FEEDBACK_BUFFER_INDEX :: 0x934B;
	TRANSFORM_FEEDBACK_BUFFER_STRIDE :: 0x934C;
	QUERY_BUFFER :: 0x9192;
	QUERY_BUFFER_BARRIER_BIT :: 0x00008000;
	QUERY_BUFFER_BINDING :: 0x9193;
	QUERY_RESULT_NO_WAIT :: 0x9194;
	MIRROR_CLAMP_TO_EDGE :: 0x8743;
	// STENCIL_INDEX :: 0x1901;
	// STENCIL_INDEX8 :: 0x8D48;
	// UNSIGNED_INT_10F_11F_11F_REV :: 0x8C3B;
	
	// VERSION_4_5
	CONTEXT_LOST :: 0x0507;
	// LOWER_LEFT :: 0x8CA1;
	// UPPER_LEFT :: 0x8CA2;
	NEGATIVE_ONE_TO_ONE :: 0x935E;
	ZERO_TO_ONE :: 0x935F;
	CLIP_ORIGIN :: 0x935C;
	CLIP_DEPTH_MODE :: 0x935D;
	QUERY_WAIT_INVERTED :: 0x8E17;
	QUERY_NO_WAIT_INVERTED :: 0x8E18;
	QUERY_BY_REGION_WAIT_INVERTED :: 0x8E19;
	QUERY_BY_REGION_NO_WAIT_INVERTED :: 0x8E1A;
	MAX_CULL_DISTANCES :: 0x82F9;
	MAX_COMBINED_CLIP_AND_CULL_DISTANCES :: 0x82FA;
	TEXTURE_TARGET :: 0x1006;
	QUERY_TARGET :: 0x82EA;
	// TEXTURE_BINDING_1D :: 0x8068;
	// TEXTURE_BINDING_1D_ARRAY :: 0x8C1C;
	// TEXTURE_BINDING_2D :: 0x8069;
	// TEXTURE_BINDING_2D_ARRAY :: 0x8C1D;
	// TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104;
	// TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105;
	// TEXTURE_BINDING_3D :: 0x806A;
	// TEXTURE_BINDING_BUFFER :: 0x8C2C;
	// TEXTURE_BINDING_CUBE_MAP :: 0x8514;
	// TEXTURE_BINDING_CUBE_MAP_ARRAY :: 0x900A;
	// TEXTURE_BINDING_RECTANGLE :: 0x84F6;
	// BACK :: 0x0405;
	// NO_ERROR :: 0;
	GUILTY_CONTEXT_RESET :: 0x8253;
	INNOCENT_CONTEXT_RESET :: 0x8254;
	UNKNOWN_CONTEXT_RESET :: 0x8255;
	RESET_NOTIFICATION_STRATEGY :: 0x8256;
	LOSE_CONTEXT_ON_RESET :: 0x8252;
	NO_RESET_NOTIFICATION :: 0x8261;
	CONTEXT_FLAG_ROBUST_ACCESS_BIT :: 0x00000004;
	// CONTEXT_LOST :: 0x0507;
	CONTEXT_RELEASE_BEHAVIOR :: 0x82FB;
	// NONE :: 0;
	CONTEXT_RELEASE_BEHAVIOR_FLUSH :: 0x82FC;
	
	// VERSION_4_6
	// CONTEXT_RELEASE_BEHAVIOR :: 0x82FB;
	// NONE :: 0;
	// CONTEXT_RELEASE_BEHAVIOR_FLUSH :: 0x82FC;
	SHADER_BINARY_FORMAT_SPIR_V :: 0x9551;
	SPIR_V_BINARY :: 0x9552;
	PARAMETER_BUFFER :: 0x80EE;
	PARAMETER_BUFFER_BINDING :: 0x80EF;
	CONTEXT_FLAG_NO_ERROR_BIT :: 0x00000008;
	VERTICES_SUBMITTED :: 0x82EE;
	PRIMITIVES_SUBMITTED :: 0x82EF;
	VERTEX_SHADER_INVOCATIONS :: 0x82F0;
	TESS_CONTROL_SHADER_PATCHES :: 0x82F1;
	TESS_EVALUATION_SHADER_INVOCATIONS :: 0x82F2;
	// GEOMETRY_SHADER_INVOCATIONS :: 0x887F;
	GEOMETRY_SHADER_PRIMITIVES_EMITTED :: 0x82F3;
	FRAGMENT_SHADER_INVOCATIONS :: 0x82F4;
	COMPUTE_SHADER_INVOCATIONS :: 0x82F5;
	CLIPPING_INPUT_PRIMITIVES :: 0x82F6;
	CLIPPING_OUTPUT_PRIMITIVES :: 0x82F7;
	POLYGON_OFFSET_CLAMP :: 0x8E1B;
	SPIR_V_EXTENSIONS :: 0x9553;
	NUM_SPIR_V_EXTENSIONS :: 0x9554;
	TEXTURE_MAX_ANISOTROPY :: 0x84FE;
	MAX_TEXTURE_MAX_ANISOTROPY :: 0x84FF;
	TRANSFORM_FEEDBACK_OVERFLOW :: 0x82EC;
	TRANSFORM_FEEDBACK_STREAM_OVERFLOW :: 0x82ED;
	
	// Core functions:
	
	// VERSION_1_0
#if OS == .WINDOWS || OS == .MACOS || OS == .LINUX
{
	CullFace :: (mode: GLenum) #foreign gl_lib "glCullFace";
	FrontFace :: (mode: GLenum) #foreign gl_lib "glFrontFace";
	Hint :: (target: GLenum, mode: GLenum) #foreign gl_lib "glHint";
	LineWidth :: (width: GLfloat) #foreign gl_lib "glLineWidth";
	PointSize :: (size: GLfloat) #foreign gl_lib "glPointSize";
	PolygonMode :: (face: GLenum, mode: GLenum) #foreign gl_lib "glPolygonMode";
	Scissor :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign gl_lib "glScissor";
	TexParameterf :: (target: GLenum, pname: GLenum, param: GLfloat) #foreign gl_lib "glTexParameterf";
	TexParameterfv :: (target: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib "glTexParameterfv";
	TexParameteri :: (target: GLenum, pname: GLenum, param: GLint) #foreign gl_lib "glTexParameteri";
	TexParameteriv :: (target: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib "glTexParameteriv";
	TexImage1D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib "glTexImage1D";
	TexImage2D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib "glTexImage2D";
	DrawBuffer :: (buf: GLenum) #foreign gl_lib "glDrawBuffer";
	Clear :: (mask: GLbitfield) #foreign gl_lib "glClear";
	ClearColor :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign gl_lib "glClearColor";
	ClearStencil :: (s: GLint) #foreign gl_lib "glClearStencil";
	ClearDepth :: (depth: GLdouble) #foreign gl_lib "glClearDepth";
	StencilMask :: (mask: GLuint) #foreign gl_lib "glStencilMask";
	ColorMask :: (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) #foreign gl_lib "glColorMask";
	DepthMask :: (flag: GLboolean) #foreign gl_lib "glDepthMask";
	Disable :: (cap: GLenum) #foreign gl_lib "glDisable";
	Enable :: (cap: GLenum) #foreign gl_lib "glEnable";
	Finish :: () #foreign gl_lib "glFinish";
	Flush :: () #foreign gl_lib "glFlush";
	BlendFunc :: (sfactor: GLenum, dfactor: GLenum) #foreign gl_lib "glBlendFunc";
	LogicOp :: (opcode: GLenum) #foreign gl_lib "glLogicOp";
	StencilFunc :: (func: GLenum, ref: GLint, mask: GLuint) #foreign gl_lib "glStencilFunc";
	StencilOp :: (fail: GLenum, zfail: GLenum, zpass: GLenum) #foreign gl_lib "glStencilOp";
	DepthFunc :: (func: GLenum) #foreign gl_lib "glDepthFunc";
	PixelStoref :: (pname: GLenum, param: GLfloat) #foreign gl_lib "glPixelStoref";
	PixelStorei :: (pname: GLenum, param: GLint) #foreign gl_lib "glPixelStorei";
	ReadBuffer :: (src: GLenum) #foreign gl_lib "glReadBuffer";
	ReadPixels :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib "glReadPixels";
	GetBooleanv :: (pname: GLenum, data: *GLboolean) #foreign gl_lib "glGetBooleanv";
	GetDoublev :: (pname: GLenum, data: *GLdouble) #foreign gl_lib "glGetDoublev";
	GetError :: () -> GLenum #foreign gl_lib "glGetError";
	GetFloatv :: (pname: GLenum, data: *GLfloat) #foreign gl_lib "glGetFloatv";
	GetIntegerv :: (pname: GLenum, data: *GLint) #foreign gl_lib "glGetIntegerv";
	GetString :: (name: GLenum) -> *GLubyte #foreign gl_lib "glGetString";
	GetTexImage :: (target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib "glGetTexImage";
	GetTexParameterfv :: (target: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib "glGetTexParameterfv";
	GetTexParameteriv :: (target: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib "glGetTexParameteriv";
	GetTexLevelParameterfv :: (target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) #foreign gl_lib "glGetTexLevelParameterfv";
	GetTexLevelParameteriv :: (target: GLenum, level: GLint, pname: GLenum, params: *GLint) #foreign gl_lib "glGetTexLevelParameteriv";
	IsEnabled :: (cap: GLenum) -> GLboolean #foreign gl_lib "glIsEnabled";
	DepthRange :: (near: GLdouble, far: GLdouble) #foreign gl_lib "glDepthRange";
	Viewport :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign gl_lib "glViewport";
	NewList :: (list: GLuint, mode: GLenum) #foreign gl_lib "glNewList";
	EndList :: () #foreign gl_lib "glEndList";
	CallList :: (list: GLuint) #foreign gl_lib "glCallList";
	CallLists :: (n: GLsizei, type: GLenum, lists: *void) #foreign gl_lib "glCallLists";
	DeleteLists :: (list: GLuint, range: GLsizei) #foreign gl_lib "glDeleteLists";
	GenLists :: (range: GLsizei) -> GLuint #foreign gl_lib "glGenLists";
	ListBase :: (base: GLuint) #foreign gl_lib "glListBase";
	Begin :: (mode: GLenum) #foreign gl_lib "glBegin";
	Bitmap :: (width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *GLubyte) #foreign gl_lib "glBitmap";
	Color3b :: (red: GLbyte, green: GLbyte, blue: GLbyte) #foreign gl_lib "glColor3b";
	Color3bv :: (v: *GLbyte) #foreign gl_lib "glColor3bv";
	Color3d :: (red: GLdouble, green: GLdouble, blue: GLdouble) #foreign gl_lib "glColor3d";
	Color3dv :: (v: *GLdouble) #foreign gl_lib "glColor3dv";
	Color3f :: (red: GLfloat, green: GLfloat, blue: GLfloat) #foreign gl_lib "glColor3f";
	Color3fv :: (v: *GLfloat) #foreign gl_lib "glColor3fv";
	Color3i :: (red: GLint, green: GLint, blue: GLint) #foreign gl_lib "glColor3i";
	Color3iv :: (v: *GLint) #foreign gl_lib "glColor3iv";
	Color3s :: (red: GLshort, green: GLshort, blue: GLshort) #foreign gl_lib "glColor3s";
	Color3sv :: (v: *GLshort) #foreign gl_lib "glColor3sv";
	Color3ub :: (red: GLubyte, green: GLubyte, blue: GLubyte) #foreign gl_lib "glColor3ub";
	Color3ubv :: (v: *GLubyte) #foreign gl_lib "glColor3ubv";
	Color3ui :: (red: GLuint, green: GLuint, blue: GLuint) #foreign gl_lib "glColor3ui";
	Color3uiv :: (v: *GLuint) #foreign gl_lib "glColor3uiv";
	Color3us :: (red: GLushort, green: GLushort, blue: GLushort) #foreign gl_lib "glColor3us";
	Color3usv :: (v: *GLushort) #foreign gl_lib "glColor3usv";
	Color4b :: (red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) #foreign gl_lib "glColor4b";
	Color4bv :: (v: *GLbyte) #foreign gl_lib "glColor4bv";
	Color4d :: (red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) #foreign gl_lib "glColor4d";
	Color4dv :: (v: *GLdouble) #foreign gl_lib "glColor4dv";
	Color4f :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign gl_lib "glColor4f";
	Color4fv :: (v: *GLfloat) #foreign gl_lib "glColor4fv";
	Color4i :: (red: GLint, green: GLint, blue: GLint, alpha: GLint) #foreign gl_lib "glColor4i";
	Color4iv :: (v: *GLint) #foreign gl_lib "glColor4iv";
	Color4s :: (red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) #foreign gl_lib "glColor4s";
	Color4sv :: (v: *GLshort) #foreign gl_lib "glColor4sv";
	Color4ub :: (red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) #foreign gl_lib "glColor4ub";
	Color4ubv :: (v: *GLubyte) #foreign gl_lib "glColor4ubv";
	Color4ui :: (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) #foreign gl_lib "glColor4ui";
	Color4uiv :: (v: *GLuint) #foreign gl_lib "glColor4uiv";
	Color4us :: (red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) #foreign gl_lib "glColor4us";
	Color4usv :: (v: *GLushort) #foreign gl_lib "glColor4usv";
	EdgeFlag :: (flag: GLboolean) #foreign gl_lib "glEdgeFlag";
	EdgeFlagv :: (flag: *GLboolean) #foreign gl_lib "glEdgeFlagv";
	End :: () #foreign gl_lib "glEnd";
	Indexd :: (c: GLdouble) #foreign gl_lib "glIndexd";
	Indexdv :: (c: *GLdouble) #foreign gl_lib "glIndexdv";
	Indexf :: (c: GLfloat) #foreign gl_lib "glIndexf";
	Indexfv :: (c: *GLfloat) #foreign gl_lib "glIndexfv";
	Indexi :: (c: GLint) #foreign gl_lib "glIndexi";
	Indexiv :: (c: *GLint) #foreign gl_lib "glIndexiv";
	Indexs :: (c: GLshort) #foreign gl_lib "glIndexs";
	Indexsv :: (c: *GLshort) #foreign gl_lib "glIndexsv";
	Normal3b :: (nx: GLbyte, ny: GLbyte, nz: GLbyte) #foreign gl_lib "glNormal3b";
	Normal3bv :: (v: *GLbyte) #foreign gl_lib "glNormal3bv";
	Normal3d :: (nx: GLdouble, ny: GLdouble, nz: GLdouble) #foreign gl_lib "glNormal3d";
	Normal3dv :: (v: *GLdouble) #foreign gl_lib "glNormal3dv";
	Normal3f :: (nx: GLfloat, ny: GLfloat, nz: GLfloat) #foreign gl_lib "glNormal3f";
	Normal3fv :: (v: *GLfloat) #foreign gl_lib "glNormal3fv";
	Normal3i :: (nx: GLint, ny: GLint, nz: GLint) #foreign gl_lib "glNormal3i";
	Normal3iv :: (v: *GLint) #foreign gl_lib "glNormal3iv";
	Normal3s :: (nx: GLshort, ny: GLshort, nz: GLshort) #foreign gl_lib "glNormal3s";
	Normal3sv :: (v: *GLshort) #foreign gl_lib "glNormal3sv";
	RasterPos2d :: (x: GLdouble, y: GLdouble) #foreign gl_lib "glRasterPos2d";
	RasterPos2dv :: (v: *GLdouble) #foreign gl_lib "glRasterPos2dv";
	RasterPos2f :: (x: GLfloat, y: GLfloat) #foreign gl_lib "glRasterPos2f";
	RasterPos2fv :: (v: *GLfloat) #foreign gl_lib "glRasterPos2fv";
	RasterPos2i :: (x: GLint, y: GLint) #foreign gl_lib "glRasterPos2i";
	RasterPos2iv :: (v: *GLint) #foreign gl_lib "glRasterPos2iv";
	RasterPos2s :: (x: GLshort, y: GLshort) #foreign gl_lib "glRasterPos2s";
	RasterPos2sv :: (v: *GLshort) #foreign gl_lib "glRasterPos2sv";
	RasterPos3d :: (x: GLdouble, y: GLdouble, z: GLdouble) #foreign gl_lib "glRasterPos3d";
	RasterPos3dv :: (v: *GLdouble) #foreign gl_lib "glRasterPos3dv";
	RasterPos3f :: (x: GLfloat, y: GLfloat, z: GLfloat) #foreign gl_lib "glRasterPos3f";
	RasterPos3fv :: (v: *GLfloat) #foreign gl_lib "glRasterPos3fv";
	RasterPos3i :: (x: GLint, y: GLint, z: GLint) #foreign gl_lib "glRasterPos3i";
	RasterPos3iv :: (v: *GLint) #foreign gl_lib "glRasterPos3iv";
	RasterPos3s :: (x: GLshort, y: GLshort, z: GLshort) #foreign gl_lib "glRasterPos3s";
	RasterPos3sv :: (v: *GLshort) #foreign gl_lib "glRasterPos3sv";
	RasterPos4d :: (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign gl_lib "glRasterPos4d";
	RasterPos4dv :: (v: *GLdouble) #foreign gl_lib "glRasterPos4dv";
	RasterPos4f :: (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign gl_lib "glRasterPos4f";
	RasterPos4fv :: (v: *GLfloat) #foreign gl_lib "glRasterPos4fv";
	RasterPos4i :: (x: GLint, y: GLint, z: GLint, w: GLint) #foreign gl_lib "glRasterPos4i";
	RasterPos4iv :: (v: *GLint) #foreign gl_lib "glRasterPos4iv";
	RasterPos4s :: (x: GLshort, y: GLshort, z: GLshort, w: GLshort) #foreign gl_lib "glRasterPos4s";
	RasterPos4sv :: (v: *GLshort) #foreign gl_lib "glRasterPos4sv";
	Rectd :: (x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) #foreign gl_lib "glRectd";
	Rectdv :: (v1: *GLdouble, v2: *GLdouble) #foreign gl_lib "glRectdv";
	Rectf :: (x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) #foreign gl_lib "glRectf";
	Rectfv :: (v1: *GLfloat, v2: *GLfloat) #foreign gl_lib "glRectfv";
	Recti :: (x1: GLint, y1: GLint, x2: GLint, y2: GLint) #foreign gl_lib "glRecti";
	Rectiv :: (v1: *GLint, v2: *GLint) #foreign gl_lib "glRectiv";
	Rects :: (x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) #foreign gl_lib "glRects";
	Rectsv :: (v1: *GLshort, v2: *GLshort) #foreign gl_lib "glRectsv";
	TexCoord1d :: (s: GLdouble) #foreign gl_lib "glTexCoord1d";
	TexCoord1dv :: (v: *GLdouble) #foreign gl_lib "glTexCoord1dv";
	TexCoord1f :: (s: GLfloat) #foreign gl_lib "glTexCoord1f";
	TexCoord1fv :: (v: *GLfloat) #foreign gl_lib "glTexCoord1fv";
	TexCoord1i :: (s: GLint) #foreign gl_lib "glTexCoord1i";
	TexCoord1iv :: (v: *GLint) #foreign gl_lib "glTexCoord1iv";
	TexCoord1s :: (s: GLshort) #foreign gl_lib "glTexCoord1s";
	TexCoord1sv :: (v: *GLshort) #foreign gl_lib "glTexCoord1sv";
	TexCoord2d :: (s: GLdouble, t: GLdouble) #foreign gl_lib "glTexCoord2d";
	TexCoord2dv :: (v: *GLdouble) #foreign gl_lib "glTexCoord2dv";
	TexCoord2f :: (s: GLfloat, t: GLfloat) #foreign gl_lib "glTexCoord2f";
	TexCoord2fv :: (v: *GLfloat) #foreign gl_lib "glTexCoord2fv";
	TexCoord2i :: (s: GLint, t: GLint) #foreign gl_lib "glTexCoord2i";
	TexCoord2iv :: (v: *GLint) #foreign gl_lib "glTexCoord2iv";
	TexCoord2s :: (s: GLshort, t: GLshort) #foreign gl_lib "glTexCoord2s";
	TexCoord2sv :: (v: *GLshort) #foreign gl_lib "glTexCoord2sv";
	TexCoord3d :: (s: GLdouble, t: GLdouble, r: GLdouble) #foreign gl_lib "glTexCoord3d";
	TexCoord3dv :: (v: *GLdouble) #foreign gl_lib "glTexCoord3dv";
	TexCoord3f :: (s: GLfloat, t: GLfloat, r: GLfloat) #foreign gl_lib "glTexCoord3f";
	TexCoord3fv :: (v: *GLfloat) #foreign gl_lib "glTexCoord3fv";
	TexCoord3i :: (s: GLint, t: GLint, r: GLint) #foreign gl_lib "glTexCoord3i";
	TexCoord3iv :: (v: *GLint) #foreign gl_lib "glTexCoord3iv";
	TexCoord3s :: (s: GLshort, t: GLshort, r: GLshort) #foreign gl_lib "glTexCoord3s";
	TexCoord3sv :: (v: *GLshort) #foreign gl_lib "glTexCoord3sv";
	TexCoord4d :: (s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) #foreign gl_lib "glTexCoord4d";
	TexCoord4dv :: (v: *GLdouble) #foreign gl_lib "glTexCoord4dv";
	TexCoord4f :: (s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) #foreign gl_lib "glTexCoord4f";
	TexCoord4fv :: (v: *GLfloat) #foreign gl_lib "glTexCoord4fv";
	TexCoord4i :: (s: GLint, t: GLint, r: GLint, q: GLint) #foreign gl_lib "glTexCoord4i";
	TexCoord4iv :: (v: *GLint) #foreign gl_lib "glTexCoord4iv";
	TexCoord4s :: (s: GLshort, t: GLshort, r: GLshort, q: GLshort) #foreign gl_lib "glTexCoord4s";
	TexCoord4sv :: (v: *GLshort) #foreign gl_lib "glTexCoord4sv";
	Vertex2d :: (x: GLdouble, y: GLdouble) #foreign gl_lib "glVertex2d";
	Vertex2dv :: (v: *GLdouble) #foreign gl_lib "glVertex2dv";
	Vertex2f :: (x: GLfloat, y: GLfloat) #foreign gl_lib "glVertex2f";
	Vertex2fv :: (v: *GLfloat) #foreign gl_lib "glVertex2fv";
	Vertex2i :: (x: GLint, y: GLint) #foreign gl_lib "glVertex2i";
	Vertex2iv :: (v: *GLint) #foreign gl_lib "glVertex2iv";
	Vertex2s :: (x: GLshort, y: GLshort) #foreign gl_lib "glVertex2s";
	Vertex2sv :: (v: *GLshort) #foreign gl_lib "glVertex2sv";
	Vertex3d :: (x: GLdouble, y: GLdouble, z: GLdouble) #foreign gl_lib "glVertex3d";
	Vertex3dv :: (v: *GLdouble) #foreign gl_lib "glVertex3dv";
	Vertex3f :: (x: GLfloat, y: GLfloat, z: GLfloat) #foreign gl_lib "glVertex3f";
	Vertex3fv :: (v: *GLfloat) #foreign gl_lib "glVertex3fv";
	Vertex3i :: (x: GLint, y: GLint, z: GLint) #foreign gl_lib "glVertex3i";
	Vertex3iv :: (v: *GLint) #foreign gl_lib "glVertex3iv";
	Vertex3s :: (x: GLshort, y: GLshort, z: GLshort) #foreign gl_lib "glVertex3s";
	Vertex3sv :: (v: *GLshort) #foreign gl_lib "glVertex3sv";
	Vertex4d :: (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign gl_lib "glVertex4d";
	Vertex4dv :: (v: *GLdouble) #foreign gl_lib "glVertex4dv";
	Vertex4f :: (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign gl_lib "glVertex4f";
	Vertex4fv :: (v: *GLfloat) #foreign gl_lib "glVertex4fv";
	Vertex4i :: (x: GLint, y: GLint, z: GLint, w: GLint) #foreign gl_lib "glVertex4i";
	Vertex4iv :: (v: *GLint) #foreign gl_lib "glVertex4iv";
	Vertex4s :: (x: GLshort, y: GLshort, z: GLshort, w: GLshort) #foreign gl_lib "glVertex4s";
	Vertex4sv :: (v: *GLshort) #foreign gl_lib "glVertex4sv";
	ClipPlane :: (plane: GLenum, equation: *GLdouble) #foreign gl_lib "glClipPlane";
	ColorMaterial :: (face: GLenum, mode: GLenum) #foreign gl_lib "glColorMaterial";
	Fogf :: (pname: GLenum, param: GLfloat) #foreign gl_lib "glFogf";
	Fogfv :: (pname: GLenum, params: *GLfloat) #foreign gl_lib "glFogfv";
	Fogi :: (pname: GLenum, param: GLint) #foreign gl_lib "glFogi";
	Fogiv :: (pname: GLenum, params: *GLint) #foreign gl_lib "glFogiv";
	Lightf :: (light: GLenum, pname: GLenum, param: GLfloat) #foreign gl_lib "glLightf";
	Lightfv :: (light: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib "glLightfv";
	Lighti :: (light: GLenum, pname: GLenum, param: GLint) #foreign gl_lib "glLighti";
	Lightiv :: (light: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib "glLightiv";
	LightModelf :: (pname: GLenum, param: GLfloat) #foreign gl_lib "glLightModelf";
	LightModelfv :: (pname: GLenum, params: *GLfloat) #foreign gl_lib "glLightModelfv";
	LightModeli :: (pname: GLenum, param: GLint) #foreign gl_lib "glLightModeli";
	LightModeliv :: (pname: GLenum, params: *GLint) #foreign gl_lib "glLightModeliv";
	LineStipple :: (factor: GLint, pattern: GLushort) #foreign gl_lib "glLineStipple";
	Materialf :: (face: GLenum, pname: GLenum, param: GLfloat) #foreign gl_lib "glMaterialf";
	Materialfv :: (face: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib "glMaterialfv";
	Materiali :: (face: GLenum, pname: GLenum, param: GLint) #foreign gl_lib "glMateriali";
	Materialiv :: (face: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib "glMaterialiv";
	PolygonStipple :: (mask: *GLubyte) #foreign gl_lib "glPolygonStipple";
	ShadeModel :: (mode: GLenum) #foreign gl_lib "glShadeModel";
	TexEnvf :: (target: GLenum, pname: GLenum, param: GLfloat) #foreign gl_lib "glTexEnvf";
	TexEnvfv :: (target: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib "glTexEnvfv";
	TexEnvi :: (target: GLenum, pname: GLenum, param: GLint) #foreign gl_lib "glTexEnvi";
	TexEnviv :: (target: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib "glTexEnviv";
	TexGend :: (coord: GLenum, pname: GLenum, param: GLdouble) #foreign gl_lib "glTexGend";
	TexGendv :: (coord: GLenum, pname: GLenum, params: *GLdouble) #foreign gl_lib "glTexGendv";
	TexGenf :: (coord: GLenum, pname: GLenum, param: GLfloat) #foreign gl_lib "glTexGenf";
	TexGenfv :: (coord: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib "glTexGenfv";
	TexGeni :: (coord: GLenum, pname: GLenum, param: GLint) #foreign gl_lib "glTexGeni";
	TexGeniv :: (coord: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib "glTexGeniv";
	FeedbackBuffer :: (size: GLsizei, type: GLenum, buffer: *GLfloat) #foreign gl_lib "glFeedbackBuffer";
	SelectBuffer :: (size: GLsizei, buffer: *GLuint) #foreign gl_lib "glSelectBuffer";
	RenderMode :: (mode: GLenum) -> GLint #foreign gl_lib "glRenderMode";
	InitNames :: () #foreign gl_lib "glInitNames";
	LoadName :: (name: GLuint) #foreign gl_lib "glLoadName";
	PassThrough :: (token: GLfloat) #foreign gl_lib "glPassThrough";
	PopName :: () #foreign gl_lib "glPopName";
	PushName :: (name: GLuint) #foreign gl_lib "glPushName";
	ClearAccum :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign gl_lib "glClearAccum";
	ClearIndex :: (c: GLfloat) #foreign gl_lib "glClearIndex";
	IndexMask :: (mask: GLuint) #foreign gl_lib "glIndexMask";
	Accum :: (op: GLenum, value: GLfloat) #foreign gl_lib "glAccum";
	PopAttrib :: () #foreign gl_lib "glPopAttrib";
	PushAttrib :: (mask: GLbitfield) #foreign gl_lib "glPushAttrib";
	Map1d :: (target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) #foreign gl_lib "glMap1d";
	Map1f :: (target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) #foreign gl_lib "glMap1f";
	Map2d :: (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) #foreign gl_lib "glMap2d";
	Map2f :: (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) #foreign gl_lib "glMap2f";
	MapGrid1d :: (un: GLint, u1: GLdouble, u2: GLdouble) #foreign gl_lib "glMapGrid1d";
	MapGrid1f :: (un: GLint, u1: GLfloat, u2: GLfloat) #foreign gl_lib "glMapGrid1f";
	MapGrid2d :: (un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) #foreign gl_lib "glMapGrid2d";
	MapGrid2f :: (un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) #foreign gl_lib "glMapGrid2f";
	EvalCoord1d :: (u: GLdouble) #foreign gl_lib "glEvalCoord1d";
	EvalCoord1dv :: (u: *GLdouble) #foreign gl_lib "glEvalCoord1dv";
	EvalCoord1f :: (u: GLfloat) #foreign gl_lib "glEvalCoord1f";
	EvalCoord1fv :: (u: *GLfloat) #foreign gl_lib "glEvalCoord1fv";
	EvalCoord2d :: (u: GLdouble, v: GLdouble) #foreign gl_lib "glEvalCoord2d";
	EvalCoord2dv :: (u: *GLdouble) #foreign gl_lib "glEvalCoord2dv";
	EvalCoord2f :: (u: GLfloat, v: GLfloat) #foreign gl_lib "glEvalCoord2f";
	EvalCoord2fv :: (u: *GLfloat) #foreign gl_lib "glEvalCoord2fv";
	EvalMesh1 :: (mode: GLenum, i1: GLint, i2: GLint) #foreign gl_lib "glEvalMesh1";
	EvalPoint1 :: (i: GLint) #foreign gl_lib "glEvalPoint1";
	EvalMesh2 :: (mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) #foreign gl_lib "glEvalMesh2";
	EvalPoint2 :: (i: GLint, j: GLint) #foreign gl_lib "glEvalPoint2";
	AlphaFunc :: (func: GLenum, ref: GLfloat) #foreign gl_lib "glAlphaFunc";
	PixelZoom :: (xfactor: GLfloat, yfactor: GLfloat) #foreign gl_lib "glPixelZoom";
	PixelTransferf :: (pname: GLenum, param: GLfloat) #foreign gl_lib "glPixelTransferf";
	PixelTransferi :: (pname: GLenum, param: GLint) #foreign gl_lib "glPixelTransferi";
	PixelMapfv :: (map: GLenum, mapsize: GLsizei, values: *GLfloat) #foreign gl_lib "glPixelMapfv";
	PixelMapuiv :: (map: GLenum, mapsize: GLsizei, values: *GLuint) #foreign gl_lib "glPixelMapuiv";
	PixelMapusv :: (map: GLenum, mapsize: GLsizei, values: *GLushort) #foreign gl_lib "glPixelMapusv";
	CopyPixels :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei, type: GLenum) #foreign gl_lib "glCopyPixels";
	DrawPixels :: (width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib "glDrawPixels";
	GetClipPlane :: (plane: GLenum, equation: *GLdouble) #foreign gl_lib "glGetClipPlane";
	GetLightfv :: (light: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib "glGetLightfv";
	GetLightiv :: (light: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib "glGetLightiv";
	GetMapdv :: (target: GLenum, query: GLenum, v: *GLdouble) #foreign gl_lib "glGetMapdv";
	GetMapfv :: (target: GLenum, query: GLenum, v: *GLfloat) #foreign gl_lib "glGetMapfv";
	GetMapiv :: (target: GLenum, query: GLenum, v: *GLint) #foreign gl_lib "glGetMapiv";
	GetMaterialfv :: (face: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib "glGetMaterialfv";
	GetMaterialiv :: (face: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib "glGetMaterialiv";
	GetPixelMapfv :: (map: GLenum, values: *GLfloat) #foreign gl_lib "glGetPixelMapfv";
	GetPixelMapuiv :: (map: GLenum, values: *GLuint) #foreign gl_lib "glGetPixelMapuiv";
	GetPixelMapusv :: (map: GLenum, values: *GLushort) #foreign gl_lib "glGetPixelMapusv";
	GetPolygonStipple :: (mask: *GLubyte) #foreign gl_lib "glGetPolygonStipple";
	GetTexEnvfv :: (target: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib "glGetTexEnvfv";
	GetTexEnviv :: (target: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib "glGetTexEnviv";
	GetTexGendv :: (coord: GLenum, pname: GLenum, params: *GLdouble) #foreign gl_lib "glGetTexGendv";
	GetTexGenfv :: (coord: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib "glGetTexGenfv";
	GetTexGeniv :: (coord: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib "glGetTexGeniv";
	IsList :: (list: GLuint) -> GLboolean #foreign gl_lib "glIsList";
	Frustum :: (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #foreign gl_lib "glFrustum";
	LoadIdentity :: () #foreign gl_lib "glLoadIdentity";
	LoadMatrixf :: (m: *GLfloat) #foreign gl_lib "glLoadMatrixf";
	LoadMatrixd :: (m: *GLdouble) #foreign gl_lib "glLoadMatrixd";
	MatrixMode :: (mode: GLenum) #foreign gl_lib "glMatrixMode";
	MultMatrixf :: (m: *GLfloat) #foreign gl_lib "glMultMatrixf";
	MultMatrixd :: (m: *GLdouble) #foreign gl_lib "glMultMatrixd";
	Ortho :: (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #foreign gl_lib "glOrtho";
	PopMatrix :: () #foreign gl_lib "glPopMatrix";
	PushMatrix :: () #foreign gl_lib "glPushMatrix";
	Rotated :: (angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) #foreign gl_lib "glRotated";
	Rotatef :: (angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign gl_lib "glRotatef";
	Scaled :: (x: GLdouble, y: GLdouble, z: GLdouble) #foreign gl_lib "glScaled";
	Scalef :: (x: GLfloat, y: GLfloat, z: GLfloat) #foreign gl_lib "glScalef";
	Translated :: (x: GLdouble, y: GLdouble, z: GLdouble) #foreign gl_lib "glTranslated";
	Translatef :: (x: GLfloat, y: GLfloat, z: GLfloat) #foreign gl_lib "glTranslatef";
}
else
{
	CullFace : (mode: GLenum) #foreign;
	FrontFace : (mode: GLenum) #foreign;
	Hint : (target: GLenum, mode: GLenum) #foreign;
	LineWidth : (width: GLfloat) #foreign;
	PointSize : (size: GLfloat) #foreign;
	PolygonMode : (face: GLenum, mode: GLenum) #foreign;
	Scissor : (x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	TexParameterf : (target: GLenum, pname: GLenum, param: GLfloat) #foreign;
	TexParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	TexParameteri : (target: GLenum, pname: GLenum, param: GLint) #foreign;
	TexParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	TexImage1D : (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	TexImage2D : (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	DrawBuffer : (buf: GLenum) #foreign;
	Clear : (mask: GLbitfield) #foreign;
	ClearColor : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign;
	ClearStencil : (s: GLint) #foreign;
	ClearDepth : (depth: GLdouble) #foreign;
	StencilMask : (mask: GLuint) #foreign;
	ColorMask : (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) #foreign;
	DepthMask : (flag: GLboolean) #foreign;
	Disable : (cap: GLenum) #foreign;
	Enable : (cap: GLenum) #foreign;
	Finish : () #foreign;
	Flush : () #foreign;
	BlendFunc : (sfactor: GLenum, dfactor: GLenum) #foreign;
	LogicOp : (opcode: GLenum) #foreign;
	StencilFunc : (func: GLenum, ref: GLint, mask: GLuint) #foreign;
	StencilOp : (fail: GLenum, zfail: GLenum, zpass: GLenum) #foreign;
	DepthFunc : (func: GLenum) #foreign;
	PixelStoref : (pname: GLenum, param: GLfloat) #foreign;
	PixelStorei : (pname: GLenum, param: GLint) #foreign;
	ReadBuffer : (src: GLenum) #foreign;
	ReadPixels : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	GetBooleanv : (pname: GLenum, data: *GLboolean) #foreign;
	GetDoublev : (pname: GLenum, data: *GLdouble) #foreign;
	GetError : () -> GLenum #foreign;
	GetFloatv : (pname: GLenum, data: *GLfloat) #foreign;
	GetIntegerv : (pname: GLenum, data: *GLint) #foreign;
	GetString : (name: GLenum) -> *GLubyte #foreign;
	GetTexImage : (target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	GetTexParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetTexParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetTexLevelParameterfv : (target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) #foreign;
	GetTexLevelParameteriv : (target: GLenum, level: GLint, pname: GLenum, params: *GLint) #foreign;
	IsEnabled : (cap: GLenum) -> GLboolean #foreign;
	DepthRange : (near: GLdouble, far: GLdouble) #foreign;
	Viewport : (x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	NewList : (list: GLuint, mode: GLenum) #foreign;
	EndList : () #foreign;
	CallList : (list: GLuint) #foreign;
	CallLists : (n: GLsizei, type: GLenum, lists: *void) #foreign;
	DeleteLists : (list: GLuint, range: GLsizei) #foreign;
	GenLists : (range: GLsizei) -> GLuint #foreign;
	ListBase : (base: GLuint) #foreign;
	Begin : (mode: GLenum) #foreign;
	Bitmap : (width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *GLubyte) #foreign;
	Color3b : (red: GLbyte, green: GLbyte, blue: GLbyte) #foreign;
	Color3bv : (v: *GLbyte) #foreign;
	Color3d : (red: GLdouble, green: GLdouble, blue: GLdouble) #foreign;
	Color3dv : (v: *GLdouble) #foreign;
	Color3f : (red: GLfloat, green: GLfloat, blue: GLfloat) #foreign;
	Color3fv : (v: *GLfloat) #foreign;
	Color3i : (red: GLint, green: GLint, blue: GLint) #foreign;
	Color3iv : (v: *GLint) #foreign;
	Color3s : (red: GLshort, green: GLshort, blue: GLshort) #foreign;
	Color3sv : (v: *GLshort) #foreign;
	Color3ub : (red: GLubyte, green: GLubyte, blue: GLubyte) #foreign;
	Color3ubv : (v: *GLubyte) #foreign;
	Color3ui : (red: GLuint, green: GLuint, blue: GLuint) #foreign;
	Color3uiv : (v: *GLuint) #foreign;
	Color3us : (red: GLushort, green: GLushort, blue: GLushort) #foreign;
	Color3usv : (v: *GLushort) #foreign;
	Color4b : (red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) #foreign;
	Color4bv : (v: *GLbyte) #foreign;
	Color4d : (red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) #foreign;
	Color4dv : (v: *GLdouble) #foreign;
	Color4f : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign;
	Color4fv : (v: *GLfloat) #foreign;
	Color4i : (red: GLint, green: GLint, blue: GLint, alpha: GLint) #foreign;
	Color4iv : (v: *GLint) #foreign;
	Color4s : (red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) #foreign;
	Color4sv : (v: *GLshort) #foreign;
	Color4ub : (red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) #foreign;
	Color4ubv : (v: *GLubyte) #foreign;
	Color4ui : (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) #foreign;
	Color4uiv : (v: *GLuint) #foreign;
	Color4us : (red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) #foreign;
	Color4usv : (v: *GLushort) #foreign;
	EdgeFlag : (flag: GLboolean) #foreign;
	EdgeFlagv : (flag: *GLboolean) #foreign;
	End : () #foreign;
	Indexd : (c: GLdouble) #foreign;
	Indexdv : (c: *GLdouble) #foreign;
	Indexf : (c: GLfloat) #foreign;
	Indexfv : (c: *GLfloat) #foreign;
	Indexi : (c: GLint) #foreign;
	Indexiv : (c: *GLint) #foreign;
	Indexs : (c: GLshort) #foreign;
	Indexsv : (c: *GLshort) #foreign;
	Normal3b : (nx: GLbyte, ny: GLbyte, nz: GLbyte) #foreign;
	Normal3bv : (v: *GLbyte) #foreign;
	Normal3d : (nx: GLdouble, ny: GLdouble, nz: GLdouble) #foreign;
	Normal3dv : (v: *GLdouble) #foreign;
	Normal3f : (nx: GLfloat, ny: GLfloat, nz: GLfloat) #foreign;
	Normal3fv : (v: *GLfloat) #foreign;
	Normal3i : (nx: GLint, ny: GLint, nz: GLint) #foreign;
	Normal3iv : (v: *GLint) #foreign;
	Normal3s : (nx: GLshort, ny: GLshort, nz: GLshort) #foreign;
	Normal3sv : (v: *GLshort) #foreign;
	RasterPos2d : (x: GLdouble, y: GLdouble) #foreign;
	RasterPos2dv : (v: *GLdouble) #foreign;
	RasterPos2f : (x: GLfloat, y: GLfloat) #foreign;
	RasterPos2fv : (v: *GLfloat) #foreign;
	RasterPos2i : (x: GLint, y: GLint) #foreign;
	RasterPos2iv : (v: *GLint) #foreign;
	RasterPos2s : (x: GLshort, y: GLshort) #foreign;
	RasterPos2sv : (v: *GLshort) #foreign;
	RasterPos3d : (x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	RasterPos3dv : (v: *GLdouble) #foreign;
	RasterPos3f : (x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	RasterPos3fv : (v: *GLfloat) #foreign;
	RasterPos3i : (x: GLint, y: GLint, z: GLint) #foreign;
	RasterPos3iv : (v: *GLint) #foreign;
	RasterPos3s : (x: GLshort, y: GLshort, z: GLshort) #foreign;
	RasterPos3sv : (v: *GLshort) #foreign;
	RasterPos4d : (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	RasterPos4dv : (v: *GLdouble) #foreign;
	RasterPos4f : (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	RasterPos4fv : (v: *GLfloat) #foreign;
	RasterPos4i : (x: GLint, y: GLint, z: GLint, w: GLint) #foreign;
	RasterPos4iv : (v: *GLint) #foreign;
	RasterPos4s : (x: GLshort, y: GLshort, z: GLshort, w: GLshort) #foreign;
	RasterPos4sv : (v: *GLshort) #foreign;
	Rectd : (x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) #foreign;
	Rectdv : (v1: *GLdouble, v2: *GLdouble) #foreign;
	Rectf : (x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) #foreign;
	Rectfv : (v1: *GLfloat, v2: *GLfloat) #foreign;
	Recti : (x1: GLint, y1: GLint, x2: GLint, y2: GLint) #foreign;
	Rectiv : (v1: *GLint, v2: *GLint) #foreign;
	Rects : (x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) #foreign;
	Rectsv : (v1: *GLshort, v2: *GLshort) #foreign;
	TexCoord1d : (s: GLdouble) #foreign;
	TexCoord1dv : (v: *GLdouble) #foreign;
	TexCoord1f : (s: GLfloat) #foreign;
	TexCoord1fv : (v: *GLfloat) #foreign;
	TexCoord1i : (s: GLint) #foreign;
	TexCoord1iv : (v: *GLint) #foreign;
	TexCoord1s : (s: GLshort) #foreign;
	TexCoord1sv : (v: *GLshort) #foreign;
	TexCoord2d : (s: GLdouble, t: GLdouble) #foreign;
	TexCoord2dv : (v: *GLdouble) #foreign;
	TexCoord2f : (s: GLfloat, t: GLfloat) #foreign;
	TexCoord2fv : (v: *GLfloat) #foreign;
	TexCoord2i : (s: GLint, t: GLint) #foreign;
	TexCoord2iv : (v: *GLint) #foreign;
	TexCoord2s : (s: GLshort, t: GLshort) #foreign;
	TexCoord2sv : (v: *GLshort) #foreign;
	TexCoord3d : (s: GLdouble, t: GLdouble, r: GLdouble) #foreign;
	TexCoord3dv : (v: *GLdouble) #foreign;
	TexCoord3f : (s: GLfloat, t: GLfloat, r: GLfloat) #foreign;
	TexCoord3fv : (v: *GLfloat) #foreign;
	TexCoord3i : (s: GLint, t: GLint, r: GLint) #foreign;
	TexCoord3iv : (v: *GLint) #foreign;
	TexCoord3s : (s: GLshort, t: GLshort, r: GLshort) #foreign;
	TexCoord3sv : (v: *GLshort) #foreign;
	TexCoord4d : (s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) #foreign;
	TexCoord4dv : (v: *GLdouble) #foreign;
	TexCoord4f : (s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) #foreign;
	TexCoord4fv : (v: *GLfloat) #foreign;
	TexCoord4i : (s: GLint, t: GLint, r: GLint, q: GLint) #foreign;
	TexCoord4iv : (v: *GLint) #foreign;
	TexCoord4s : (s: GLshort, t: GLshort, r: GLshort, q: GLshort) #foreign;
	TexCoord4sv : (v: *GLshort) #foreign;
	Vertex2d : (x: GLdouble, y: GLdouble) #foreign;
	Vertex2dv : (v: *GLdouble) #foreign;
	Vertex2f : (x: GLfloat, y: GLfloat) #foreign;
	Vertex2fv : (v: *GLfloat) #foreign;
	Vertex2i : (x: GLint, y: GLint) #foreign;
	Vertex2iv : (v: *GLint) #foreign;
	Vertex2s : (x: GLshort, y: GLshort) #foreign;
	Vertex2sv : (v: *GLshort) #foreign;
	Vertex3d : (x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	Vertex3dv : (v: *GLdouble) #foreign;
	Vertex3f : (x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	Vertex3fv : (v: *GLfloat) #foreign;
	Vertex3i : (x: GLint, y: GLint, z: GLint) #foreign;
	Vertex3iv : (v: *GLint) #foreign;
	Vertex3s : (x: GLshort, y: GLshort, z: GLshort) #foreign;
	Vertex3sv : (v: *GLshort) #foreign;
	Vertex4d : (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	Vertex4dv : (v: *GLdouble) #foreign;
	Vertex4f : (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	Vertex4fv : (v: *GLfloat) #foreign;
	Vertex4i : (x: GLint, y: GLint, z: GLint, w: GLint) #foreign;
	Vertex4iv : (v: *GLint) #foreign;
	Vertex4s : (x: GLshort, y: GLshort, z: GLshort, w: GLshort) #foreign;
	Vertex4sv : (v: *GLshort) #foreign;
	ClipPlane : (plane: GLenum, equation: *GLdouble) #foreign;
	ColorMaterial : (face: GLenum, mode: GLenum) #foreign;
	Fogf : (pname: GLenum, param: GLfloat) #foreign;
	Fogfv : (pname: GLenum, params: *GLfloat) #foreign;
	Fogi : (pname: GLenum, param: GLint) #foreign;
	Fogiv : (pname: GLenum, params: *GLint) #foreign;
	Lightf : (light: GLenum, pname: GLenum, param: GLfloat) #foreign;
	Lightfv : (light: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	Lighti : (light: GLenum, pname: GLenum, param: GLint) #foreign;
	Lightiv : (light: GLenum, pname: GLenum, params: *GLint) #foreign;
	LightModelf : (pname: GLenum, param: GLfloat) #foreign;
	LightModelfv : (pname: GLenum, params: *GLfloat) #foreign;
	LightModeli : (pname: GLenum, param: GLint) #foreign;
	LightModeliv : (pname: GLenum, params: *GLint) #foreign;
	LineStipple : (factor: GLint, pattern: GLushort) #foreign;
	Materialf : (face: GLenum, pname: GLenum, param: GLfloat) #foreign;
	Materialfv : (face: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	Materiali : (face: GLenum, pname: GLenum, param: GLint) #foreign;
	Materialiv : (face: GLenum, pname: GLenum, params: *GLint) #foreign;
	PolygonStipple : (mask: *GLubyte) #foreign;
	ShadeModel : (mode: GLenum) #foreign;
	TexEnvf : (target: GLenum, pname: GLenum, param: GLfloat) #foreign;
	TexEnvfv : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	TexEnvi : (target: GLenum, pname: GLenum, param: GLint) #foreign;
	TexEnviv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	TexGend : (coord: GLenum, pname: GLenum, param: GLdouble) #foreign;
	TexGendv : (coord: GLenum, pname: GLenum, params: *GLdouble) #foreign;
	TexGenf : (coord: GLenum, pname: GLenum, param: GLfloat) #foreign;
	TexGenfv : (coord: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	TexGeni : (coord: GLenum, pname: GLenum, param: GLint) #foreign;
	TexGeniv : (coord: GLenum, pname: GLenum, params: *GLint) #foreign;
	FeedbackBuffer : (size: GLsizei, type: GLenum, buffer: *GLfloat) #foreign;
	SelectBuffer : (size: GLsizei, buffer: *GLuint) #foreign;
	RenderMode : (mode: GLenum) -> GLint #foreign;
	InitNames : () #foreign;
	LoadName : (name: GLuint) #foreign;
	PassThrough : (token: GLfloat) #foreign;
	PopName : () #foreign;
	PushName : (name: GLuint) #foreign;
	ClearAccum : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign;
	ClearIndex : (c: GLfloat) #foreign;
	IndexMask : (mask: GLuint) #foreign;
	Accum : (op: GLenum, value: GLfloat) #foreign;
	PopAttrib : () #foreign;
	PushAttrib : (mask: GLbitfield) #foreign;
	Map1d : (target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) #foreign;
	Map1f : (target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) #foreign;
	Map2d : (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) #foreign;
	Map2f : (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) #foreign;
	MapGrid1d : (un: GLint, u1: GLdouble, u2: GLdouble) #foreign;
	MapGrid1f : (un: GLint, u1: GLfloat, u2: GLfloat) #foreign;
	MapGrid2d : (un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) #foreign;
	MapGrid2f : (un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) #foreign;
	EvalCoord1d : (u: GLdouble) #foreign;
	EvalCoord1dv : (u: *GLdouble) #foreign;
	EvalCoord1f : (u: GLfloat) #foreign;
	EvalCoord1fv : (u: *GLfloat) #foreign;
	EvalCoord2d : (u: GLdouble, v: GLdouble) #foreign;
	EvalCoord2dv : (u: *GLdouble) #foreign;
	EvalCoord2f : (u: GLfloat, v: GLfloat) #foreign;
	EvalCoord2fv : (u: *GLfloat) #foreign;
	EvalMesh1 : (mode: GLenum, i1: GLint, i2: GLint) #foreign;
	EvalPoint1 : (i: GLint) #foreign;
	EvalMesh2 : (mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) #foreign;
	EvalPoint2 : (i: GLint, j: GLint) #foreign;
	AlphaFunc : (func: GLenum, ref: GLfloat) #foreign;
	PixelZoom : (xfactor: GLfloat, yfactor: GLfloat) #foreign;
	PixelTransferf : (pname: GLenum, param: GLfloat) #foreign;
	PixelTransferi : (pname: GLenum, param: GLint) #foreign;
	PixelMapfv : (map: GLenum, mapsize: GLsizei, values: *GLfloat) #foreign;
	PixelMapuiv : (map: GLenum, mapsize: GLsizei, values: *GLuint) #foreign;
	PixelMapusv : (map: GLenum, mapsize: GLsizei, values: *GLushort) #foreign;
	CopyPixels : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, type: GLenum) #foreign;
	DrawPixels : (width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	GetClipPlane : (plane: GLenum, equation: *GLdouble) #foreign;
	GetLightfv : (light: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetLightiv : (light: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetMapdv : (target: GLenum, query: GLenum, v: *GLdouble) #foreign;
	GetMapfv : (target: GLenum, query: GLenum, v: *GLfloat) #foreign;
	GetMapiv : (target: GLenum, query: GLenum, v: *GLint) #foreign;
	GetMaterialfv : (face: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetMaterialiv : (face: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetPixelMapfv : (map: GLenum, values: *GLfloat) #foreign;
	GetPixelMapuiv : (map: GLenum, values: *GLuint) #foreign;
	GetPixelMapusv : (map: GLenum, values: *GLushort) #foreign;
	GetPolygonStipple : (mask: *GLubyte) #foreign;
	GetTexEnvfv : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetTexEnviv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetTexGendv : (coord: GLenum, pname: GLenum, params: *GLdouble) #foreign;
	GetTexGenfv : (coord: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetTexGeniv : (coord: GLenum, pname: GLenum, params: *GLint) #foreign;
	IsList : (list: GLuint) -> GLboolean #foreign;
	Frustum : (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #foreign;
	LoadIdentity : () #foreign;
	LoadMatrixf : (m: *GLfloat) #foreign;
	LoadMatrixd : (m: *GLdouble) #foreign;
	MatrixMode : (mode: GLenum) #foreign;
	MultMatrixf : (m: *GLfloat) #foreign;
	MultMatrixd : (m: *GLdouble) #foreign;
	Ortho : (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #foreign;
	PopMatrix : () #foreign;
	PushMatrix : () #foreign;
	Rotated : (angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	Rotatef : (angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	Scaled : (x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	Scalef : (x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	Translated : (x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	Translatef : (x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
}

// VERSION_1_1
#if OS == .WINDOWS || OS == .MACOS
{
	DrawArrays :: (mode: GLenum, first: GLint, count: GLsizei) #foreign gl_lib "glDrawArrays";
	DrawElements :: (mode: GLenum, count: GLsizei, type: GLenum, indices: *void) #foreign gl_lib "glDrawElements";
	GetPointerv :: (pname: GLenum, params: **void) #foreign gl_lib "glGetPointerv";
	PolygonOffset :: (factor: GLfloat, units: GLfloat) #foreign gl_lib "glPolygonOffset";
	CopyTexImage1D :: (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) #foreign gl_lib "glCopyTexImage1D";
	CopyTexImage2D :: (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) #foreign gl_lib "glCopyTexImage2D";
	CopyTexSubImage1D :: (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #foreign gl_lib "glCopyTexSubImage1D";
	CopyTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign gl_lib "glCopyTexSubImage2D";
	TexSubImage1D :: (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib "glTexSubImage1D";
	TexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib "glTexSubImage2D";
	BindTexture :: (target: GLenum, texture: GLuint) #foreign gl_lib "glBindTexture";
	DeleteTextures :: (n: GLsizei, textures: *GLuint) #foreign gl_lib "glDeleteTextures";
	GenTextures :: (n: GLsizei, textures: *GLuint) #foreign gl_lib "glGenTextures";
	IsTexture :: (texture: GLuint) -> GLboolean #foreign gl_lib "glIsTexture";
	ArrayElement :: (i: GLint) #foreign gl_lib "glArrayElement";
	ColorPointer :: (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign gl_lib "glColorPointer";
	DisableClientState :: (array: GLenum) #foreign gl_lib "glDisableClientState";
	EdgeFlagPointer :: (stride: GLsizei, pointer: *void) #foreign gl_lib "glEdgeFlagPointer";
	EnableClientState :: (array: GLenum) #foreign gl_lib "glEnableClientState";
	IndexPointer :: (type: GLenum, stride: GLsizei, pointer: *void) #foreign gl_lib "glIndexPointer";
	InterleavedArrays :: (format: GLenum, stride: GLsizei, pointer: *void) #foreign gl_lib "glInterleavedArrays";
	NormalPointer :: (type: GLenum, stride: GLsizei, pointer: *void) #foreign gl_lib "glNormalPointer";
	TexCoordPointer :: (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign gl_lib "glTexCoordPointer";
	VertexPointer :: (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign gl_lib "glVertexPointer";
	AreTexturesResident :: (n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean #foreign gl_lib "glAreTexturesResident";
	PrioritizeTextures :: (n: GLsizei, textures: *GLuint, priorities: *GLfloat) #foreign gl_lib "glPrioritizeTextures";
	Indexub :: (c: GLubyte) #foreign gl_lib "glIndexub";
	Indexubv :: (c: *GLubyte) #foreign gl_lib "glIndexubv";
	PopClientAttrib :: () #foreign gl_lib "glPopClientAttrib";
	PushClientAttrib :: (mask: GLbitfield) #foreign gl_lib "glPushClientAttrib";
}
else
{
	DrawArrays : (mode: GLenum, first: GLint, count: GLsizei) #foreign;
	DrawElements : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void) #foreign;
	GetPointerv : (pname: GLenum, params: **void) #foreign;
	PolygonOffset : (factor: GLfloat, units: GLfloat) #foreign;
	CopyTexImage1D : (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) #foreign;
	CopyTexImage2D : (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) #foreign;
	CopyTexSubImage1D : (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #foreign;
	CopyTexSubImage2D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	TexSubImage1D : (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	TexSubImage2D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	BindTexture : (target: GLenum, texture: GLuint) #foreign;
	DeleteTextures : (n: GLsizei, textures: *GLuint) #foreign;
	GenTextures : (n: GLsizei, textures: *GLuint) #foreign;
	IsTexture : (texture: GLuint) -> GLboolean #foreign;
	ArrayElement : (i: GLint) #foreign;
	ColorPointer : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	DisableClientState : (array: GLenum) #foreign;
	EdgeFlagPointer : (stride: GLsizei, pointer: *void) #foreign;
	EnableClientState : (array: GLenum) #foreign;
	IndexPointer : (type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	InterleavedArrays : (format: GLenum, stride: GLsizei, pointer: *void) #foreign;
	NormalPointer : (type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	TexCoordPointer : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	VertexPointer : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	AreTexturesResident : (n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean #foreign;
	PrioritizeTextures : (n: GLsizei, textures: *GLuint, priorities: *GLfloat) #foreign;
	Indexub : (c: GLubyte) #foreign;
	Indexubv : (c: *GLubyte) #foreign;
	PopClientAttrib : () #foreign;
	PushClientAttrib : (mask: GLbitfield) #foreign;
}

	// VERSION_1_2
	DrawRangeElements : (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void) #foreign;
	TexImage3D : (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	TexSubImage3D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	CopyTexSubImage3D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	
	// VERSION_1_3
	ActiveTexture : (texture: GLenum) #foreign;
	SampleCoverage : (value: GLfloat, invert: GLboolean) #foreign;
	CompressedTexImage3D : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #foreign;
	CompressedTexImage2D : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #foreign;
	CompressedTexImage1D : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #foreign;
	CompressedTexSubImage3D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
	CompressedTexSubImage2D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
	CompressedTexSubImage1D : (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
	GetCompressedTexImage : (target: GLenum, level: GLint, img: *void) #foreign;
	ClientActiveTexture : (texture: GLenum) #foreign;
	MultiTexCoord1d : (target: GLenum, s: GLdouble) #foreign;
	MultiTexCoord1dv : (target: GLenum, v: *GLdouble) #foreign;
	MultiTexCoord1f : (target: GLenum, s: GLfloat) #foreign;
	MultiTexCoord1fv : (target: GLenum, v: *GLfloat) #foreign;
	MultiTexCoord1i : (target: GLenum, s: GLint) #foreign;
	MultiTexCoord1iv : (target: GLenum, v: *GLint) #foreign;
	MultiTexCoord1s : (target: GLenum, s: GLshort) #foreign;
	MultiTexCoord1sv : (target: GLenum, v: *GLshort) #foreign;
	MultiTexCoord2d : (target: GLenum, s: GLdouble, t: GLdouble) #foreign;
	MultiTexCoord2dv : (target: GLenum, v: *GLdouble) #foreign;
	MultiTexCoord2f : (target: GLenum, s: GLfloat, t: GLfloat) #foreign;
	MultiTexCoord2fv : (target: GLenum, v: *GLfloat) #foreign;
	MultiTexCoord2i : (target: GLenum, s: GLint, t: GLint) #foreign;
	MultiTexCoord2iv : (target: GLenum, v: *GLint) #foreign;
	MultiTexCoord2s : (target: GLenum, s: GLshort, t: GLshort) #foreign;
	MultiTexCoord2sv : (target: GLenum, v: *GLshort) #foreign;
	MultiTexCoord3d : (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) #foreign;
	MultiTexCoord3dv : (target: GLenum, v: *GLdouble) #foreign;
	MultiTexCoord3f : (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) #foreign;
	MultiTexCoord3fv : (target: GLenum, v: *GLfloat) #foreign;
	MultiTexCoord3i : (target: GLenum, s: GLint, t: GLint, r: GLint) #foreign;
	MultiTexCoord3iv : (target: GLenum, v: *GLint) #foreign;
	MultiTexCoord3s : (target: GLenum, s: GLshort, t: GLshort, r: GLshort) #foreign;
	MultiTexCoord3sv : (target: GLenum, v: *GLshort) #foreign;
	MultiTexCoord4d : (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) #foreign;
	MultiTexCoord4dv : (target: GLenum, v: *GLdouble) #foreign;
	MultiTexCoord4f : (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) #foreign;
	MultiTexCoord4fv : (target: GLenum, v: *GLfloat) #foreign;
	MultiTexCoord4i : (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) #foreign;
	MultiTexCoord4iv : (target: GLenum, v: *GLint) #foreign;
	MultiTexCoord4s : (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) #foreign;
	MultiTexCoord4sv : (target: GLenum, v: *GLshort) #foreign;
	LoadTransposeMatrixf : (m: *GLfloat) #foreign;
	LoadTransposeMatrixd : (m: *GLdouble) #foreign;
	MultTransposeMatrixf : (m: *GLfloat) #foreign;
	MultTransposeMatrixd : (m: *GLdouble) #foreign;
	
	// VERSION_1_4
	BlendFuncSeparate : (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) #foreign;
	MultiDrawArrays : (mode: GLenum, first: *GLint, count: *GLsizei, drawcount: GLsizei) #foreign;
	MultiDrawElements : (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, drawcount: GLsizei) #foreign;
	PointParameterf : (pname: GLenum, param: GLfloat) #foreign;
	PointParameterfv : (pname: GLenum, params: *GLfloat) #foreign;
	PointParameteri : (pname: GLenum, param: GLint) #foreign;
	PointParameteriv : (pname: GLenum, params: *GLint) #foreign;
	FogCoordf : (coord: GLfloat) #foreign;
	FogCoordfv : (coord: *GLfloat) #foreign;
	FogCoordd : (coord: GLdouble) #foreign;
	FogCoorddv : (coord: *GLdouble) #foreign;
	FogCoordPointer : (type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	SecondaryColor3b : (red: GLbyte, green: GLbyte, blue: GLbyte) #foreign;
	SecondaryColor3bv : (v: *GLbyte) #foreign;
	SecondaryColor3d : (red: GLdouble, green: GLdouble, blue: GLdouble) #foreign;
	SecondaryColor3dv : (v: *GLdouble) #foreign;
	SecondaryColor3f : (red: GLfloat, green: GLfloat, blue: GLfloat) #foreign;
	SecondaryColor3fv : (v: *GLfloat) #foreign;
	SecondaryColor3i : (red: GLint, green: GLint, blue: GLint) #foreign;
	SecondaryColor3iv : (v: *GLint) #foreign;
	SecondaryColor3s : (red: GLshort, green: GLshort, blue: GLshort) #foreign;
	SecondaryColor3sv : (v: *GLshort) #foreign;
	SecondaryColor3ub : (red: GLubyte, green: GLubyte, blue: GLubyte) #foreign;
	SecondaryColor3ubv : (v: *GLubyte) #foreign;
	SecondaryColor3ui : (red: GLuint, green: GLuint, blue: GLuint) #foreign;
	SecondaryColor3uiv : (v: *GLuint) #foreign;
	SecondaryColor3us : (red: GLushort, green: GLushort, blue: GLushort) #foreign;
	SecondaryColor3usv : (v: *GLushort) #foreign;
	SecondaryColorPointer : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	WindowPos2d : (x: GLdouble, y: GLdouble) #foreign;
	WindowPos2dv : (v: *GLdouble) #foreign;
	WindowPos2f : (x: GLfloat, y: GLfloat) #foreign;
	WindowPos2fv : (v: *GLfloat) #foreign;
	WindowPos2i : (x: GLint, y: GLint) #foreign;
	WindowPos2iv : (v: *GLint) #foreign;
	WindowPos2s : (x: GLshort, y: GLshort) #foreign;
	WindowPos2sv : (v: *GLshort) #foreign;
	WindowPos3d : (x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	WindowPos3dv : (v: *GLdouble) #foreign;
	WindowPos3f : (x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	WindowPos3fv : (v: *GLfloat) #foreign;
	WindowPos3i : (x: GLint, y: GLint, z: GLint) #foreign;
	WindowPos3iv : (v: *GLint) #foreign;
	WindowPos3s : (x: GLshort, y: GLshort, z: GLshort) #foreign;
	WindowPos3sv : (v: *GLshort) #foreign;
	BlendColor : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign;
	BlendEquation : (mode: GLenum) #foreign;
	
	// VERSION_1_5
	GenQueries : (n: GLsizei, ids: *GLuint) #foreign;
	DeleteQueries : (n: GLsizei, ids: *GLuint) #foreign;
	IsQuery : (id: GLuint) -> GLboolean #foreign;
	BeginQuery : (target: GLenum, id: GLuint) #foreign;
	EndQuery : (target: GLenum) #foreign;
	GetQueryiv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetQueryObjectiv : (id: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetQueryObjectuiv : (id: GLuint, pname: GLenum, params: *GLuint) #foreign;
	BindBuffer : (target: GLenum, buffer: GLuint) #foreign;
	DeleteBuffers : (n: GLsizei, buffers: *GLuint) #foreign;
	GenBuffers : (n: GLsizei, buffers: *GLuint) #foreign;
	IsBuffer : (buffer: GLuint) -> GLboolean #foreign;
	BufferData : (target: GLenum, size: GLsizeiptr, data: *void, usage: GLenum) #foreign;
	BufferSubData : (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
	GetBufferSubData : (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
	MapBuffer : (target: GLenum, access: GLenum) -> *void #foreign;
	UnmapBuffer : (target: GLenum) -> GLboolean #foreign;
	GetBufferParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetBufferPointerv : (target: GLenum, pname: GLenum, params: **void) #foreign;
	
	// VERSION_2_0
	BlendEquationSeparate : (modeRGB: GLenum, modeAlpha: GLenum) #foreign;
	DrawBuffers : (n: GLsizei, bufs: *GLenum) #foreign;
	StencilOpSeparate : (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) #foreign;
	StencilFuncSeparate : (face: GLenum, func: GLenum, ref: GLint, mask: GLuint) #foreign;
	StencilMaskSeparate : (face: GLenum, mask: GLuint) #foreign;
	AttachShader : (program: GLuint, shader: GLuint) #foreign;
	BindAttribLocation : (program: GLuint, index: GLuint, name: *GLchar) #foreign;
	CompileShader : (shader: GLuint) #foreign;
	CreateProgram : () -> GLuint #foreign;
	CreateShader : (type: GLenum) -> GLuint #foreign;
	DeleteProgram : (program: GLuint) #foreign;
	DeleteShader : (shader: GLuint) #foreign;
	DetachShader : (program: GLuint, shader: GLuint) #foreign;
	DisableVertexAttribArray : (index: GLuint) #foreign;
	EnableVertexAttribArray : (index: GLuint) #foreign;
	GetActiveAttrib : (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLchar) #foreign;
	GetActiveUniform : (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLchar) #foreign;
	GetAttachedShaders : (program: GLuint, maxCount: GLsizei, count: *GLsizei, shaders: *GLuint) #foreign;
	GetAttribLocation : (program: GLuint, name: *GLchar) -> GLint #foreign;
	GetProgramiv : (program: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetProgramInfoLog : (program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #foreign;
	GetShaderiv : (shader: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetShaderInfoLog : (shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #foreign;
	GetShaderSource : (shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) #foreign;
	GetUniformLocation : (program: GLuint, name: *GLchar) -> GLint #foreign;
	GetUniformfv : (program: GLuint, location: GLint, params: *GLfloat) #foreign;
	GetUniformiv : (program: GLuint, location: GLint, params: *GLint) #foreign;
	GetVertexAttribdv : (index: GLuint, pname: GLenum, params: *GLdouble) #foreign;
	GetVertexAttribfv : (index: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	GetVertexAttribiv : (index: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetVertexAttribPointerv : (index: GLuint, pname: GLenum, pointer: **void) #foreign;
	IsProgram : (program: GLuint) -> GLboolean #foreign;
	IsShader : (shader: GLuint) -> GLboolean #foreign;
	LinkProgram : (program: GLuint) #foreign;
	ShaderSource : (shader: GLuint, count: GLsizei, str: **GLchar, length: *GLint) #foreign;
	UseProgram : (program: GLuint) #foreign;
	Uniform1f : (location: GLint, v0: GLfloat) #foreign;
	Uniform2f : (location: GLint, v0: GLfloat, v1: GLfloat) #foreign;
	Uniform3f : (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #foreign;
	Uniform4f : (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #foreign;
	Uniform1i : (location: GLint, v0: GLint) #foreign;
	Uniform2i : (location: GLint, v0: GLint, v1: GLint) #foreign;
	Uniform3i : (location: GLint, v0: GLint, v1: GLint, v2: GLint) #foreign;
	Uniform4i : (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #foreign;
	Uniform1fv : (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	Uniform2fv : (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	Uniform3fv : (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	Uniform4fv : (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	Uniform1iv : (location: GLint, count: GLsizei, value: *GLint) #foreign;
	Uniform2iv : (location: GLint, count: GLsizei, value: *GLint) #foreign;
	Uniform3iv : (location: GLint, count: GLsizei, value: *GLint) #foreign;
	Uniform4iv : (location: GLint, count: GLsizei, value: *GLint) #foreign;
	UniformMatrix2fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	UniformMatrix3fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	UniformMatrix4fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ValidateProgram : (program: GLuint) #foreign;
	VertexAttrib1d : (index: GLuint, x: GLdouble) #foreign;
	VertexAttrib1dv : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttrib1f : (index: GLuint, x: GLfloat) #foreign;
	VertexAttrib1fv : (index: GLuint, v: *GLfloat) #foreign;
	VertexAttrib1s : (index: GLuint, x: GLshort) #foreign;
	VertexAttrib1sv : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib2d : (index: GLuint, x: GLdouble, y: GLdouble) #foreign;
	VertexAttrib2dv : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttrib2f : (index: GLuint, x: GLfloat, y: GLfloat) #foreign;
	VertexAttrib2fv : (index: GLuint, v: *GLfloat) #foreign;
	VertexAttrib2s : (index: GLuint, x: GLshort, y: GLshort) #foreign;
	VertexAttrib2sv : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib3d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	VertexAttrib3dv : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttrib3f : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	VertexAttrib3fv : (index: GLuint, v: *GLfloat) #foreign;
	VertexAttrib3s : (index: GLuint, x: GLshort, y: GLshort, z: GLshort) #foreign;
	VertexAttrib3sv : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib4Nbv : (index: GLuint, v: *GLbyte) #foreign;
	VertexAttrib4Niv : (index: GLuint, v: *GLint) #foreign;
	VertexAttrib4Nsv : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib4Nub : (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) #foreign;
	VertexAttrib4Nubv : (index: GLuint, v: *GLubyte) #foreign;
	VertexAttrib4Nuiv : (index: GLuint, v: *GLuint) #foreign;
	VertexAttrib4Nusv : (index: GLuint, v: *GLushort) #foreign;
	VertexAttrib4bv : (index: GLuint, v: *GLbyte) #foreign;
	VertexAttrib4d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	VertexAttrib4dv : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttrib4f : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	VertexAttrib4fv : (index: GLuint, v: *GLfloat) #foreign;
	VertexAttrib4iv : (index: GLuint, v: *GLint) #foreign;
	VertexAttrib4s : (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) #foreign;
	VertexAttrib4sv : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib4ubv : (index: GLuint, v: *GLubyte) #foreign;
	VertexAttrib4uiv : (index: GLuint, v: *GLuint) #foreign;
	VertexAttrib4usv : (index: GLuint, v: *GLushort) #foreign;
	VertexAttribPointer : (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *void) #foreign;
	
	// VERSION_2_1
	UniformMatrix2x3fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	UniformMatrix3x2fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	UniformMatrix2x4fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	UniformMatrix4x2fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	UniformMatrix3x4fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	UniformMatrix4x3fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	
	// VERSION_3_0
	ColorMaski : (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) #foreign;
	GetBooleani_v : (target: GLenum, index: GLuint, data: *GLboolean) #foreign;
	GetIntegeri_v : (target: GLenum, index: GLuint, data: *GLint) #foreign;
	Enablei : (target: GLenum, index: GLuint) #foreign;
	Disablei : (target: GLenum, index: GLuint) #foreign;
	IsEnabledi : (target: GLenum, index: GLuint) -> GLboolean #foreign;
	BeginTransformFeedback : (primitiveMode: GLenum) #foreign;
	EndTransformFeedback : () #foreign;
	BindBufferRange : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
	BindBufferBase : (target: GLenum, index: GLuint, buffer: GLuint) #foreign;
	TransformFeedbackVaryings : (program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) #foreign;
	GetTransformFeedbackVarying : (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type: *GLenum, name: *GLchar) #foreign;
	ClampColor : (target: GLenum, clamp: GLenum) #foreign;
	BeginConditionalRender : (id: GLuint, mode: GLenum) #foreign;
	EndConditionalRender : () #foreign;
	VertexAttribIPointer : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	GetVertexAttribIiv : (index: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetVertexAttribIuiv : (index: GLuint, pname: GLenum, params: *GLuint) #foreign;
	VertexAttribI1i : (index: GLuint, x: GLint) #foreign;
	VertexAttribI2i : (index: GLuint, x: GLint, y: GLint) #foreign;
	VertexAttribI3i : (index: GLuint, x: GLint, y: GLint, z: GLint) #foreign;
	VertexAttribI4i : (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) #foreign;
	VertexAttribI1ui : (index: GLuint, x: GLuint) #foreign;
	VertexAttribI2ui : (index: GLuint, x: GLuint, y: GLuint) #foreign;
	VertexAttribI3ui : (index: GLuint, x: GLuint, y: GLuint, z: GLuint) #foreign;
	VertexAttribI4ui : (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) #foreign;
	VertexAttribI1iv : (index: GLuint, v: *GLint) #foreign;
	VertexAttribI2iv : (index: GLuint, v: *GLint) #foreign;
	VertexAttribI3iv : (index: GLuint, v: *GLint) #foreign;
	VertexAttribI4iv : (index: GLuint, v: *GLint) #foreign;
	VertexAttribI1uiv : (index: GLuint, v: *GLuint) #foreign;
	VertexAttribI2uiv : (index: GLuint, v: *GLuint) #foreign;
	VertexAttribI3uiv : (index: GLuint, v: *GLuint) #foreign;
	VertexAttribI4uiv : (index: GLuint, v: *GLuint) #foreign;
	VertexAttribI4bv : (index: GLuint, v: *GLbyte) #foreign;
	VertexAttribI4sv : (index: GLuint, v: *GLshort) #foreign;
	VertexAttribI4ubv : (index: GLuint, v: *GLubyte) #foreign;
	VertexAttribI4usv : (index: GLuint, v: *GLushort) #foreign;
	GetUniformuiv : (program: GLuint, location: GLint, params: *GLuint) #foreign;
	BindFragDataLocation : (program: GLuint, color: GLuint, name: *GLchar) #foreign;
	GetFragDataLocation : (program: GLuint, name: *GLchar) -> GLint #foreign;
	Uniform1ui : (location: GLint, v0: GLuint) #foreign;
	Uniform2ui : (location: GLint, v0: GLuint, v1: GLuint) #foreign;
	Uniform3ui : (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #foreign;
	Uniform4ui : (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #foreign;
	Uniform1uiv : (location: GLint, count: GLsizei, value: *GLuint) #foreign;
	Uniform2uiv : (location: GLint, count: GLsizei, value: *GLuint) #foreign;
	Uniform3uiv : (location: GLint, count: GLsizei, value: *GLuint) #foreign;
	Uniform4uiv : (location: GLint, count: GLsizei, value: *GLuint) #foreign;
	TexParameterIiv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	TexParameterIuiv : (target: GLenum, pname: GLenum, params: *GLuint) #foreign;
	GetTexParameterIiv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetTexParameterIuiv : (target: GLenum, pname: GLenum, params: *GLuint) #foreign;
	ClearBufferiv : (buffer: GLenum, drawbuffer: GLint, value: *GLint) #foreign;
	ClearBufferuiv : (buffer: GLenum, drawbuffer: GLint, value: *GLuint) #foreign;
	ClearBufferfv : (buffer: GLenum, drawbuffer: GLint, value: *GLfloat) #foreign;
	ClearBufferfi : (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) #foreign;
	GetStringi : (name: GLenum, index: GLuint) -> *GLubyte #foreign;
	IsRenderbuffer : (renderbuffer: GLuint) -> GLboolean #foreign;
	BindRenderbuffer : (target: GLenum, renderbuffer: GLuint) #foreign;
	DeleteRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #foreign;
	GenRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #foreign;
	RenderbufferStorage : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	GetRenderbufferParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	IsFramebuffer : (framebuffer: GLuint) -> GLboolean #foreign;
	BindFramebuffer : (target: GLenum, framebuffer: GLuint) #foreign;
	DeleteFramebuffers : (n: GLsizei, framebuffers: *GLuint) #foreign;
	GenFramebuffers : (n: GLsizei, framebuffers: *GLuint) #foreign;
	CheckFramebufferStatus : (target: GLenum) -> GLenum #foreign;
	FramebufferTexture1D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #foreign;
	FramebufferTexture2D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #foreign;
	FramebufferTexture3D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) #foreign;
	FramebufferRenderbuffer : (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #foreign;
	GetFramebufferAttachmentParameteriv : (target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) #foreign;
	GenerateMipmap : (target: GLenum) #foreign;
	BlitFramebuffer : (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #foreign;
	RenderbufferStorageMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	FramebufferTextureLayer : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #foreign;
	MapBufferRange : (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) #foreign;
	FlushMappedBufferRange : (target: GLenum, offset: GLintptr, length: GLsizeiptr) #foreign;
	BindVertexArray : (array: GLuint) #foreign;
	DeleteVertexArrays : (n: GLsizei, arrays: *GLuint) #foreign;
	GenVertexArrays : (n: GLsizei, arrays: *GLuint) #foreign;
	IsVertexArray : (array: GLuint) -> GLboolean #foreign;
	
	// VERSION_3_1
	DrawArraysInstanced : (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) #foreign;
	DrawElementsInstanced : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei) #foreign;
	TexBuffer : (target: GLenum, internalformat: GLenum, buffer: GLuint) #foreign;
	PrimitiveRestartIndex : (index: GLuint) #foreign;
	CopyBufferSubData : (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #foreign;
	GetUniformIndices : (program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) #foreign;
	GetActiveUniformsiv : (program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) #foreign;
	GetActiveUniformName : (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformName: *GLchar) #foreign;
	GetUniformBlockIndex : (program: GLuint, uniformBlockName: *GLchar) -> GLuint #foreign;
	GetActiveUniformBlockiv : (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetActiveUniformBlockName : (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) #foreign;
	UniformBlockBinding : (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) #foreign;
	// BindBufferRange : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
	// BindBufferBase : (target: GLenum, index: GLuint, buffer: GLuint) #foreign;
	// GetIntegeri_v : (target: GLenum, index: GLuint, data: *GLint) #foreign;
	
	// VERSION_3_2
	DrawElementsBaseVertex : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) #foreign;
	DrawRangeElementsBaseVertex : (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) #foreign;
	DrawElementsInstancedBaseVertex : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint) #foreign;
	MultiDrawElementsBaseVertex : (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, drawcount: GLsizei, basevertex: *GLint) #foreign;
	ProvokingVertex : (mode: GLenum) #foreign;
	FenceSync : (condition: GLenum, flags: GLbitfield) -> GLsync #foreign;
	IsSync : (sync: GLsync) -> GLboolean #foreign;
	DeleteSync : (sync: GLsync) #foreign;
	ClientWaitSync : (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum #foreign;
	WaitSync : (sync: GLsync, flags: GLbitfield, timeout: GLuint64) #foreign;
	GetInteger64v : (pname: GLenum, data: *GLint64) #foreign;
	GetSynciv : (sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) #foreign;
	GetInteger64i_v : (target: GLenum, index: GLuint, data: *GLint64) #foreign;
	GetBufferParameteri64v : (target: GLenum, pname: GLenum, params: *GLint64) #foreign;
	FramebufferTexture : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) #foreign;
	TexImage2DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	TexImage3DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	GetMultisamplefv : (pname: GLenum, index: GLuint, val: *GLfloat) #foreign;
	SampleMaski : (maskNumber: GLuint, mask: GLbitfield) #foreign;
	
	// VERSION_3_3
	BindFragDataLocationIndexed : (program: GLuint, colorNumber: GLuint, index: GLuint, name: *GLchar) #foreign;
	GetFragDataIndex : (program: GLuint, name: *GLchar) -> GLint #foreign;
	GenSamplers : (count: GLsizei, samplers: *GLuint) #foreign;
	DeleteSamplers : (count: GLsizei, samplers: *GLuint) #foreign;
	IsSampler : (sampler: GLuint) -> GLboolean #foreign;
	BindSampler : (unit: GLuint, sampler: GLuint) #foreign;
	SamplerParameteri : (sampler: GLuint, pname: GLenum, param: GLint) #foreign;
	SamplerParameteriv : (sampler: GLuint, pname: GLenum, param: *GLint) #foreign;
	SamplerParameterf : (sampler: GLuint, pname: GLenum, param: GLfloat) #foreign;
	SamplerParameterfv : (sampler: GLuint, pname: GLenum, param: *GLfloat) #foreign;
	SamplerParameterIiv : (sampler: GLuint, pname: GLenum, param: *GLint) #foreign;
	SamplerParameterIuiv : (sampler: GLuint, pname: GLenum, param: *GLuint) #foreign;
	GetSamplerParameteriv : (sampler: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetSamplerParameterIiv : (sampler: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetSamplerParameterfv : (sampler: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	GetSamplerParameterIuiv : (sampler: GLuint, pname: GLenum, params: *GLuint) #foreign;
	QueryCounter : (id: GLuint, target: GLenum) #foreign;
	GetQueryObjecti64v : (id: GLuint, pname: GLenum, params: *GLint64) #foreign;
	GetQueryObjectui64v : (id: GLuint, pname: GLenum, params: *GLuint64) #foreign;
	VertexAttribDivisor : (index: GLuint, divisor: GLuint) #foreign;
	VertexAttribP1ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #foreign;
	VertexAttribP1uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #foreign;
	VertexAttribP2ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #foreign;
	VertexAttribP2uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #foreign;
	VertexAttribP3ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #foreign;
	VertexAttribP3uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #foreign;
	VertexAttribP4ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #foreign;
	VertexAttribP4uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #foreign;
	VertexP2ui : (type: GLenum, value: GLuint) #foreign;
	VertexP2uiv : (type: GLenum, value: *GLuint) #foreign;
	VertexP3ui : (type: GLenum, value: GLuint) #foreign;
	VertexP3uiv : (type: GLenum, value: *GLuint) #foreign;
	VertexP4ui : (type: GLenum, value: GLuint) #foreign;
	VertexP4uiv : (type: GLenum, value: *GLuint) #foreign;
	TexCoordP1ui : (type: GLenum, coords: GLuint) #foreign;
	TexCoordP1uiv : (type: GLenum, coords: *GLuint) #foreign;
	TexCoordP2ui : (type: GLenum, coords: GLuint) #foreign;
	TexCoordP2uiv : (type: GLenum, coords: *GLuint) #foreign;
	TexCoordP3ui : (type: GLenum, coords: GLuint) #foreign;
	TexCoordP3uiv : (type: GLenum, coords: *GLuint) #foreign;
	TexCoordP4ui : (type: GLenum, coords: GLuint) #foreign;
	TexCoordP4uiv : (type: GLenum, coords: *GLuint) #foreign;
	MultiTexCoordP1ui : (texture: GLenum, type: GLenum, coords: GLuint) #foreign;
	MultiTexCoordP1uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #foreign;
	MultiTexCoordP2ui : (texture: GLenum, type: GLenum, coords: GLuint) #foreign;
	MultiTexCoordP2uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #foreign;
	MultiTexCoordP3ui : (texture: GLenum, type: GLenum, coords: GLuint) #foreign;
	MultiTexCoordP3uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #foreign;
	MultiTexCoordP4ui : (texture: GLenum, type: GLenum, coords: GLuint) #foreign;
	MultiTexCoordP4uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #foreign;
	NormalP3ui : (type: GLenum, coords: GLuint) #foreign;
	NormalP3uiv : (type: GLenum, coords: *GLuint) #foreign;
	ColorP3ui : (type: GLenum, color: GLuint) #foreign;
	ColorP3uiv : (type: GLenum, color: *GLuint) #foreign;
	ColorP4ui : (type: GLenum, color: GLuint) #foreign;
	ColorP4uiv : (type: GLenum, color: *GLuint) #foreign;
	SecondaryColorP3ui : (type: GLenum, color: GLuint) #foreign;
	SecondaryColorP3uiv : (type: GLenum, color: *GLuint) #foreign;
	
	// VERSION_4_0
	MinSampleShading : (value: GLfloat) #foreign;
	BlendEquationi : (buf: GLuint, mode: GLenum) #foreign;
	BlendEquationSeparatei : (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) #foreign;
	BlendFunci : (buf: GLuint, src: GLenum, dst: GLenum) #foreign;
	BlendFuncSeparatei : (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) #foreign;
	DrawArraysIndirect : (mode: GLenum, indirect: *void) #foreign;
	DrawElementsIndirect : (mode: GLenum, type: GLenum, indirect: *void) #foreign;
	Uniform1d : (location: GLint, x: GLdouble) #foreign;
	Uniform2d : (location: GLint, x: GLdouble, y: GLdouble) #foreign;
	Uniform3d : (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	Uniform4d : (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	Uniform1dv : (location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	Uniform2dv : (location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	Uniform3dv : (location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	Uniform4dv : (location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	UniformMatrix2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	UniformMatrix3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	UniformMatrix4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	UniformMatrix2x3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	UniformMatrix2x4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	UniformMatrix3x2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	UniformMatrix3x4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	UniformMatrix4x2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	UniformMatrix4x3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	GetUniformdv : (program: GLuint, location: GLint, params: *GLdouble) #foreign;
	GetSubroutineUniformLocation : (program: GLuint, shadertype: GLenum, name: *GLchar) -> GLint #foreign;
	GetSubroutineIndex : (program: GLuint, shadertype: GLenum, name: *GLchar) -> GLuint #foreign;
	GetActiveSubroutineUniformiv : (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *GLint) #foreign;
	GetActiveSubroutineUniformName : (program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) #foreign;
	GetActiveSubroutineName : (program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) #foreign;
	UniformSubroutinesuiv : (shadertype: GLenum, count: GLsizei, indices: *GLuint) #foreign;
	GetUniformSubroutineuiv : (shadertype: GLenum, location: GLint, params: *GLuint) #foreign;
	GetProgramStageiv : (program: GLuint, shadertype: GLenum, pname: GLenum, values: *GLint) #foreign;
	PatchParameteri : (pname: GLenum, value: GLint) #foreign;
	PatchParameterfv : (pname: GLenum, values: *GLfloat) #foreign;
	BindTransformFeedback : (target: GLenum, id: GLuint) #foreign;
	DeleteTransformFeedbacks : (n: GLsizei, ids: *GLuint) #foreign;
	GenTransformFeedbacks : (n: GLsizei, ids: *GLuint) #foreign;
	IsTransformFeedback : (id: GLuint) -> GLboolean #foreign;
	PauseTransformFeedback : () #foreign;
	ResumeTransformFeedback : () #foreign;
	DrawTransformFeedback : (mode: GLenum, id: GLuint) #foreign;
	DrawTransformFeedbackStream : (mode: GLenum, id: GLuint, stream: GLuint) #foreign;
	BeginQueryIndexed : (target: GLenum, index: GLuint, id: GLuint) #foreign;
	EndQueryIndexed : (target: GLenum, index: GLuint) #foreign;
	GetQueryIndexediv : (target: GLenum, index: GLuint, pname: GLenum, params: *GLint) #foreign;
	
	// VERSION_4_1
	ReleaseShaderCompiler : () #foreign;
	ShaderBinary : (count: GLsizei, shaders: *GLuint, binaryformat: GLenum, binary: *void, length: GLsizei) #foreign;
	GetShaderPrecisionFormat : (shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) #foreign;
	DepthRangef : (n: GLfloat, f: GLfloat) #foreign;
	ClearDepthf : (d: GLfloat) #foreign;
	GetProgramBinary : (program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *void) #foreign;
	ProgramBinary : (program: GLuint, binaryFormat: GLenum, binary: *void, length: GLsizei) #foreign;
	ProgramParameteri : (program: GLuint, pname: GLenum, value: GLint) #foreign;
	UseProgramStages : (pipeline: GLuint, stages: GLbitfield, program: GLuint) #foreign;
	ActiveShaderProgram : (pipeline: GLuint, program: GLuint) #foreign;
	CreateShaderProgramv : (type: GLenum, count: GLsizei, strings: **GLchar) -> GLuint #foreign;
	BindProgramPipeline : (pipeline: GLuint) #foreign;
	DeleteProgramPipelines : (n: GLsizei, pipelines: *GLuint) #foreign;
	GenProgramPipelines : (n: GLsizei, pipelines: *GLuint) #foreign;
	IsProgramPipeline : (pipeline: GLuint) -> GLboolean #foreign;
	GetProgramPipelineiv : (pipeline: GLuint, pname: GLenum, params: *GLint) #foreign;
	// ProgramParameteri : (program: GLuint, pname: GLenum, value: GLint) #foreign;
	ProgramUniform1i : (program: GLuint, location: GLint, v0: GLint) #foreign;
	ProgramUniform1iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	ProgramUniform1f : (program: GLuint, location: GLint, v0: GLfloat) #foreign;
	ProgramUniform1fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	ProgramUniform1d : (program: GLuint, location: GLint, v0: GLdouble) #foreign;
	ProgramUniform1dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	ProgramUniform1ui : (program: GLuint, location: GLint, v0: GLuint) #foreign;
	ProgramUniform1uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	ProgramUniform2i : (program: GLuint, location: GLint, v0: GLint, v1: GLint) #foreign;
	ProgramUniform2iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	ProgramUniform2f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) #foreign;
	ProgramUniform2fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	ProgramUniform2d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) #foreign;
	ProgramUniform2dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	ProgramUniform2ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) #foreign;
	ProgramUniform2uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	ProgramUniform3i : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) #foreign;
	ProgramUniform3iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	ProgramUniform3f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #foreign;
	ProgramUniform3fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	ProgramUniform3d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) #foreign;
	ProgramUniform3dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	ProgramUniform3ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #foreign;
	ProgramUniform3uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	ProgramUniform4i : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #foreign;
	ProgramUniform4iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	ProgramUniform4f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #foreign;
	ProgramUniform4fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	ProgramUniform4d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) #foreign;
	ProgramUniform4dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	ProgramUniform4ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #foreign;
	ProgramUniform4uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	ProgramUniformMatrix2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix2x3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix3x2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix2x4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix4x2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix3x4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix4x3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix2x3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix3x2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix2x4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix4x2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix3x4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix4x3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ValidateProgramPipeline : (pipeline: GLuint) #foreign;
	GetProgramPipelineInfoLog : (pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #foreign;
	VertexAttribL1d : (index: GLuint, x: GLdouble) #foreign;
	VertexAttribL2d : (index: GLuint, x: GLdouble, y: GLdouble) #foreign;
	VertexAttribL3d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	VertexAttribL4d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	VertexAttribL1dv : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttribL2dv : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttribL3dv : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttribL4dv : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttribLPointer : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	GetVertexAttribLdv : (index: GLuint, pname: GLenum, params: *GLdouble) #foreign;
	ViewportArrayv : (first: GLuint, count: GLsizei, v: *GLfloat) #foreign;
	ViewportIndexedf : (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) #foreign;
	ViewportIndexedfv : (index: GLuint, v: *GLfloat) #foreign;
	ScissorArrayv : (first: GLuint, count: GLsizei, v: *GLint) #foreign;
	ScissorIndexed : (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) #foreign;
	ScissorIndexedv : (index: GLuint, v: *GLint) #foreign;
	DepthRangeArrayv : (first: GLuint, count: GLsizei, v: *GLdouble) #foreign;
	DepthRangeIndexed : (index: GLuint, n: GLdouble, f: GLdouble) #foreign;
	GetFloati_v : (target: GLenum, index: GLuint, data: *GLfloat) #foreign;
	GetDoublei_v : (target: GLenum, index: GLuint, data: *GLdouble) #foreign;
	
	// VERSION_4_2
	DrawArraysInstancedBaseInstance : (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) #foreign;
	DrawElementsInstancedBaseInstance : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, baseinstance: GLuint) #foreign;
	DrawElementsInstancedBaseVertexBaseInstance : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) #foreign;
	GetInternalformativ : (target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint) #foreign;
	GetActiveAtomicCounterBufferiv : (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *GLint) #foreign;
	BindImageTexture : (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) #foreign;
	MemoryBarrier : (barriers: GLbitfield) #foreign;
	TexStorage1D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) #foreign;
	TexStorage2D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	TexStorage3D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) #foreign;
	DrawTransformFeedbackInstanced : (mode: GLenum, id: GLuint, instancecount: GLsizei) #foreign;
	DrawTransformFeedbackStreamInstanced : (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) #foreign;
	
	// VERSION_4_3
	ClearBufferData : (target: GLenum, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) #foreign;
	ClearBufferSubData : (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) #foreign;
	DispatchCompute : (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) #foreign;
	DispatchComputeIndirect : (indirect: GLintptr) #foreign;
	CopyImageSubData : (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) #foreign;
	FramebufferParameteri : (target: GLenum, pname: GLenum, param: GLint) #foreign;
	GetFramebufferParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetInternalformati64v : (target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint64) #foreign;
	InvalidateTexSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) #foreign;
	InvalidateTexImage : (texture: GLuint, level: GLint) #foreign;
	InvalidateBufferSubData : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) #foreign;
	InvalidateBufferData : (buffer: GLuint) #foreign;
	InvalidateFramebuffer : (target: GLenum, numAttachments: GLsizei, attachments: *GLenum) #foreign;
	InvalidateSubFramebuffer : (target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	MultiDrawArraysIndirect : (mode: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) #foreign;
	MultiDrawElementsIndirect : (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) #foreign;
	GetProgramInterfaceiv : (program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetProgramResourceIndex : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint #foreign;
	GetProgramResourceName : (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) #foreign;
	GetProgramResourceiv : (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) #foreign;
	GetProgramResourceLocation : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #foreign;
	GetProgramResourceLocationIndex : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #foreign;
	ShaderStorageBlockBinding : (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) #foreign;
	TexBufferRange : (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
	TexStorage2DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	TexStorage3DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	TextureView : (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) #foreign;
	BindVertexBuffer : (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) #foreign;
	VertexAttribFormat : (attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) #foreign;
	VertexAttribIFormat : (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
	VertexAttribLFormat : (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
	VertexAttribBinding : (attribindex: GLuint, bindingindex: GLuint) #foreign;
	VertexBindingDivisor : (bindingindex: GLuint, divisor: GLuint) #foreign;
	DebugMessageControl : (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #foreign;
	DebugMessageInsert : (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) #foreign;
	DebugMessageCallback : (callback: GLDEBUGPROC, userParam: *void) #foreign;
	GetDebugMessageLog : (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #foreign;
	PushDebugGroup : (source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) #foreign;
	PopDebugGroup : () #foreign;
	ObjectLabel : (identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) #foreign;
	GetObjectLabel : (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;
	ObjectPtrLabel : (ptr: *void, length: GLsizei, label: *GLchar) #foreign;
	GetObjectPtrLabel : (ptr: *void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;
	// GetPointerv : (pname: GLenum, params: **void) #foreign;
	
	// VERSION_4_4
	BufferStorage : (target: GLenum, size: GLsizeiptr, data: *void, flags: GLbitfield) #foreign;
	ClearTexImage : (texture: GLuint, level: GLint, format: GLenum, type: GLenum, data: *void) #foreign;
	ClearTexSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, data: *void) #foreign;
	BindBuffersBase : (target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint) #foreign;
	BindBuffersRange : (target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, sizes: *GLsizeiptr) #foreign;
	BindTextures : (first: GLuint, count: GLsizei, textures: *GLuint) #foreign;
	BindSamplers : (first: GLuint, count: GLsizei, samplers: *GLuint) #foreign;
	BindImageTextures : (first: GLuint, count: GLsizei, textures: *GLuint) #foreign;
	BindVertexBuffers : (first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) #foreign;
	
	// VERSION_4_5
	ClipControl : (origin: GLenum, depth: GLenum) #foreign;
	CreateTransformFeedbacks : (n: GLsizei, ids: *GLuint) #foreign;
	TransformFeedbackBufferBase : (xfb: GLuint, index: GLuint, buffer: GLuint) #foreign;
	TransformFeedbackBufferRange : (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
	GetTransformFeedbackiv : (xfb: GLuint, pname: GLenum, param: *GLint) #foreign;
	GetTransformFeedbacki_v : (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint) #foreign;
	GetTransformFeedbacki64_v : (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint64) #foreign;
	CreateBuffers : (n: GLsizei, buffers: *GLuint) #foreign;
	NamedBufferStorage : (buffer: GLuint, size: GLsizeiptr, data: *void, flags: GLbitfield) #foreign;
	NamedBufferData : (buffer: GLuint, size: GLsizeiptr, data: *void, usage: GLenum) #foreign;
	NamedBufferSubData : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
	CopyNamedBufferSubData : (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #foreign;
	ClearNamedBufferData : (buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) #foreign;
	ClearNamedBufferSubData : (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) #foreign;
	MapNamedBuffer : (buffer: GLuint, access: GLenum) #foreign;
	MapNamedBufferRange : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) #foreign;
	UnmapNamedBuffer : (buffer: GLuint) -> GLboolean #foreign;
	FlushMappedNamedBufferRange : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) #foreign;
	GetNamedBufferParameteriv : (buffer: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetNamedBufferParameteri64v : (buffer: GLuint, pname: GLenum, params: *GLint64) #foreign;
	GetNamedBufferPointerv : (buffer: GLuint, pname: GLenum, params: **void) #foreign;
	GetNamedBufferSubData : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
	CreateFramebuffers : (n: GLsizei, framebuffers: *GLuint) #foreign;
	NamedFramebufferRenderbuffer : (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #foreign;
	NamedFramebufferParameteri : (framebuffer: GLuint, pname: GLenum, param: GLint) #foreign;
	NamedFramebufferTexture : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) #foreign;
	NamedFramebufferTextureLayer : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #foreign;
	NamedFramebufferDrawBuffer : (framebuffer: GLuint, buf: GLenum) #foreign;
	NamedFramebufferDrawBuffers : (framebuffer: GLuint, n: GLsizei, bufs: *GLenum) #foreign;
	NamedFramebufferReadBuffer : (framebuffer: GLuint, src: GLenum) #foreign;
	InvalidateNamedFramebufferData : (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum) #foreign;
	InvalidateNamedFramebufferSubData : (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	ClearNamedFramebufferiv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLint) #foreign;
	ClearNamedFramebufferuiv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLuint) #foreign;
	ClearNamedFramebufferfv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLfloat) #foreign;
	ClearNamedFramebufferfi : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) #foreign;
	BlitNamedFramebuffer : (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #foreign;
	CheckNamedFramebufferStatus : (framebuffer: GLuint, target: GLenum) -> GLenum #foreign;
	GetNamedFramebufferParameteriv : (framebuffer: GLuint, pname: GLenum, param: *GLint) #foreign;
	GetNamedFramebufferAttachmentParameteriv : (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) #foreign;
	CreateRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #foreign;
	NamedRenderbufferStorage : (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	NamedRenderbufferStorageMultisample : (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	GetNamedRenderbufferParameteriv : (renderbuffer: GLuint, pname: GLenum, params: *GLint) #foreign;
	CreateTextures : (target: GLenum, n: GLsizei, textures: *GLuint) #foreign;
	TextureBuffer : (texture: GLuint, internalformat: GLenum, buffer: GLuint) #foreign;
	TextureBufferRange : (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
	TextureStorage1D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) #foreign;
	TextureStorage2D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	TextureStorage3D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) #foreign;
	TextureStorage2DMultisample : (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	TextureStorage3DMultisample : (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	TextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	TextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	TextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	CompressedTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
	CompressedTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
	CompressedTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
	CopyTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #foreign;
	CopyTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	CopyTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	TextureParameterf : (texture: GLuint, pname: GLenum, param: GLfloat) #foreign;
	TextureParameterfv : (texture: GLuint, pname: GLenum, param: *GLfloat) #foreign;
	TextureParameteri : (texture: GLuint, pname: GLenum, param: GLint) #foreign;
	TextureParameterIiv : (texture: GLuint, pname: GLenum, params: *GLint) #foreign;
	TextureParameterIuiv : (texture: GLuint, pname: GLenum, params: *GLuint) #foreign;
	TextureParameteriv : (texture: GLuint, pname: GLenum, param: *GLint) #foreign;
	GenerateTextureMipmap : (texture: GLuint) #foreign;
	BindTextureUnit : (unit: GLuint, texture: GLuint) #foreign;
	GetTextureImage : (texture: GLuint, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #foreign;
	GetCompressedTextureImage : (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: *void) #foreign;
	GetTextureLevelParameterfv : (texture: GLuint, level: GLint, pname: GLenum, params: *GLfloat) #foreign;
	GetTextureLevelParameteriv : (texture: GLuint, level: GLint, pname: GLenum, params: *GLint) #foreign;
	GetTextureParameterfv : (texture: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	GetTextureParameterIiv : (texture: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetTextureParameterIuiv : (texture: GLuint, pname: GLenum, params: *GLuint) #foreign;
	GetTextureParameteriv : (texture: GLuint, pname: GLenum, params: *GLint) #foreign;
	CreateVertexArrays : (n: GLsizei, arrays: *GLuint) #foreign;
	DisableVertexArrayAttrib : (vaobj: GLuint, index: GLuint) #foreign;
	EnableVertexArrayAttrib : (vaobj: GLuint, index: GLuint) #foreign;
	VertexArrayElementBuffer : (vaobj: GLuint, buffer: GLuint) #foreign;
	VertexArrayVertexBuffer : (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) #foreign;
	VertexArrayVertexBuffers : (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) #foreign;
	VertexArrayAttribBinding : (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) #foreign;
	VertexArrayAttribFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) #foreign;
	VertexArrayAttribIFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
	VertexArrayAttribLFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
	VertexArrayBindingDivisor : (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) #foreign;
	GetVertexArrayiv : (vaobj: GLuint, pname: GLenum, param: *GLint) #foreign;
	GetVertexArrayIndexediv : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) #foreign;
	GetVertexArrayIndexed64iv : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint64) #foreign;
	CreateSamplers : (n: GLsizei, samplers: *GLuint) #foreign;
	CreateProgramPipelines : (n: GLsizei, pipelines: *GLuint) #foreign;
	CreateQueries : (target: GLenum, n: GLsizei, ids: *GLuint) #foreign;
	GetQueryBufferObjecti64v : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
	GetQueryBufferObjectiv : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
	GetQueryBufferObjectui64v : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
	GetQueryBufferObjectuiv : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
	MemoryBarrierByRegion : (barriers: GLbitfield) #foreign;
	GetTextureSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #foreign;
	GetCompressedTextureSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: *void) #foreign;
	GetGraphicsResetStatus : () -> GLenum #foreign;
	GetnCompressedTexImage : (target: GLenum, lod: GLint, bufSize: GLsizei, pixels: *void) #foreign;
	GetnTexImage : (target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #foreign;
	GetnUniformdv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) #foreign;
	GetnUniformfv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) #foreign;
	GetnUniformiv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) #foreign;
	GetnUniformuiv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) #foreign;
	ReadnPixels : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) #foreign;
	GetnMapdv : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLdouble) #foreign;
	GetnMapfv : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLfloat) #foreign;
	GetnMapiv : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLint) #foreign;
	GetnPixelMapfv : (map: GLenum, bufSize: GLsizei, values: *GLfloat) #foreign;
	GetnPixelMapuiv : (map: GLenum, bufSize: GLsizei, values: *GLuint) #foreign;
	GetnPixelMapusv : (map: GLenum, bufSize: GLsizei, values: *GLushort) #foreign;
	GetnPolygonStipple : (bufSize: GLsizei, pattern: *GLubyte) #foreign;
	GetnColorTable : (target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, table: *void) #foreign;
	GetnConvolutionFilter : (target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, image: *void) #foreign;
	GetnSeparableFilter : (target: GLenum, format: GLenum, type: GLenum, rowBufSize: GLsizei, row: *void, columnBufSize: GLsizei, column: *void, span: *void) #foreign;
	GetnHistogram : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: *void) #foreign;
	GetnMinmax : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: *void) #foreign;
	TextureBarrier : () #foreign;
	
	// VERSION_4_6
	SpecializeShader : (shader: GLuint, pEntryPoint: *GLchar, numSpecializationConstants: GLuint, pConstantIndex: *GLuint, pConstantValue: *GLuint) #foreign;
	MultiDrawArraysIndirectCount : (mode: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) #foreign;
	MultiDrawElementsIndirectCount : (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) #foreign;
	PolygonOffsetClamp : (factor: GLfloat, units: GLfloat, clamp: GLfloat) #foreign;
	
	
	// Extension flags:
	
	GL_3DFX_multisample : bool;
	GL_3DFX_tbuffer : bool;
	GL_3DFX_texture_compression_FXT1 : bool;
	AMD_blend_minmax_factor : bool;
	AMD_conservative_depth : bool;
	AMD_debug_output : bool;
	AMD_depth_clamp_separate : bool;
	AMD_draw_buffers_blend : bool;
	AMD_framebuffer_sample_positions : bool;
	AMD_gcn_shader : bool;
	AMD_gpu_shader_half_float : bool;
	AMD_gpu_shader_int16 : bool;
	AMD_gpu_shader_int64 : bool;
	AMD_interleaved_elements : bool;
	AMD_multi_draw_indirect : bool;
	AMD_name_gen_delete : bool;
	AMD_occlusion_query_event : bool;
	AMD_performance_monitor : bool;
	AMD_pinned_memory : bool;
	AMD_query_buffer_object : bool;
	AMD_sample_positions : bool;
	AMD_seamless_cubemap_per_texture : bool;
	AMD_shader_atomic_counter_ops : bool;
	AMD_shader_ballot : bool;
	AMD_shader_explicit_vertex_parameter : bool;
	AMD_shader_gpu_shader_half_float_fetch : bool;
	AMD_shader_image_load_store_lod : bool;
	AMD_shader_stencil_export : bool;
	AMD_shader_trinary_minmax : bool;
	AMD_sparse_texture : bool;
	AMD_stencil_operation_extended : bool;
	AMD_texture_gather_bias_lod : bool;
	AMD_texture_texture4 : bool;
	AMD_transform_feedback3_lines_triangles : bool;
	AMD_transform_feedback4 : bool;
	AMD_vertex_shader_layer : bool;
	AMD_vertex_shader_tessellator : bool;
	AMD_vertex_shader_viewport_index : bool;
	APPLE_aux_depth_stencil : bool;
	APPLE_client_storage : bool;
	APPLE_element_array : bool;
	APPLE_fence : bool;
	APPLE_float_pixels : bool;
	APPLE_flush_buffer_range : bool;
	APPLE_object_purgeable : bool;
	APPLE_rgb_422 : bool;
	APPLE_row_bytes : bool;
	APPLE_specular_vector : bool;
	APPLE_texture_range : bool;
	APPLE_transform_hint : bool;
	APPLE_vertex_array_object : bool;
	APPLE_vertex_array_range : bool;
	APPLE_vertex_program_evaluators : bool;
	APPLE_ycbcr_422 : bool;
	ARB_ES2_compatibility : bool;
	ARB_ES3_1_compatibility : bool;
	ARB_ES3_2_compatibility : bool;
	ARB_ES3_compatibility : bool;
	ARB_arrays_of_arrays : bool;
	ARB_base_instance : bool;
	ARB_bindless_texture : bool;
	ARB_blend_func_extended : bool;
	ARB_buffer_storage : bool;
	ARB_cl_event : bool;
	ARB_clear_buffer_object : bool;
	ARB_clear_texture : bool;
	ARB_clip_control : bool;
	ARB_color_buffer_float : bool;
	ARB_compatibility : bool;
	ARB_compressed_texture_pixel_storage : bool;
	ARB_compute_shader : bool;
	ARB_compute_variable_group_size : bool;
	ARB_conditional_render_inverted : bool;
	ARB_conservative_depth : bool;
	ARB_copy_buffer : bool;
	ARB_copy_image : bool;
	ARB_cull_distance : bool;
	ARB_debug_output : bool;
	ARB_depth_buffer_float : bool;
	ARB_depth_clamp : bool;
	ARB_depth_texture : bool;
	ARB_derivative_control : bool;
	ARB_direct_state_access : bool;
	ARB_draw_buffers : bool;
	ARB_draw_buffers_blend : bool;
	ARB_draw_elements_base_vertex : bool;
	ARB_draw_indirect : bool;
	ARB_draw_instanced : bool;
	ARB_enhanced_layouts : bool;
	ARB_explicit_attrib_location : bool;
	ARB_explicit_uniform_location : bool;
	ARB_fragment_coord_conventions : bool;
	ARB_fragment_layer_viewport : bool;
	ARB_fragment_program : bool;
	ARB_fragment_program_shadow : bool;
	ARB_fragment_shader : bool;
	ARB_fragment_shader_interlock : bool;
	ARB_framebuffer_no_attachments : bool;
	ARB_framebuffer_object : bool;
	ARB_framebuffer_sRGB : bool;
	ARB_geometry_shader4 : bool;
	ARB_get_program_binary : bool;
	ARB_get_texture_sub_image : bool;
	ARB_gl_spirv : bool;
	ARB_gpu_shader5 : bool;
	ARB_gpu_shader_fp64 : bool;
	ARB_gpu_shader_int64 : bool;
	ARB_half_float_pixel : bool;
	ARB_half_float_vertex : bool;
	ARB_imaging : bool;
	ARB_indirect_parameters : bool;
	ARB_instanced_arrays : bool;
	ARB_internalformat_query : bool;
	ARB_internalformat_query2 : bool;
	ARB_invalidate_subdata : bool;
	ARB_map_buffer_alignment : bool;
	ARB_map_buffer_range : bool;
	ARB_matrix_palette : bool;
	ARB_multi_bind : bool;
	ARB_multi_draw_indirect : bool;
	ARB_multisample : bool;
	ARB_multitexture : bool;
	ARB_occlusion_query : bool;
	ARB_occlusion_query2 : bool;
	ARB_parallel_shader_compile : bool;
	ARB_pipeline_statistics_query : bool;
	ARB_pixel_buffer_object : bool;
	ARB_point_parameters : bool;
	ARB_point_sprite : bool;
	ARB_polygon_offset_clamp : bool;
	ARB_post_depth_coverage : bool;
	ARB_program_interface_query : bool;
	ARB_provoking_vertex : bool;
	ARB_query_buffer_object : bool;
	ARB_robust_buffer_access_behavior : bool;
	ARB_robustness : bool;
	ARB_robustness_isolation : bool;
	ARB_sample_locations : bool;
	ARB_sample_shading : bool;
	ARB_sampler_objects : bool;
	ARB_seamless_cube_map : bool;
	ARB_seamless_cubemap_per_texture : bool;
	ARB_separate_shader_objects : bool;
	ARB_shader_atomic_counter_ops : bool;
	ARB_shader_atomic_counters : bool;
	ARB_shader_ballot : bool;
	ARB_shader_bit_encoding : bool;
	ARB_shader_clock : bool;
	ARB_shader_draw_parameters : bool;
	ARB_shader_group_vote : bool;
	ARB_shader_image_load_store : bool;
	ARB_shader_image_size : bool;
	ARB_shader_objects : bool;
	ARB_shader_precision : bool;
	ARB_shader_stencil_export : bool;
	ARB_shader_storage_buffer_object : bool;
	ARB_shader_subroutine : bool;
	ARB_shader_texture_image_samples : bool;
	ARB_shader_texture_lod : bool;
	ARB_shader_viewport_layer_array : bool;
	ARB_shading_language_100 : bool;
	ARB_shading_language_420pack : bool;
	ARB_shading_language_include : bool;
	ARB_shading_language_packing : bool;
	ARB_shadow : bool;
	ARB_shadow_ambient : bool;
	ARB_sparse_buffer : bool;
	ARB_sparse_texture : bool;
	ARB_sparse_texture2 : bool;
	ARB_sparse_texture_clamp : bool;
	ARB_spirv_extensions : bool;
	ARB_stencil_texturing : bool;
	ARB_sync : bool;
	ARB_tessellation_shader : bool;
	ARB_texture_barrier : bool;
	ARB_texture_border_clamp : bool;
	ARB_texture_buffer_object : bool;
	ARB_texture_buffer_object_rgb32 : bool;
	ARB_texture_buffer_range : bool;
	ARB_texture_compression : bool;
	ARB_texture_compression_bptc : bool;
	ARB_texture_compression_rgtc : bool;
	ARB_texture_cube_map : bool;
	ARB_texture_cube_map_array : bool;
	ARB_texture_env_add : bool;
	ARB_texture_env_combine : bool;
	ARB_texture_env_crossbar : bool;
	ARB_texture_env_dot3 : bool;
	ARB_texture_filter_anisotropic : bool;
	ARB_texture_filter_minmax : bool;
	ARB_texture_float : bool;
	ARB_texture_gather : bool;
	ARB_texture_mirror_clamp_to_edge : bool;
	ARB_texture_mirrored_repeat : bool;
	ARB_texture_multisample : bool;
	ARB_texture_non_power_of_two : bool;
	ARB_texture_query_levels : bool;
	ARB_texture_query_lod : bool;
	ARB_texture_rectangle : bool;
	ARB_texture_rg : bool;
	ARB_texture_rgb10_a2ui : bool;
	ARB_texture_stencil8 : bool;
	ARB_texture_storage : bool;
	ARB_texture_storage_multisample : bool;
	ARB_texture_swizzle : bool;
	ARB_texture_view : bool;
	ARB_timer_query : bool;
	ARB_transform_feedback2 : bool;
	ARB_transform_feedback3 : bool;
	ARB_transform_feedback_instanced : bool;
	ARB_transform_feedback_overflow_query : bool;
	ARB_transpose_matrix : bool;
	ARB_uniform_buffer_object : bool;
	ARB_vertex_array_bgra : bool;
	ARB_vertex_array_object : bool;
	ARB_vertex_attrib_64bit : bool;
	ARB_vertex_attrib_binding : bool;
	ARB_vertex_blend : bool;
	ARB_vertex_buffer_object : bool;
	ARB_vertex_program : bool;
	ARB_vertex_shader : bool;
	ARB_vertex_type_10f_11f_11f_rev : bool;
	ARB_vertex_type_2_10_10_10_rev : bool;
	ARB_viewport_array : bool;
	ARB_window_pos : bool;
	ATI_draw_buffers : bool;
	ATI_element_array : bool;
	ATI_envmap_bumpmap : bool;
	ATI_fragment_shader : bool;
	ATI_map_object_buffer : bool;
	ATI_meminfo : bool;
	ATI_pixel_format_float : bool;
	ATI_pn_triangles : bool;
	ATI_separate_stencil : bool;
	ATI_text_fragment_shader : bool;
	ATI_texture_env_combine3 : bool;
	ATI_texture_float : bool;
	ATI_texture_mirror_once : bool;
	ATI_vertex_array_object : bool;
	ATI_vertex_attrib_array_object : bool;
	ATI_vertex_streams : bool;
	EXT_422_pixels : bool;
	EXT_abgr : bool;
	EXT_bgra : bool;
	EXT_bindable_uniform : bool;
	EXT_blend_color : bool;
	EXT_blend_equation_separate : bool;
	EXT_blend_func_separate : bool;
	EXT_blend_logic_op : bool;
	EXT_blend_minmax : bool;
	EXT_blend_subtract : bool;
	EXT_clip_volume_hint : bool;
	EXT_cmyka : bool;
	EXT_color_subtable : bool;
	EXT_compiled_vertex_array : bool;
	EXT_convolution : bool;
	EXT_coordinate_frame : bool;
	EXT_copy_texture : bool;
	EXT_cull_vertex : bool;
	EXT_debug_label : bool;
	EXT_debug_marker : bool;
	EXT_depth_bounds_test : bool;
	EXT_direct_state_access : bool;
	EXT_draw_buffers2 : bool;
	EXT_draw_instanced : bool;
	EXT_draw_range_elements : bool;
	EXT_external_buffer : bool;
	EXT_fog_coord : bool;
	EXT_framebuffer_blit : bool;
	EXT_framebuffer_multisample : bool;
	EXT_framebuffer_multisample_blit_scaled : bool;
	EXT_framebuffer_object : bool;
	EXT_framebuffer_sRGB : bool;
	EXT_geometry_shader4 : bool;
	EXT_gpu_program_parameters : bool;
	EXT_gpu_shader4 : bool;
	EXT_histogram : bool;
	EXT_index_array_formats : bool;
	EXT_index_func : bool;
	EXT_index_material : bool;
	EXT_index_texture : bool;
	EXT_light_texture : bool;
	EXT_memory_object : bool;
	EXT_memory_object_fd : bool;
	EXT_memory_object_win32 : bool;
	EXT_misc_attribute : bool;
	EXT_multi_draw_arrays : bool;
	EXT_multisample : bool;
	EXT_packed_depth_stencil : bool;
	EXT_packed_float : bool;
	EXT_packed_pixels : bool;
	EXT_paletted_texture : bool;
	EXT_pixel_buffer_object : bool;
	EXT_pixel_transform : bool;
	EXT_pixel_transform_color_table : bool;
	EXT_point_parameters : bool;
	EXT_polygon_offset : bool;
	EXT_polygon_offset_clamp : bool;
	EXT_post_depth_coverage : bool;
	EXT_provoking_vertex : bool;
	EXT_raster_multisample : bool;
	EXT_rescale_normal : bool;
	EXT_secondary_color : bool;
	EXT_semaphore : bool;
	EXT_semaphore_fd : bool;
	EXT_semaphore_win32 : bool;
	EXT_separate_shader_objects : bool;
	EXT_separate_specular_color : bool;
	EXT_shader_framebuffer_fetch : bool;
	EXT_shader_framebuffer_fetch_non_coherent : bool;
	EXT_shader_image_load_formatted : bool;
	EXT_shader_image_load_store : bool;
	EXT_shader_integer_mix : bool;
	EXT_shadow_funcs : bool;
	EXT_shared_texture_palette : bool;
	EXT_sparse_texture2 : bool;
	EXT_stencil_clear_tag : bool;
	EXT_stencil_two_side : bool;
	EXT_stencil_wrap : bool;
	EXT_subtexture : bool;
	EXT_texture : bool;
	EXT_texture3D : bool;
	EXT_texture_array : bool;
	EXT_texture_buffer_object : bool;
	EXT_texture_compression_latc : bool;
	EXT_texture_compression_rgtc : bool;
	EXT_texture_compression_s3tc : bool;
	EXT_texture_cube_map : bool;
	EXT_texture_env_add : bool;
	EXT_texture_env_combine : bool;
	EXT_texture_env_dot3 : bool;
	EXT_texture_filter_anisotropic : bool;
	EXT_texture_filter_minmax : bool;
	EXT_texture_integer : bool;
	EXT_texture_lod_bias : bool;
	EXT_texture_mirror_clamp : bool;
	EXT_texture_object : bool;
	EXT_texture_perturb_normal : bool;
	EXT_texture_sRGB : bool;
	EXT_texture_sRGB_decode : bool;
	EXT_texture_shared_exponent : bool;
	EXT_texture_snorm : bool;
	EXT_texture_swizzle : bool;
	EXT_timer_query : bool;
	EXT_transform_feedback : bool;
	EXT_vertex_array : bool;
	EXT_vertex_array_bgra : bool;
	EXT_vertex_attrib_64bit : bool;
	EXT_vertex_shader : bool;
	EXT_vertex_weighting : bool;
	EXT_win32_keyed_mutex : bool;
	EXT_window_rectangles : bool;
	EXT_x11_sync_object : bool;
	GREMEDY_frame_terminator : bool;
	GREMEDY_string_marker : bool;
	HP_convolution_border_modes : bool;
	HP_image_transform : bool;
	HP_occlusion_test : bool;
	HP_texture_lighting : bool;
	IBM_cull_vertex : bool;
	IBM_multimode_draw_arrays : bool;
	IBM_rasterpos_clip : bool;
	IBM_static_data : bool;
	IBM_texture_mirrored_repeat : bool;
	IBM_vertex_array_lists : bool;
	INGR_blend_func_separate : bool;
	INGR_color_clamp : bool;
	INGR_interlace_read : bool;
	INTEL_conservative_rasterization : bool;
	INTEL_fragment_shader_ordering : bool;
	INTEL_framebuffer_CMAA : bool;
	INTEL_map_texture : bool;
	INTEL_parallel_arrays : bool;
	INTEL_performance_query : bool;
	KHR_blend_equation_advanced : bool;
	KHR_blend_equation_advanced_coherent : bool;
	KHR_context_flush_control : bool;
	KHR_debug : bool;
	KHR_no_error : bool;
	KHR_parallel_shader_compile : bool;
	KHR_robust_buffer_access_behavior : bool;
	KHR_robustness : bool;
	KHR_texture_compression_astc_hdr : bool;
	KHR_texture_compression_astc_ldr : bool;
	KHR_texture_compression_astc_sliced_3d : bool;
	MESAX_texture_stack : bool;
	MESA_pack_invert : bool;
	MESA_program_binary_formats : bool;
	MESA_resize_buffers : bool;
	MESA_shader_integer_functions : bool;
	MESA_tile_raster_order : bool;
	MESA_window_pos : bool;
	MESA_ycbcr_texture : bool;
	NVX_blend_equation_advanced_multi_draw_buffers : bool;
	NVX_conditional_render : bool;
	NVX_gpu_memory_info : bool;
	NVX_linked_gpu_multicast : bool;
	NV_alpha_to_coverage_dither_control : bool;
	NV_bindless_multi_draw_indirect : bool;
	NV_bindless_multi_draw_indirect_count : bool;
	NV_bindless_texture : bool;
	NV_blend_equation_advanced : bool;
	NV_blend_equation_advanced_coherent : bool;
	NV_blend_minmax_factor : bool;
	NV_blend_square : bool;
	NV_clip_space_w_scaling : bool;
	NV_command_list : bool;
	NV_compute_program5 : bool;
	NV_conditional_render : bool;
	NV_conservative_raster : bool;
	NV_conservative_raster_dilate : bool;
	NV_conservative_raster_pre_snap : bool;
	NV_conservative_raster_pre_snap_triangles : bool;
	NV_conservative_raster_underestimation : bool;
	NV_copy_depth_to_color : bool;
	NV_copy_image : bool;
	NV_deep_texture3D : bool;
	NV_depth_buffer_float : bool;
	NV_depth_clamp : bool;
	NV_draw_texture : bool;
	NV_draw_vulkan_image : bool;
	NV_evaluators : bool;
	NV_explicit_multisample : bool;
	NV_fence : bool;
	NV_fill_rectangle : bool;
	NV_float_buffer : bool;
	NV_fog_distance : bool;
	NV_fragment_coverage_to_color : bool;
	NV_fragment_program : bool;
	NV_fragment_program2 : bool;
	NV_fragment_program4 : bool;
	NV_fragment_program_option : bool;
	NV_fragment_shader_interlock : bool;
	NV_framebuffer_mixed_samples : bool;
	NV_framebuffer_multisample_coverage : bool;
	NV_geometry_program4 : bool;
	NV_geometry_shader4 : bool;
	NV_geometry_shader_passthrough : bool;
	NV_gpu_multicast : bool;
	NV_gpu_program4 : bool;
	NV_gpu_program5 : bool;
	NV_gpu_program5_mem_extended : bool;
	NV_gpu_shader5 : bool;
	NV_half_float : bool;
	NV_internalformat_sample_query : bool;
	NV_light_max_exponent : bool;
	NV_multisample_coverage : bool;
	NV_multisample_filter_hint : bool;
	NV_occlusion_query : bool;
	NV_packed_depth_stencil : bool;
	NV_parameter_buffer_object : bool;
	NV_parameter_buffer_object2 : bool;
	NV_path_rendering : bool;
	NV_path_rendering_shared_edge : bool;
	NV_pixel_data_range : bool;
	NV_point_sprite : bool;
	NV_present_video : bool;
	NV_primitive_restart : bool;
	NV_query_resource : bool;
	NV_query_resource_tag : bool;
	NV_register_combiners : bool;
	NV_register_combiners2 : bool;
	NV_robustness_video_memory_purge : bool;
	NV_sample_locations : bool;
	NV_sample_mask_override_coverage : bool;
	NV_shader_atomic_counters : bool;
	NV_shader_atomic_float : bool;
	NV_shader_atomic_float64 : bool;
	NV_shader_atomic_fp16_vector : bool;
	NV_shader_atomic_int64 : bool;
	NV_shader_buffer_load : bool;
	NV_shader_buffer_store : bool;
	NV_shader_storage_buffer_object : bool;
	NV_shader_thread_group : bool;
	NV_shader_thread_shuffle : bool;
	NV_stereo_view_rendering : bool;
	NV_tessellation_program5 : bool;
	NV_texgen_emboss : bool;
	NV_texgen_reflection : bool;
	NV_texture_barrier : bool;
	NV_texture_compression_vtc : bool;
	NV_texture_env_combine4 : bool;
	NV_texture_expand_normal : bool;
	NV_texture_multisample : bool;
	NV_texture_rectangle : bool;
	NV_texture_rectangle_compressed : bool;
	NV_texture_shader : bool;
	NV_texture_shader2 : bool;
	NV_texture_shader3 : bool;
	NV_transform_feedback : bool;
	NV_transform_feedback2 : bool;
	NV_uniform_buffer_unified_memory : bool;
	NV_vdpau_interop : bool;
	NV_vertex_array_range : bool;
	NV_vertex_array_range2 : bool;
	NV_vertex_attrib_integer_64bit : bool;
	NV_vertex_buffer_unified_memory : bool;
	NV_vertex_program : bool;
	NV_vertex_program1_1 : bool;
	NV_vertex_program2 : bool;
	NV_vertex_program2_option : bool;
	NV_vertex_program3 : bool;
	NV_vertex_program4 : bool;
	NV_video_capture : bool;
	NV_viewport_array2 : bool;
	NV_viewport_swizzle : bool;
	OES_byte_coordinates : bool;
	OES_compressed_paletted_texture : bool;
	OES_fixed_point : bool;
	OES_query_matrix : bool;
	OES_read_format : bool;
	OES_single_precision : bool;
	OML_interlace : bool;
	OML_resample : bool;
	OML_subsample : bool;
	OVR_multiview : bool;
	OVR_multiview2 : bool;
	PGI_misc_hints : bool;
	PGI_vertex_hints : bool;
	REND_screen_coordinates : bool;
	S3_s3tc : bool;
	SGIS_detail_texture : bool;
	SGIS_fog_function : bool;
	SGIS_generate_mipmap : bool;
	SGIS_multisample : bool;
	SGIS_pixel_texture : bool;
	SGIS_point_line_texgen : bool;
	SGIS_point_parameters : bool;
	SGIS_sharpen_texture : bool;
	SGIS_texture4D : bool;
	SGIS_texture_border_clamp : bool;
	SGIS_texture_color_mask : bool;
	SGIS_texture_edge_clamp : bool;
	SGIS_texture_filter4 : bool;
	SGIS_texture_lod : bool;
	SGIS_texture_select : bool;
	SGIX_async : bool;
	SGIX_async_histogram : bool;
	SGIX_async_pixel : bool;
	SGIX_blend_alpha_minmax : bool;
	SGIX_calligraphic_fragment : bool;
	SGIX_clipmap : bool;
	SGIX_convolution_accuracy : bool;
	SGIX_depth_pass_instrument : bool;
	SGIX_depth_texture : bool;
	SGIX_flush_raster : bool;
	SGIX_fog_offset : bool;
	SGIX_fragment_lighting : bool;
	SGIX_framezoom : bool;
	SGIX_igloo_interface : bool;
	SGIX_instruments : bool;
	SGIX_interlace : bool;
	SGIX_ir_instrument1 : bool;
	SGIX_list_priority : bool;
	SGIX_pixel_texture : bool;
	SGIX_pixel_tiles : bool;
	SGIX_polynomial_ffd : bool;
	SGIX_reference_plane : bool;
	SGIX_resample : bool;
	SGIX_scalebias_hint : bool;
	SGIX_shadow : bool;
	SGIX_shadow_ambient : bool;
	SGIX_sprite : bool;
	SGIX_subsample : bool;
	SGIX_tag_sample_buffer : bool;
	SGIX_texture_add_env : bool;
	SGIX_texture_coordinate_clamp : bool;
	SGIX_texture_lod_bias : bool;
	SGIX_texture_multi_buffer : bool;
	SGIX_texture_scale_bias : bool;
	SGIX_vertex_preclip : bool;
	SGIX_ycrcb : bool;
	SGIX_ycrcb_subsample : bool;
	SGIX_ycrcba : bool;
	SGI_color_matrix : bool;
	SGI_color_table : bool;
	SGI_texture_color_table : bool;
	SUNX_constant_data : bool;
	SUN_convolution_border_modes : bool;
	SUN_global_alpha : bool;
	SUN_mesh_array : bool;
	SUN_slice_accum : bool;
	SUN_triangle_list : bool;
	SUN_vertex : bool;
	WIN_phong_shading : bool;
	WIN_specular_fog : bool;
	
	// Extension enums:
	
	// 3DFX_multisample
	MULTISAMPLE_3DFX :: 0x86B2;
	SAMPLE_BUFFERS_3DFX :: 0x86B3;
	SAMPLES_3DFX :: 0x86B4;
	MULTISAMPLE_BIT_3DFX :: 0x20000000;
	
	// 3DFX_tbuffer
	
	// 3DFX_texture_compression_FXT1
	COMPRESSED_RGB_FXT1_3DFX :: 0x86B0;
	COMPRESSED_RGBA_FXT1_3DFX :: 0x86B1;
	
	// AMD_blend_minmax_factor
	FACTOR_MIN_AMD :: 0x901C;
	FACTOR_MAX_AMD :: 0x901D;
	
	// AMD_conservative_depth
	
	// AMD_debug_output
	MAX_DEBUG_MESSAGE_LENGTH_AMD :: 0x9143;
	MAX_DEBUG_LOGGED_MESSAGES_AMD :: 0x9144;
	DEBUG_LOGGED_MESSAGES_AMD :: 0x9145;
	DEBUG_SEVERITY_HIGH_AMD :: 0x9146;
	DEBUG_SEVERITY_MEDIUM_AMD :: 0x9147;
	DEBUG_SEVERITY_LOW_AMD :: 0x9148;
	DEBUG_CATEGORY_API_ERROR_AMD :: 0x9149;
	DEBUG_CATEGORY_WINDOW_SYSTEM_AMD :: 0x914A;
	DEBUG_CATEGORY_DEPRECATION_AMD :: 0x914B;
	DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD :: 0x914C;
	DEBUG_CATEGORY_PERFORMANCE_AMD :: 0x914D;
	DEBUG_CATEGORY_SHADER_COMPILER_AMD :: 0x914E;
	DEBUG_CATEGORY_APPLICATION_AMD :: 0x914F;
	DEBUG_CATEGORY_OTHER_AMD :: 0x9150;
	
	// AMD_depth_clamp_separate
	DEPTH_CLAMP_NEAR_AMD :: 0x901E;
	DEPTH_CLAMP_FAR_AMD :: 0x901F;
	
	// AMD_draw_buffers_blend
	
	// AMD_framebuffer_sample_positions
	SUBSAMPLE_DISTANCE_AMD :: 0x883F;
	PIXELS_PER_SAMPLE_PATTERN_X_AMD :: 0x91AE;
	PIXELS_PER_SAMPLE_PATTERN_Y_AMD :: 0x91AF;
	ALL_PIXELS_AMD :: 0xFFFFFFFF;
	
	// AMD_gcn_shader
	
	// AMD_gpu_shader_half_float
	FLOAT16_NV :: 0x8FF8;
	FLOAT16_VEC2_NV :: 0x8FF9;
	FLOAT16_VEC3_NV :: 0x8FFA;
	FLOAT16_VEC4_NV :: 0x8FFB;
	FLOAT16_MAT2_AMD :: 0x91C5;
	FLOAT16_MAT3_AMD :: 0x91C6;
	FLOAT16_MAT4_AMD :: 0x91C7;
	FLOAT16_MAT2x3_AMD :: 0x91C8;
	FLOAT16_MAT2x4_AMD :: 0x91C9;
	FLOAT16_MAT3x2_AMD :: 0x91CA;
	FLOAT16_MAT3x4_AMD :: 0x91CB;
	FLOAT16_MAT4x2_AMD :: 0x91CC;
	FLOAT16_MAT4x3_AMD :: 0x91CD;
	
	// AMD_gpu_shader_int16
	
	// AMD_gpu_shader_int64
	INT64_NV :: 0x140E;
	UNSIGNED_INT64_NV :: 0x140F;
	INT8_NV :: 0x8FE0;
	INT8_VEC2_NV :: 0x8FE1;
	INT8_VEC3_NV :: 0x8FE2;
	INT8_VEC4_NV :: 0x8FE3;
	INT16_NV :: 0x8FE4;
	INT16_VEC2_NV :: 0x8FE5;
	INT16_VEC3_NV :: 0x8FE6;
	INT16_VEC4_NV :: 0x8FE7;
	INT64_VEC2_NV :: 0x8FE9;
	INT64_VEC3_NV :: 0x8FEA;
	INT64_VEC4_NV :: 0x8FEB;
	UNSIGNED_INT8_NV :: 0x8FEC;
	UNSIGNED_INT8_VEC2_NV :: 0x8FED;
	UNSIGNED_INT8_VEC3_NV :: 0x8FEE;
	UNSIGNED_INT8_VEC4_NV :: 0x8FEF;
	UNSIGNED_INT16_NV :: 0x8FF0;
	UNSIGNED_INT16_VEC2_NV :: 0x8FF1;
	UNSIGNED_INT16_VEC3_NV :: 0x8FF2;
	UNSIGNED_INT16_VEC4_NV :: 0x8FF3;
	UNSIGNED_INT64_VEC2_NV :: 0x8FF5;
	UNSIGNED_INT64_VEC3_NV :: 0x8FF6;
	UNSIGNED_INT64_VEC4_NV :: 0x8FF7;
	// FLOAT16_NV :: 0x8FF8;
	// FLOAT16_VEC2_NV :: 0x8FF9;
	// FLOAT16_VEC3_NV :: 0x8FFA;
	// FLOAT16_VEC4_NV :: 0x8FFB;
	
	// AMD_interleaved_elements
	VERTEX_ELEMENT_SWIZZLE_AMD :: 0x91A4;
	VERTEX_ID_SWIZZLE_AMD :: 0x91A5;
	// RED :: 0x1903;
	// GREEN :: 0x1904;
	// BLUE :: 0x1905;
	// ALPHA :: 0x1906;
	// RG8UI :: 0x8238;
	// RG16UI :: 0x823A;
	// RGBA8UI :: 0x8D7C;
	
	// AMD_multi_draw_indirect
	
	// AMD_name_gen_delete
	DATA_BUFFER_AMD :: 0x9151;
	PERFORMANCE_MONITOR_AMD :: 0x9152;
	QUERY_OBJECT_AMD :: 0x9153;
	VERTEX_ARRAY_OBJECT_AMD :: 0x9154;
	SAMPLER_OBJECT_AMD :: 0x9155;
	
	// AMD_occlusion_query_event
	OCCLUSION_QUERY_EVENT_MASK_AMD :: 0x874F;
	QUERY_DEPTH_PASS_EVENT_BIT_AMD :: 0x00000001;
	QUERY_DEPTH_FAIL_EVENT_BIT_AMD :: 0x00000002;
	QUERY_STENCIL_FAIL_EVENT_BIT_AMD :: 0x00000004;
	QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD :: 0x00000008;
	QUERY_ALL_EVENT_BITS_AMD :: 0xFFFFFFFF;
	
	// AMD_performance_monitor
	COUNTER_TYPE_AMD :: 0x8BC0;
	COUNTER_RANGE_AMD :: 0x8BC1;
	UNSIGNED_INT64_AMD :: 0x8BC2;
	PERCENTAGE_AMD :: 0x8BC3;
	PERFMON_RESULT_AVAILABLE_AMD :: 0x8BC4;
	PERFMON_RESULT_SIZE_AMD :: 0x8BC5;
	PERFMON_RESULT_AMD :: 0x8BC6;
	
	// AMD_pinned_memory
	EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD :: 0x9160;
	
	// AMD_query_buffer_object
	QUERY_BUFFER_AMD :: 0x9192;
	QUERY_BUFFER_BINDING_AMD :: 0x9193;
	QUERY_RESULT_NO_WAIT_AMD :: 0x9194;
	
	// AMD_sample_positions
	// SUBSAMPLE_DISTANCE_AMD :: 0x883F;
	
	// AMD_seamless_cubemap_per_texture
	// TEXTURE_CUBE_MAP_SEAMLESS :: 0x884F;
	
	// AMD_shader_atomic_counter_ops
	
	// AMD_shader_ballot
	
	// AMD_shader_explicit_vertex_parameter
	
	// AMD_shader_gpu_shader_half_float_fetch
	
	// AMD_shader_image_load_store_lod
	
	// AMD_shader_stencil_export
	
	// AMD_shader_trinary_minmax
	
	// AMD_sparse_texture
	VIRTUAL_PAGE_SIZE_X_AMD :: 0x9195;
	VIRTUAL_PAGE_SIZE_Y_AMD :: 0x9196;
	VIRTUAL_PAGE_SIZE_Z_AMD :: 0x9197;
	MAX_SPARSE_TEXTURE_SIZE_AMD :: 0x9198;
	MAX_SPARSE_3D_TEXTURE_SIZE_AMD :: 0x9199;
	MAX_SPARSE_ARRAY_TEXTURE_LAYERS :: 0x919A;
	MIN_SPARSE_LEVEL_AMD :: 0x919B;
	MIN_LOD_WARNING_AMD :: 0x919C;
	TEXTURE_STORAGE_SPARSE_BIT_AMD :: 0x00000001;
	
	// AMD_stencil_operation_extended
	SET_AMD :: 0x874A;
	REPLACE_VALUE_AMD :: 0x874B;
	STENCIL_OP_VALUE_AMD :: 0x874C;
	STENCIL_BACK_OP_VALUE_AMD :: 0x874D;
	
	// AMD_texture_gather_bias_lod
	
	// AMD_texture_texture4
	
	// AMD_transform_feedback3_lines_triangles
	
	// AMD_transform_feedback4
	STREAM_RASTERIZATION_AMD :: 0x91A0;
	
	// AMD_vertex_shader_layer
	
	// AMD_vertex_shader_tessellator
	SAMPLER_BUFFER_AMD :: 0x9001;
	INT_SAMPLER_BUFFER_AMD :: 0x9002;
	UNSIGNED_INT_SAMPLER_BUFFER_AMD :: 0x9003;
	TESSELLATION_MODE_AMD :: 0x9004;
	TESSELLATION_FACTOR_AMD :: 0x9005;
	DISCRETE_AMD :: 0x9006;
	CONTINUOUS_AMD :: 0x9007;
	
	// AMD_vertex_shader_viewport_index
	
	// APPLE_aux_depth_stencil
	AUX_DEPTH_STENCIL_APPLE :: 0x8A14;
	
	// APPLE_client_storage
	UNPACK_CLIENT_STORAGE_APPLE :: 0x85B2;
	
	// APPLE_element_array
	ELEMENT_ARRAY_APPLE :: 0x8A0C;
	ELEMENT_ARRAY_TYPE_APPLE :: 0x8A0D;
	ELEMENT_ARRAY_POINTER_APPLE :: 0x8A0E;
	
	// APPLE_fence
	DRAW_PIXELS_APPLE :: 0x8A0A;
	FENCE_APPLE :: 0x8A0B;
	
	// APPLE_float_pixels
	HALF_APPLE :: 0x140B;
	RGBA_FLOAT32_APPLE :: 0x8814;
	RGB_FLOAT32_APPLE :: 0x8815;
	ALPHA_FLOAT32_APPLE :: 0x8816;
	INTENSITY_FLOAT32_APPLE :: 0x8817;
	LUMINANCE_FLOAT32_APPLE :: 0x8818;
	LUMINANCE_ALPHA_FLOAT32_APPLE :: 0x8819;
	RGBA_FLOAT16_APPLE :: 0x881A;
	RGB_FLOAT16_APPLE :: 0x881B;
	ALPHA_FLOAT16_APPLE :: 0x881C;
	INTENSITY_FLOAT16_APPLE :: 0x881D;
	LUMINANCE_FLOAT16_APPLE :: 0x881E;
	LUMINANCE_ALPHA_FLOAT16_APPLE :: 0x881F;
	COLOR_FLOAT_APPLE :: 0x8A0F;
	
	// APPLE_flush_buffer_range
	BUFFER_SERIALIZED_MODIFY_APPLE :: 0x8A12;
	BUFFER_FLUSHING_UNMAP_APPLE :: 0x8A13;
	
	// APPLE_object_purgeable
	BUFFER_OBJECT_APPLE :: 0x85B3;
	RELEASED_APPLE :: 0x8A19;
	VOLATILE_APPLE :: 0x8A1A;
	RETAINED_APPLE :: 0x8A1B;
	UNDEFINED_APPLE :: 0x8A1C;
	PURGEABLE_APPLE :: 0x8A1D;
	
	// APPLE_rgb_422
	RGB_422_APPLE :: 0x8A1F;
	UNSIGNED_SHORT_8_8_APPLE :: 0x85BA;
	UNSIGNED_SHORT_8_8_REV_APPLE :: 0x85BB;
	RGB_RAW_422_APPLE :: 0x8A51;
	
	// APPLE_row_bytes
	PACK_ROW_BYTES_APPLE :: 0x8A15;
	UNPACK_ROW_BYTES_APPLE :: 0x8A16;
	
	// APPLE_specular_vector
	LIGHT_MODEL_SPECULAR_VECTOR_APPLE :: 0x85B0;
	
	// APPLE_texture_range
	TEXTURE_RANGE_LENGTH_APPLE :: 0x85B7;
	TEXTURE_RANGE_POINTER_APPLE :: 0x85B8;
	TEXTURE_STORAGE_HINT_APPLE :: 0x85BC;
	STORAGE_PRIVATE_APPLE :: 0x85BD;
	STORAGE_CACHED_APPLE :: 0x85BE;
	STORAGE_SHARED_APPLE :: 0x85BF;
	
	// APPLE_transform_hint
	TRANSFORM_HINT_APPLE :: 0x85B1;
	
	// APPLE_vertex_array_object
	VERTEX_ARRAY_BINDING_APPLE :: 0x85B5;
	
	// APPLE_vertex_array_range
	VERTEX_ARRAY_RANGE_APPLE :: 0x851D;
	VERTEX_ARRAY_RANGE_LENGTH_APPLE :: 0x851E;
	VERTEX_ARRAY_STORAGE_HINT_APPLE :: 0x851F;
	VERTEX_ARRAY_RANGE_POINTER_APPLE :: 0x8521;
	STORAGE_CLIENT_APPLE :: 0x85B4;
	// STORAGE_CACHED_APPLE :: 0x85BE;
	// STORAGE_SHARED_APPLE :: 0x85BF;
	
	// APPLE_vertex_program_evaluators
	VERTEX_ATTRIB_MAP1_APPLE :: 0x8A00;
	VERTEX_ATTRIB_MAP2_APPLE :: 0x8A01;
	VERTEX_ATTRIB_MAP1_SIZE_APPLE :: 0x8A02;
	VERTEX_ATTRIB_MAP1_COEFF_APPLE :: 0x8A03;
	VERTEX_ATTRIB_MAP1_ORDER_APPLE :: 0x8A04;
	VERTEX_ATTRIB_MAP1_DOMAIN_APPLE :: 0x8A05;
	VERTEX_ATTRIB_MAP2_SIZE_APPLE :: 0x8A06;
	VERTEX_ATTRIB_MAP2_COEFF_APPLE :: 0x8A07;
	VERTEX_ATTRIB_MAP2_ORDER_APPLE :: 0x8A08;
	VERTEX_ATTRIB_MAP2_DOMAIN_APPLE :: 0x8A09;
	
	// APPLE_ycbcr_422
	YCBCR_422_APPLE :: 0x85B9;
	// UNSIGNED_SHORT_8_8_APPLE :: 0x85BA;
	// UNSIGNED_SHORT_8_8_REV_APPLE :: 0x85BB;
	
	// ARB_ES2_compatibility
	// FIXED :: 0x140C;
	// IMPLEMENTATION_COLOR_READ_TYPE :: 0x8B9A;
	// IMPLEMENTATION_COLOR_READ_FORMAT :: 0x8B9B;
	// LOW_FLOAT :: 0x8DF0;
	// MEDIUM_FLOAT :: 0x8DF1;
	// HIGH_FLOAT :: 0x8DF2;
	// LOW_INT :: 0x8DF3;
	// MEDIUM_INT :: 0x8DF4;
	// HIGH_INT :: 0x8DF5;
	// SHADER_COMPILER :: 0x8DFA;
	// SHADER_BINARY_FORMATS :: 0x8DF8;
	// NUM_SHADER_BINARY_FORMATS :: 0x8DF9;
	// MAX_VERTEX_UNIFORM_VECTORS :: 0x8DFB;
	// MAX_VARYING_VECTORS :: 0x8DFC;
	// MAX_FRAGMENT_UNIFORM_VECTORS :: 0x8DFD;
	// RGB565 :: 0x8D62;
	
	// ARB_ES3_1_compatibility
	// BACK :: 0x0405;
	
	// ARB_ES3_2_compatibility
	PRIMITIVE_BOUNDING_BOX_ARB :: 0x92BE;
	MULTISAMPLE_LINE_WIDTH_RANGE_ARB :: 0x9381;
	MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB :: 0x9382;
	
	// ARB_ES3_compatibility
	// COMPRESSED_RGB8_ETC2 :: 0x9274;
	// COMPRESSED_SRGB8_ETC2 :: 0x9275;
	// COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9276;
	// COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9277;
	// COMPRESSED_RGBA8_ETC2_EAC :: 0x9278;
	// COMPRESSED_SRGB8_ALPHA8_ETC2_EAC :: 0x9279;
	// COMPRESSED_R11_EAC :: 0x9270;
	// COMPRESSED_SIGNED_R11_EAC :: 0x9271;
	// COMPRESSED_RG11_EAC :: 0x9272;
	// COMPRESSED_SIGNED_RG11_EAC :: 0x9273;
	// PRIMITIVE_RESTART_FIXED_INDEX :: 0x8D69;
	// ANY_SAMPLES_PASSED_CONSERVATIVE :: 0x8D6A;
	// MAX_ELEMENT_INDEX :: 0x8D6B;
	
	// ARB_arrays_of_arrays
	
	// ARB_base_instance
	
	// ARB_bindless_texture
	UNSIGNED_INT64_ARB :: 0x140F;
	
	// ARB_blend_func_extended
	// SRC1_COLOR :: 0x88F9;
	// SRC1_ALPHA :: 0x8589;
	// ONE_MINUS_SRC1_COLOR :: 0x88FA;
	// ONE_MINUS_SRC1_ALPHA :: 0x88FB;
	// MAX_DUAL_SOURCE_DRAW_BUFFERS :: 0x88FC;
	
	// ARB_buffer_storage
	// MAP_READ_BIT :: 0x0001;
	// MAP_WRITE_BIT :: 0x0002;
	// MAP_PERSISTENT_BIT :: 0x0040;
	// MAP_COHERENT_BIT :: 0x0080;
	// DYNAMIC_STORAGE_BIT :: 0x0100;
	// CLIENT_STORAGE_BIT :: 0x0200;
	// CLIENT_MAPPED_BUFFER_BARRIER_BIT :: 0x00004000;
	// BUFFER_IMMUTABLE_STORAGE :: 0x821F;
	// BUFFER_STORAGE_FLAGS :: 0x8220;
	
	// ARB_cl_event
	SYNC_CL_EVENT_ARB :: 0x8240;
	SYNC_CL_EVENT_COMPLETE_ARB :: 0x8241;
	
	// ARB_clear_buffer_object
	
	// ARB_clear_texture
	// CLEAR_TEXTURE :: 0x9365;
	
	// ARB_clip_control
	// LOWER_LEFT :: 0x8CA1;
	// UPPER_LEFT :: 0x8CA2;
	// NEGATIVE_ONE_TO_ONE :: 0x935E;
	// ZERO_TO_ONE :: 0x935F;
	// CLIP_ORIGIN :: 0x935C;
	// CLIP_DEPTH_MODE :: 0x935D;
	
	// ARB_color_buffer_float
	RGBA_FLOAT_MODE_ARB :: 0x8820;
	CLAMP_VERTEX_COLOR_ARB :: 0x891A;
	CLAMP_FRAGMENT_COLOR_ARB :: 0x891B;
	CLAMP_READ_COLOR_ARB :: 0x891C;
	FIXED_ONLY_ARB :: 0x891D;
	
	// ARB_compatibility
	
	// ARB_compressed_texture_pixel_storage
	// UNPACK_COMPRESSED_BLOCK_WIDTH :: 0x9127;
	// UNPACK_COMPRESSED_BLOCK_HEIGHT :: 0x9128;
	// UNPACK_COMPRESSED_BLOCK_DEPTH :: 0x9129;
	// UNPACK_COMPRESSED_BLOCK_SIZE :: 0x912A;
	// PACK_COMPRESSED_BLOCK_WIDTH :: 0x912B;
	// PACK_COMPRESSED_BLOCK_HEIGHT :: 0x912C;
	// PACK_COMPRESSED_BLOCK_DEPTH :: 0x912D;
	// PACK_COMPRESSED_BLOCK_SIZE :: 0x912E;
	
	// ARB_compute_shader
	// COMPUTE_SHADER :: 0x91B9;
	// MAX_COMPUTE_UNIFORM_BLOCKS :: 0x91BB;
	// MAX_COMPUTE_TEXTURE_IMAGE_UNITS :: 0x91BC;
	// MAX_COMPUTE_IMAGE_UNIFORMS :: 0x91BD;
	// MAX_COMPUTE_SHARED_MEMORY_SIZE :: 0x8262;
	// MAX_COMPUTE_UNIFORM_COMPONENTS :: 0x8263;
	// MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS :: 0x8264;
	// MAX_COMPUTE_ATOMIC_COUNTERS :: 0x8265;
	// MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS :: 0x8266;
	// MAX_COMPUTE_WORK_GROUP_INVOCATIONS :: 0x90EB;
	// MAX_COMPUTE_WORK_GROUP_COUNT :: 0x91BE;
	// MAX_COMPUTE_WORK_GROUP_SIZE :: 0x91BF;
	// COMPUTE_WORK_GROUP_SIZE :: 0x8267;
	// UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER :: 0x90EC;
	// ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER :: 0x90ED;
	// DISPATCH_INDIRECT_BUFFER :: 0x90EE;
	// DISPATCH_INDIRECT_BUFFER_BINDING :: 0x90EF;
	// COMPUTE_SHADER_BIT :: 0x00000020;
	
	// ARB_compute_variable_group_size
	MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB :: 0x9344;
	MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB :: 0x90EB;
	MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB :: 0x9345;
	MAX_COMPUTE_FIXED_GROUP_SIZE_ARB :: 0x91BF;
	
	// ARB_conditional_render_inverted
	// QUERY_WAIT_INVERTED :: 0x8E17;
	// QUERY_NO_WAIT_INVERTED :: 0x8E18;
	// QUERY_BY_REGION_WAIT_INVERTED :: 0x8E19;
	// QUERY_BY_REGION_NO_WAIT_INVERTED :: 0x8E1A;
	
	// ARB_conservative_depth
	
	// ARB_copy_buffer
	// COPY_READ_BUFFER :: 0x8F36;
	// COPY_WRITE_BUFFER :: 0x8F37;
	
	// ARB_copy_image
	
	// ARB_cull_distance
	// MAX_CULL_DISTANCES :: 0x82F9;
	// MAX_COMBINED_CLIP_AND_CULL_DISTANCES :: 0x82FA;
	
	// ARB_debug_output
	DEBUG_OUTPUT_SYNCHRONOUS_ARB :: 0x8242;
	DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB :: 0x8243;
	DEBUG_CALLBACK_FUNCTION_ARB :: 0x8244;
	DEBUG_CALLBACK_USER_PARAM_ARB :: 0x8245;
	DEBUG_SOURCE_API_ARB :: 0x8246;
	DEBUG_SOURCE_WINDOW_SYSTEM_ARB :: 0x8247;
	DEBUG_SOURCE_SHADER_COMPILER_ARB :: 0x8248;
	DEBUG_SOURCE_THIRD_PARTY_ARB :: 0x8249;
	DEBUG_SOURCE_APPLICATION_ARB :: 0x824A;
	DEBUG_SOURCE_OTHER_ARB :: 0x824B;
	DEBUG_TYPE_ERROR_ARB :: 0x824C;
	DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB :: 0x824D;
	DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB :: 0x824E;
	DEBUG_TYPE_PORTABILITY_ARB :: 0x824F;
	DEBUG_TYPE_PERFORMANCE_ARB :: 0x8250;
	DEBUG_TYPE_OTHER_ARB :: 0x8251;
	MAX_DEBUG_MESSAGE_LENGTH_ARB :: 0x9143;
	MAX_DEBUG_LOGGED_MESSAGES_ARB :: 0x9144;
	DEBUG_LOGGED_MESSAGES_ARB :: 0x9145;
	DEBUG_SEVERITY_HIGH_ARB :: 0x9146;
	DEBUG_SEVERITY_MEDIUM_ARB :: 0x9147;
	DEBUG_SEVERITY_LOW_ARB :: 0x9148;
	
	// ARB_depth_buffer_float
	// DEPTH_COMPONENT32F :: 0x8CAC;
	// DEPTH32F_STENCIL8 :: 0x8CAD;
	// FLOAT_32_UNSIGNED_INT_24_8_REV :: 0x8DAD;
	
	// ARB_depth_clamp
	// DEPTH_CLAMP :: 0x864F;
	
	// ARB_depth_texture
	DEPTH_COMPONENT16_ARB :: 0x81A5;
	DEPTH_COMPONENT24_ARB :: 0x81A6;
	DEPTH_COMPONENT32_ARB :: 0x81A7;
	TEXTURE_DEPTH_SIZE_ARB :: 0x884A;
	DEPTH_TEXTURE_MODE_ARB :: 0x884B;
	
	// ARB_derivative_control
	
	// ARB_direct_state_access
	// TEXTURE_TARGET :: 0x1006;
	// QUERY_TARGET :: 0x82EA;
	// TEXTURE_BINDING_1D :: 0x8068;
	// TEXTURE_BINDING_1D_ARRAY :: 0x8C1C;
	// TEXTURE_BINDING_2D :: 0x8069;
	// TEXTURE_BINDING_2D_ARRAY :: 0x8C1D;
	// TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104;
	// TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105;
	// TEXTURE_BINDING_3D :: 0x806A;
	// TEXTURE_BINDING_BUFFER :: 0x8C2C;
	// TEXTURE_BINDING_CUBE_MAP :: 0x8514;
	// TEXTURE_BINDING_CUBE_MAP_ARRAY :: 0x900A;
	// TEXTURE_BINDING_RECTANGLE :: 0x84F6;
	
	// ARB_draw_buffers
	MAX_DRAW_BUFFERS_ARB :: 0x8824;
	DRAW_BUFFER0_ARB :: 0x8825;
	DRAW_BUFFER1_ARB :: 0x8826;
	DRAW_BUFFER2_ARB :: 0x8827;
	DRAW_BUFFER3_ARB :: 0x8828;
	DRAW_BUFFER4_ARB :: 0x8829;
	DRAW_BUFFER5_ARB :: 0x882A;
	DRAW_BUFFER6_ARB :: 0x882B;
	DRAW_BUFFER7_ARB :: 0x882C;
	DRAW_BUFFER8_ARB :: 0x882D;
	DRAW_BUFFER9_ARB :: 0x882E;
	DRAW_BUFFER10_ARB :: 0x882F;
	DRAW_BUFFER11_ARB :: 0x8830;
	DRAW_BUFFER12_ARB :: 0x8831;
	DRAW_BUFFER13_ARB :: 0x8832;
	DRAW_BUFFER14_ARB :: 0x8833;
	DRAW_BUFFER15_ARB :: 0x8834;
	
	// ARB_draw_buffers_blend
	
	// ARB_draw_elements_base_vertex
	
	// ARB_draw_indirect
	// DRAW_INDIRECT_BUFFER :: 0x8F3F;
	// DRAW_INDIRECT_BUFFER_BINDING :: 0x8F43;
	
	// ARB_draw_instanced
	
	// ARB_enhanced_layouts
	// LOCATION_COMPONENT :: 0x934A;
	// TRANSFORM_FEEDBACK_BUFFER :: 0x8C8E;
	// TRANSFORM_FEEDBACK_BUFFER_INDEX :: 0x934B;
	// TRANSFORM_FEEDBACK_BUFFER_STRIDE :: 0x934C;
	
	// ARB_explicit_attrib_location
	
	// ARB_explicit_uniform_location
	// MAX_UNIFORM_LOCATIONS :: 0x826E;
	
	// ARB_fragment_coord_conventions
	
	// ARB_fragment_layer_viewport
	
	// ARB_fragment_program
	FRAGMENT_PROGRAM_ARB :: 0x8804;
	PROGRAM_FORMAT_ASCII_ARB :: 0x8875;
	PROGRAM_LENGTH_ARB :: 0x8627;
	PROGRAM_FORMAT_ARB :: 0x8876;
	PROGRAM_BINDING_ARB :: 0x8677;
	PROGRAM_INSTRUCTIONS_ARB :: 0x88A0;
	MAX_PROGRAM_INSTRUCTIONS_ARB :: 0x88A1;
	PROGRAM_NATIVE_INSTRUCTIONS_ARB :: 0x88A2;
	MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB :: 0x88A3;
	PROGRAM_TEMPORARIES_ARB :: 0x88A4;
	MAX_PROGRAM_TEMPORARIES_ARB :: 0x88A5;
	PROGRAM_NATIVE_TEMPORARIES_ARB :: 0x88A6;
	MAX_PROGRAM_NATIVE_TEMPORARIES_ARB :: 0x88A7;
	PROGRAM_PARAMETERS_ARB :: 0x88A8;
	MAX_PROGRAM_PARAMETERS_ARB :: 0x88A9;
	PROGRAM_NATIVE_PARAMETERS_ARB :: 0x88AA;
	MAX_PROGRAM_NATIVE_PARAMETERS_ARB :: 0x88AB;
	PROGRAM_ATTRIBS_ARB :: 0x88AC;
	MAX_PROGRAM_ATTRIBS_ARB :: 0x88AD;
	PROGRAM_NATIVE_ATTRIBS_ARB :: 0x88AE;
	MAX_PROGRAM_NATIVE_ATTRIBS_ARB :: 0x88AF;
	MAX_PROGRAM_LOCAL_PARAMETERS_ARB :: 0x88B4;
	MAX_PROGRAM_ENV_PARAMETERS_ARB :: 0x88B5;
	PROGRAM_UNDER_NATIVE_LIMITS_ARB :: 0x88B6;
	PROGRAM_ALU_INSTRUCTIONS_ARB :: 0x8805;
	PROGRAM_TEX_INSTRUCTIONS_ARB :: 0x8806;
	PROGRAM_TEX_INDIRECTIONS_ARB :: 0x8807;
	PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB :: 0x8808;
	PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB :: 0x8809;
	PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB :: 0x880A;
	MAX_PROGRAM_ALU_INSTRUCTIONS_ARB :: 0x880B;
	MAX_PROGRAM_TEX_INSTRUCTIONS_ARB :: 0x880C;
	MAX_PROGRAM_TEX_INDIRECTIONS_ARB :: 0x880D;
	MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB :: 0x880E;
	MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB :: 0x880F;
	MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB :: 0x8810;
	PROGRAM_STRING_ARB :: 0x8628;
	PROGRAM_ERROR_POSITION_ARB :: 0x864B;
	CURRENT_MATRIX_ARB :: 0x8641;
	TRANSPOSE_CURRENT_MATRIX_ARB :: 0x88B7;
	CURRENT_MATRIX_STACK_DEPTH_ARB :: 0x8640;
	MAX_PROGRAM_MATRICES_ARB :: 0x862F;
	MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB :: 0x862E;
	MAX_TEXTURE_COORDS_ARB :: 0x8871;
	MAX_TEXTURE_IMAGE_UNITS_ARB :: 0x8872;
	PROGRAM_ERROR_STRING_ARB :: 0x8874;
	MATRIX0_ARB :: 0x88C0;
	MATRIX1_ARB :: 0x88C1;
	MATRIX2_ARB :: 0x88C2;
	MATRIX3_ARB :: 0x88C3;
	MATRIX4_ARB :: 0x88C4;
	MATRIX5_ARB :: 0x88C5;
	MATRIX6_ARB :: 0x88C6;
	MATRIX7_ARB :: 0x88C7;
	MATRIX8_ARB :: 0x88C8;
	MATRIX9_ARB :: 0x88C9;
	MATRIX10_ARB :: 0x88CA;
	MATRIX11_ARB :: 0x88CB;
	MATRIX12_ARB :: 0x88CC;
	MATRIX13_ARB :: 0x88CD;
	MATRIX14_ARB :: 0x88CE;
	MATRIX15_ARB :: 0x88CF;
	MATRIX16_ARB :: 0x88D0;
	MATRIX17_ARB :: 0x88D1;
	MATRIX18_ARB :: 0x88D2;
	MATRIX19_ARB :: 0x88D3;
	MATRIX20_ARB :: 0x88D4;
	MATRIX21_ARB :: 0x88D5;
	MATRIX22_ARB :: 0x88D6;
	MATRIX23_ARB :: 0x88D7;
	MATRIX24_ARB :: 0x88D8;
	MATRIX25_ARB :: 0x88D9;
	MATRIX26_ARB :: 0x88DA;
	MATRIX27_ARB :: 0x88DB;
	MATRIX28_ARB :: 0x88DC;
	MATRIX29_ARB :: 0x88DD;
	MATRIX30_ARB :: 0x88DE;
	MATRIX31_ARB :: 0x88DF;
	
	// ARB_fragment_program_shadow
	
	// ARB_fragment_shader
	FRAGMENT_SHADER_ARB :: 0x8B30;
	MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB :: 0x8B49;
	FRAGMENT_SHADER_DERIVATIVE_HINT_ARB :: 0x8B8B;
	
	// ARB_fragment_shader_interlock
	
	// ARB_framebuffer_no_attachments
	// FRAMEBUFFER_DEFAULT_WIDTH :: 0x9310;
	// FRAMEBUFFER_DEFAULT_HEIGHT :: 0x9311;
	// FRAMEBUFFER_DEFAULT_LAYERS :: 0x9312;
	// FRAMEBUFFER_DEFAULT_SAMPLES :: 0x9313;
	// FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS :: 0x9314;
	// MAX_FRAMEBUFFER_WIDTH :: 0x9315;
	// MAX_FRAMEBUFFER_HEIGHT :: 0x9316;
	// MAX_FRAMEBUFFER_LAYERS :: 0x9317;
	// MAX_FRAMEBUFFER_SAMPLES :: 0x9318;
	
	// ARB_framebuffer_object
	// INVALID_FRAMEBUFFER_OPERATION :: 0x0506;
	// FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING :: 0x8210;
	// FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE :: 0x8211;
	// FRAMEBUFFER_ATTACHMENT_RED_SIZE :: 0x8212;
	// FRAMEBUFFER_ATTACHMENT_GREEN_SIZE :: 0x8213;
	// FRAMEBUFFER_ATTACHMENT_BLUE_SIZE :: 0x8214;
	// FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE :: 0x8215;
	// FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE :: 0x8216;
	// FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE :: 0x8217;
	// FRAMEBUFFER_DEFAULT :: 0x8218;
	// FRAMEBUFFER_UNDEFINED :: 0x8219;
	// DEPTH_STENCIL_ATTACHMENT :: 0x821A;
	// MAX_RENDERBUFFER_SIZE :: 0x84E8;
	// DEPTH_STENCIL :: 0x84F9;
	// UNSIGNED_INT_24_8 :: 0x84FA;
	// DEPTH24_STENCIL8 :: 0x88F0;
	// TEXTURE_STENCIL_SIZE :: 0x88F1;
	// UNSIGNED_NORMALIZED :: 0x8C17;
	// FRAMEBUFFER_BINDING :: 0x8CA6;
	// DRAW_FRAMEBUFFER_BINDING :: 0x8CA6;
	// RENDERBUFFER_BINDING :: 0x8CA7;
	// READ_FRAMEBUFFER :: 0x8CA8;
	// DRAW_FRAMEBUFFER :: 0x8CA9;
	// READ_FRAMEBUFFER_BINDING :: 0x8CAA;
	// RENDERBUFFER_SAMPLES :: 0x8CAB;
	// FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :: 0x8CD0;
	// FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :: 0x8CD1;
	// FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :: 0x8CD2;
	// FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :: 0x8CD3;
	// FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :: 0x8CD4;
	// FRAMEBUFFER_COMPLETE :: 0x8CD5;
	// FRAMEBUFFER_INCOMPLETE_ATTACHMENT :: 0x8CD6;
	// FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :: 0x8CD7;
	// FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER :: 0x8CDB;
	// FRAMEBUFFER_INCOMPLETE_READ_BUFFER :: 0x8CDC;
	// FRAMEBUFFER_UNSUPPORTED :: 0x8CDD;
	// MAX_COLOR_ATTACHMENTS :: 0x8CDF;
	// COLOR_ATTACHMENT0 :: 0x8CE0;
	// COLOR_ATTACHMENT1 :: 0x8CE1;
	// COLOR_ATTACHMENT2 :: 0x8CE2;
	// COLOR_ATTACHMENT3 :: 0x8CE3;
	// COLOR_ATTACHMENT4 :: 0x8CE4;
	// COLOR_ATTACHMENT5 :: 0x8CE5;
	// COLOR_ATTACHMENT6 :: 0x8CE6;
	// COLOR_ATTACHMENT7 :: 0x8CE7;
	// COLOR_ATTACHMENT8 :: 0x8CE8;
	// COLOR_ATTACHMENT9 :: 0x8CE9;
	// COLOR_ATTACHMENT10 :: 0x8CEA;
	// COLOR_ATTACHMENT11 :: 0x8CEB;
	// COLOR_ATTACHMENT12 :: 0x8CEC;
	// COLOR_ATTACHMENT13 :: 0x8CED;
	// COLOR_ATTACHMENT14 :: 0x8CEE;
	// COLOR_ATTACHMENT15 :: 0x8CEF;
	// DEPTH_ATTACHMENT :: 0x8D00;
	// STENCIL_ATTACHMENT :: 0x8D20;
	// FRAMEBUFFER :: 0x8D40;
	// RENDERBUFFER :: 0x8D41;
	// RENDERBUFFER_WIDTH :: 0x8D42;
	// RENDERBUFFER_HEIGHT :: 0x8D43;
	// RENDERBUFFER_INTERNAL_FORMAT :: 0x8D44;
	// STENCIL_INDEX1 :: 0x8D46;
	// STENCIL_INDEX4 :: 0x8D47;
	// STENCIL_INDEX8 :: 0x8D48;
	// STENCIL_INDEX16 :: 0x8D49;
	// RENDERBUFFER_RED_SIZE :: 0x8D50;
	// RENDERBUFFER_GREEN_SIZE :: 0x8D51;
	// RENDERBUFFER_BLUE_SIZE :: 0x8D52;
	// RENDERBUFFER_ALPHA_SIZE :: 0x8D53;
	// RENDERBUFFER_DEPTH_SIZE :: 0x8D54;
	// RENDERBUFFER_STENCIL_SIZE :: 0x8D55;
	// FRAMEBUFFER_INCOMPLETE_MULTISAMPLE :: 0x8D56;
	// MAX_SAMPLES :: 0x8D57;
	// INDEX :: 0x8222;
	
	// ARB_framebuffer_sRGB
	// FRAMEBUFFER_SRGB :: 0x8DB9;
	
	// ARB_geometry_shader4
	LINES_ADJACENCY_ARB :: 0x000A;
	LINE_STRIP_ADJACENCY_ARB :: 0x000B;
	TRIANGLES_ADJACENCY_ARB :: 0x000C;
	TRIANGLE_STRIP_ADJACENCY_ARB :: 0x000D;
	PROGRAM_POINT_SIZE_ARB :: 0x8642;
	MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB :: 0x8C29;
	FRAMEBUFFER_ATTACHMENT_LAYERED_ARB :: 0x8DA7;
	FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB :: 0x8DA8;
	FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB :: 0x8DA9;
	GEOMETRY_SHADER_ARB :: 0x8DD9;
	GEOMETRY_VERTICES_OUT_ARB :: 0x8DDA;
	GEOMETRY_INPUT_TYPE_ARB :: 0x8DDB;
	GEOMETRY_OUTPUT_TYPE_ARB :: 0x8DDC;
	MAX_GEOMETRY_VARYING_COMPONENTS_ARB :: 0x8DDD;
	MAX_VERTEX_VARYING_COMPONENTS_ARB :: 0x8DDE;
	MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB :: 0x8DDF;
	MAX_GEOMETRY_OUTPUT_VERTICES_ARB :: 0x8DE0;
	MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB :: 0x8DE1;
	// MAX_VARYING_COMPONENTS :: 0x8B4B;
	// FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :: 0x8CD4;
	
	// ARB_get_program_binary
	// PROGRAM_BINARY_RETRIEVABLE_HINT :: 0x8257;
	// PROGRAM_BINARY_LENGTH :: 0x8741;
	// NUM_PROGRAM_BINARY_FORMATS :: 0x87FE;
	// PROGRAM_BINARY_FORMATS :: 0x87FF;
	
	// ARB_get_texture_sub_image
	
	// ARB_gl_spirv
	SHADER_BINARY_FORMAT_SPIR_V_ARB :: 0x9551;
	SPIR_V_BINARY_ARB :: 0x9552;
	
	// ARB_gpu_shader5
	// GEOMETRY_SHADER_INVOCATIONS :: 0x887F;
	// MAX_GEOMETRY_SHADER_INVOCATIONS :: 0x8E5A;
	// MIN_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5B;
	// MAX_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5C;
	// FRAGMENT_INTERPOLATION_OFFSET_BITS :: 0x8E5D;
	// MAX_VERTEX_STREAMS :: 0x8E71;
	
	// ARB_gpu_shader_fp64
	// DOUBLE :: 0x140A;
	// DOUBLE_VEC2 :: 0x8FFC;
	// DOUBLE_VEC3 :: 0x8FFD;
	// DOUBLE_VEC4 :: 0x8FFE;
	// DOUBLE_MAT2 :: 0x8F46;
	// DOUBLE_MAT3 :: 0x8F47;
	// DOUBLE_MAT4 :: 0x8F48;
	// DOUBLE_MAT2x3 :: 0x8F49;
	// DOUBLE_MAT2x4 :: 0x8F4A;
	// DOUBLE_MAT3x2 :: 0x8F4B;
	// DOUBLE_MAT3x4 :: 0x8F4C;
	// DOUBLE_MAT4x2 :: 0x8F4D;
	// DOUBLE_MAT4x3 :: 0x8F4E;
	
	// ARB_gpu_shader_int64
	INT64_ARB :: 0x140E;
	// UNSIGNED_INT64_ARB :: 0x140F;
	INT64_VEC2_ARB :: 0x8FE9;
	INT64_VEC3_ARB :: 0x8FEA;
	INT64_VEC4_ARB :: 0x8FEB;
	UNSIGNED_INT64_VEC2_ARB :: 0x8FF5;
	UNSIGNED_INT64_VEC3_ARB :: 0x8FF6;
	UNSIGNED_INT64_VEC4_ARB :: 0x8FF7;
	
	// ARB_half_float_pixel
	HALF_FLOAT_ARB :: 0x140B;
	
	// ARB_half_float_vertex
	// HALF_FLOAT :: 0x140B;
	
	// ARB_imaging
	// BLEND_COLOR :: 0x8005;
	// BLEND_EQUATION :: 0x8009;
	// CONSTANT_COLOR :: 0x8001;
	// ONE_MINUS_CONSTANT_COLOR :: 0x8002;
	// CONSTANT_ALPHA :: 0x8003;
	// ONE_MINUS_CONSTANT_ALPHA :: 0x8004;
	// FUNC_ADD :: 0x8006;
	// FUNC_REVERSE_SUBTRACT :: 0x800B;
	// FUNC_SUBTRACT :: 0x800A;
	// MIN :: 0x8007;
	// MAX :: 0x8008;
	CONVOLUTION_1D :: 0x8010;
	CONVOLUTION_2D :: 0x8011;
	SEPARABLE_2D :: 0x8012;
	CONVOLUTION_BORDER_MODE :: 0x8013;
	CONVOLUTION_FILTER_SCALE :: 0x8014;
	CONVOLUTION_FILTER_BIAS :: 0x8015;
	REDUCE :: 0x8016;
	CONVOLUTION_FORMAT :: 0x8017;
	CONVOLUTION_WIDTH :: 0x8018;
	CONVOLUTION_HEIGHT :: 0x8019;
	MAX_CONVOLUTION_WIDTH :: 0x801A;
	MAX_CONVOLUTION_HEIGHT :: 0x801B;
	POST_CONVOLUTION_RED_SCALE :: 0x801C;
	POST_CONVOLUTION_GREEN_SCALE :: 0x801D;
	POST_CONVOLUTION_BLUE_SCALE :: 0x801E;
	POST_CONVOLUTION_ALPHA_SCALE :: 0x801F;
	POST_CONVOLUTION_RED_BIAS :: 0x8020;
	POST_CONVOLUTION_GREEN_BIAS :: 0x8021;
	POST_CONVOLUTION_BLUE_BIAS :: 0x8022;
	POST_CONVOLUTION_ALPHA_BIAS :: 0x8023;
	HISTOGRAM :: 0x8024;
	PROXY_HISTOGRAM :: 0x8025;
	HISTOGRAM_WIDTH :: 0x8026;
	HISTOGRAM_FORMAT :: 0x8027;
	HISTOGRAM_RED_SIZE :: 0x8028;
	HISTOGRAM_GREEN_SIZE :: 0x8029;
	HISTOGRAM_BLUE_SIZE :: 0x802A;
	HISTOGRAM_ALPHA_SIZE :: 0x802B;
	HISTOGRAM_LUMINANCE_SIZE :: 0x802C;
	HISTOGRAM_SINK :: 0x802D;
	MINMAX :: 0x802E;
	MINMAX_FORMAT :: 0x802F;
	MINMAX_SINK :: 0x8030;
	TABLE_TOO_LARGE :: 0x8031;
	COLOR_MATRIX :: 0x80B1;
	COLOR_MATRIX_STACK_DEPTH :: 0x80B2;
	MAX_COLOR_MATRIX_STACK_DEPTH :: 0x80B3;
	POST_COLOR_MATRIX_RED_SCALE :: 0x80B4;
	POST_COLOR_MATRIX_GREEN_SCALE :: 0x80B5;
	POST_COLOR_MATRIX_BLUE_SCALE :: 0x80B6;
	POST_COLOR_MATRIX_ALPHA_SCALE :: 0x80B7;
	POST_COLOR_MATRIX_RED_BIAS :: 0x80B8;
	POST_COLOR_MATRIX_GREEN_BIAS :: 0x80B9;
	POST_COLOR_MATRIX_BLUE_BIAS :: 0x80BA;
	POST_COLOR_MATRIX_ALPHA_BIAS :: 0x80BB;
	COLOR_TABLE :: 0x80D0;
	POST_CONVOLUTION_COLOR_TABLE :: 0x80D1;
	POST_COLOR_MATRIX_COLOR_TABLE :: 0x80D2;
	PROXY_COLOR_TABLE :: 0x80D3;
	PROXY_POST_CONVOLUTION_COLOR_TABLE :: 0x80D4;
	PROXY_POST_COLOR_MATRIX_COLOR_TABLE :: 0x80D5;
	COLOR_TABLE_SCALE :: 0x80D6;
	COLOR_TABLE_BIAS :: 0x80D7;
	COLOR_TABLE_FORMAT :: 0x80D8;
	COLOR_TABLE_WIDTH :: 0x80D9;
	COLOR_TABLE_RED_SIZE :: 0x80DA;
	COLOR_TABLE_GREEN_SIZE :: 0x80DB;
	COLOR_TABLE_BLUE_SIZE :: 0x80DC;
	COLOR_TABLE_ALPHA_SIZE :: 0x80DD;
	COLOR_TABLE_LUMINANCE_SIZE :: 0x80DE;
	COLOR_TABLE_INTENSITY_SIZE :: 0x80DF;
	CONSTANT_BORDER :: 0x8151;
	REPLICATE_BORDER :: 0x8153;
	CONVOLUTION_BORDER_COLOR :: 0x8154;
	
	// ARB_indirect_parameters
	PARAMETER_BUFFER_ARB :: 0x80EE;
	PARAMETER_BUFFER_BINDING_ARB :: 0x80EF;
	
	// ARB_instanced_arrays
	VERTEX_ATTRIB_ARRAY_DIVISOR_ARB :: 0x88FE;
	
	// ARB_internalformat_query
	// NUM_SAMPLE_COUNTS :: 0x9380;
	
	// ARB_internalformat_query2
	// IMAGE_FORMAT_COMPATIBILITY_TYPE :: 0x90C7;
	// NUM_SAMPLE_COUNTS :: 0x9380;
	// RENDERBUFFER :: 0x8D41;
	// SAMPLES :: 0x80A9;
	// TEXTURE_1D :: 0x0DE0;
	// TEXTURE_1D_ARRAY :: 0x8C18;
	// TEXTURE_2D :: 0x0DE1;
	// TEXTURE_2D_ARRAY :: 0x8C1A;
	// TEXTURE_3D :: 0x806F;
	// TEXTURE_CUBE_MAP :: 0x8513;
	// TEXTURE_CUBE_MAP_ARRAY :: 0x9009;
	// TEXTURE_RECTANGLE :: 0x84F5;
	// TEXTURE_BUFFER :: 0x8C2A;
	// TEXTURE_2D_MULTISAMPLE :: 0x9100;
	// TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9102;
	// TEXTURE_COMPRESSED :: 0x86A1;
	// INTERNALFORMAT_SUPPORTED :: 0x826F;
	// INTERNALFORMAT_PREFERRED :: 0x8270;
	// INTERNALFORMAT_RED_SIZE :: 0x8271;
	// INTERNALFORMAT_GREEN_SIZE :: 0x8272;
	// INTERNALFORMAT_BLUE_SIZE :: 0x8273;
	// INTERNALFORMAT_ALPHA_SIZE :: 0x8274;
	// INTERNALFORMAT_DEPTH_SIZE :: 0x8275;
	// INTERNALFORMAT_STENCIL_SIZE :: 0x8276;
	// INTERNALFORMAT_SHARED_SIZE :: 0x8277;
	// INTERNALFORMAT_RED_TYPE :: 0x8278;
	// INTERNALFORMAT_GREEN_TYPE :: 0x8279;
	// INTERNALFORMAT_BLUE_TYPE :: 0x827A;
	// INTERNALFORMAT_ALPHA_TYPE :: 0x827B;
	// INTERNALFORMAT_DEPTH_TYPE :: 0x827C;
	// INTERNALFORMAT_STENCIL_TYPE :: 0x827D;
	// MAX_WIDTH :: 0x827E;
	// MAX_HEIGHT :: 0x827F;
	// MAX_DEPTH :: 0x8280;
	// MAX_LAYERS :: 0x8281;
	// MAX_COMBINED_DIMENSIONS :: 0x8282;
	// COLOR_COMPONENTS :: 0x8283;
	// DEPTH_COMPONENTS :: 0x8284;
	// STENCIL_COMPONENTS :: 0x8285;
	// COLOR_RENDERABLE :: 0x8286;
	// DEPTH_RENDERABLE :: 0x8287;
	// STENCIL_RENDERABLE :: 0x8288;
	// FRAMEBUFFER_RENDERABLE :: 0x8289;
	// FRAMEBUFFER_RENDERABLE_LAYERED :: 0x828A;
	// FRAMEBUFFER_BLEND :: 0x828B;
	// READ_PIXELS :: 0x828C;
	// READ_PIXELS_FORMAT :: 0x828D;
	// READ_PIXELS_TYPE :: 0x828E;
	// TEXTURE_IMAGE_FORMAT :: 0x828F;
	// TEXTURE_IMAGE_TYPE :: 0x8290;
	// GET_TEXTURE_IMAGE_FORMAT :: 0x8291;
	// GET_TEXTURE_IMAGE_TYPE :: 0x8292;
	// MIPMAP :: 0x8293;
	// MANUAL_GENERATE_MIPMAP :: 0x8294;
	// AUTO_GENERATE_MIPMAP :: 0x8295;
	// COLOR_ENCODING :: 0x8296;
	// SRGB_READ :: 0x8297;
	// SRGB_WRITE :: 0x8298;
	SRGB_DECODE_ARB :: 0x8299;
	// FILTER :: 0x829A;
	// VERTEX_TEXTURE :: 0x829B;
	// TESS_CONTROL_TEXTURE :: 0x829C;
	// TESS_EVALUATION_TEXTURE :: 0x829D;
	// GEOMETRY_TEXTURE :: 0x829E;
	// FRAGMENT_TEXTURE :: 0x829F;
	// COMPUTE_TEXTURE :: 0x82A0;
	// TEXTURE_SHADOW :: 0x82A1;
	// TEXTURE_GATHER :: 0x82A2;
	// TEXTURE_GATHER_SHADOW :: 0x82A3;
	// SHADER_IMAGE_LOAD :: 0x82A4;
	// SHADER_IMAGE_STORE :: 0x82A5;
	// SHADER_IMAGE_ATOMIC :: 0x82A6;
	// IMAGE_TEXEL_SIZE :: 0x82A7;
	// IMAGE_COMPATIBILITY_CLASS :: 0x82A8;
	// IMAGE_PIXEL_FORMAT :: 0x82A9;
	// IMAGE_PIXEL_TYPE :: 0x82AA;
	// SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST :: 0x82AC;
	// SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST :: 0x82AD;
	// SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE :: 0x82AE;
	// SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE :: 0x82AF;
	// TEXTURE_COMPRESSED_BLOCK_WIDTH :: 0x82B1;
	// TEXTURE_COMPRESSED_BLOCK_HEIGHT :: 0x82B2;
	// TEXTURE_COMPRESSED_BLOCK_SIZE :: 0x82B3;
	// CLEAR_BUFFER :: 0x82B4;
	// TEXTURE_VIEW :: 0x82B5;
	// VIEW_COMPATIBILITY_CLASS :: 0x82B6;
	// FULL_SUPPORT :: 0x82B7;
	// CAVEAT_SUPPORT :: 0x82B8;
	// IMAGE_CLASS_4_X_32 :: 0x82B9;
	// IMAGE_CLASS_2_X_32 :: 0x82BA;
	// IMAGE_CLASS_1_X_32 :: 0x82BB;
	// IMAGE_CLASS_4_X_16 :: 0x82BC;
	// IMAGE_CLASS_2_X_16 :: 0x82BD;
	// IMAGE_CLASS_1_X_16 :: 0x82BE;
	// IMAGE_CLASS_4_X_8 :: 0x82BF;
	// IMAGE_CLASS_2_X_8 :: 0x82C0;
	// IMAGE_CLASS_1_X_8 :: 0x82C1;
	// IMAGE_CLASS_11_11_10 :: 0x82C2;
	// IMAGE_CLASS_10_10_10_2 :: 0x82C3;
	// VIEW_CLASS_128_BITS :: 0x82C4;
	// VIEW_CLASS_96_BITS :: 0x82C5;
	// VIEW_CLASS_64_BITS :: 0x82C6;
	// VIEW_CLASS_48_BITS :: 0x82C7;
	// VIEW_CLASS_32_BITS :: 0x82C8;
	// VIEW_CLASS_24_BITS :: 0x82C9;
	// VIEW_CLASS_16_BITS :: 0x82CA;
	// VIEW_CLASS_8_BITS :: 0x82CB;
	// VIEW_CLASS_S3TC_DXT1_RGB :: 0x82CC;
	// VIEW_CLASS_S3TC_DXT1_RGBA :: 0x82CD;
	// VIEW_CLASS_S3TC_DXT3_RGBA :: 0x82CE;
	// VIEW_CLASS_S3TC_DXT5_RGBA :: 0x82CF;
	// VIEW_CLASS_RGTC1_RED :: 0x82D0;
	// VIEW_CLASS_RGTC2_RG :: 0x82D1;
	// VIEW_CLASS_BPTC_UNORM :: 0x82D2;
	// VIEW_CLASS_BPTC_FLOAT :: 0x82D3;
	
	// ARB_invalidate_subdata
	
	// ARB_map_buffer_alignment
	// MIN_MAP_BUFFER_ALIGNMENT :: 0x90BC;
	
	// ARB_map_buffer_range
	// MAP_READ_BIT :: 0x0001;
	// MAP_WRITE_BIT :: 0x0002;
	// MAP_INVALIDATE_RANGE_BIT :: 0x0004;
	// MAP_INVALIDATE_BUFFER_BIT :: 0x0008;
	// MAP_FLUSH_EXPLICIT_BIT :: 0x0010;
	// MAP_UNSYNCHRONIZED_BIT :: 0x0020;
	
	// ARB_matrix_palette
	MATRIX_PALETTE_ARB :: 0x8840;
	MAX_MATRIX_PALETTE_STACK_DEPTH_ARB :: 0x8841;
	MAX_PALETTE_MATRICES_ARB :: 0x8842;
	CURRENT_PALETTE_MATRIX_ARB :: 0x8843;
	MATRIX_INDEX_ARRAY_ARB :: 0x8844;
	CURRENT_MATRIX_INDEX_ARB :: 0x8845;
	MATRIX_INDEX_ARRAY_SIZE_ARB :: 0x8846;
	MATRIX_INDEX_ARRAY_TYPE_ARB :: 0x8847;
	MATRIX_INDEX_ARRAY_STRIDE_ARB :: 0x8848;
	MATRIX_INDEX_ARRAY_POINTER_ARB :: 0x8849;
	
	// ARB_multi_bind
	
	// ARB_multi_draw_indirect
	
	// ARB_multisample
	MULTISAMPLE_ARB :: 0x809D;
	SAMPLE_ALPHA_TO_COVERAGE_ARB :: 0x809E;
	SAMPLE_ALPHA_TO_ONE_ARB :: 0x809F;
	SAMPLE_COVERAGE_ARB :: 0x80A0;
	SAMPLE_BUFFERS_ARB :: 0x80A8;
	SAMPLES_ARB :: 0x80A9;
	SAMPLE_COVERAGE_VALUE_ARB :: 0x80AA;
	SAMPLE_COVERAGE_INVERT_ARB :: 0x80AB;
	MULTISAMPLE_BIT_ARB :: 0x20000000;
	
	// ARB_multitexture
	TEXTURE0_ARB :: 0x84C0;
	TEXTURE1_ARB :: 0x84C1;
	TEXTURE2_ARB :: 0x84C2;
	TEXTURE3_ARB :: 0x84C3;
	TEXTURE4_ARB :: 0x84C4;
	TEXTURE5_ARB :: 0x84C5;
	TEXTURE6_ARB :: 0x84C6;
	TEXTURE7_ARB :: 0x84C7;
	TEXTURE8_ARB :: 0x84C8;
	TEXTURE9_ARB :: 0x84C9;
	TEXTURE10_ARB :: 0x84CA;
	TEXTURE11_ARB :: 0x84CB;
	TEXTURE12_ARB :: 0x84CC;
	TEXTURE13_ARB :: 0x84CD;
	TEXTURE14_ARB :: 0x84CE;
	TEXTURE15_ARB :: 0x84CF;
	TEXTURE16_ARB :: 0x84D0;
	TEXTURE17_ARB :: 0x84D1;
	TEXTURE18_ARB :: 0x84D2;
	TEXTURE19_ARB :: 0x84D3;
	TEXTURE20_ARB :: 0x84D4;
	TEXTURE21_ARB :: 0x84D5;
	TEXTURE22_ARB :: 0x84D6;
	TEXTURE23_ARB :: 0x84D7;
	TEXTURE24_ARB :: 0x84D8;
	TEXTURE25_ARB :: 0x84D9;
	TEXTURE26_ARB :: 0x84DA;
	TEXTURE27_ARB :: 0x84DB;
	TEXTURE28_ARB :: 0x84DC;
	TEXTURE29_ARB :: 0x84DD;
	TEXTURE30_ARB :: 0x84DE;
	TEXTURE31_ARB :: 0x84DF;
	ACTIVE_TEXTURE_ARB :: 0x84E0;
	CLIENT_ACTIVE_TEXTURE_ARB :: 0x84E1;
	MAX_TEXTURE_UNITS_ARB :: 0x84E2;
	
	// ARB_occlusion_query
	QUERY_COUNTER_BITS_ARB :: 0x8864;
	CURRENT_QUERY_ARB :: 0x8865;
	QUERY_RESULT_ARB :: 0x8866;
	QUERY_RESULT_AVAILABLE_ARB :: 0x8867;
	SAMPLES_PASSED_ARB :: 0x8914;
	
	// ARB_occlusion_query2
	// ANY_SAMPLES_PASSED :: 0x8C2F;
	
	// ARB_parallel_shader_compile
	MAX_SHADER_COMPILER_THREADS_ARB :: 0x91B0;
	COMPLETION_STATUS_ARB :: 0x91B1;
	
	// ARB_pipeline_statistics_query
	VERTICES_SUBMITTED_ARB :: 0x82EE;
	PRIMITIVES_SUBMITTED_ARB :: 0x82EF;
	VERTEX_SHADER_INVOCATIONS_ARB :: 0x82F0;
	TESS_CONTROL_SHADER_PATCHES_ARB :: 0x82F1;
	TESS_EVALUATION_SHADER_INVOCATIONS_ARB :: 0x82F2;
	// GEOMETRY_SHADER_INVOCATIONS :: 0x887F;
	GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB :: 0x82F3;
	FRAGMENT_SHADER_INVOCATIONS_ARB :: 0x82F4;
	COMPUTE_SHADER_INVOCATIONS_ARB :: 0x82F5;
	CLIPPING_INPUT_PRIMITIVES_ARB :: 0x82F6;
	CLIPPING_OUTPUT_PRIMITIVES_ARB :: 0x82F7;
	
	// ARB_pixel_buffer_object
	PIXEL_PACK_BUFFER_ARB :: 0x88EB;
	PIXEL_UNPACK_BUFFER_ARB :: 0x88EC;
	PIXEL_PACK_BUFFER_BINDING_ARB :: 0x88ED;
	PIXEL_UNPACK_BUFFER_BINDING_ARB :: 0x88EF;
	
	// ARB_point_parameters
	POINT_SIZE_MIN_ARB :: 0x8126;
	POINT_SIZE_MAX_ARB :: 0x8127;
	POINT_FADE_THRESHOLD_SIZE_ARB :: 0x8128;
	POINT_DISTANCE_ATTENUATION_ARB :: 0x8129;
	
	// ARB_point_sprite
	POINT_SPRITE_ARB :: 0x8861;
	COORD_REPLACE_ARB :: 0x8862;
	
	// ARB_polygon_offset_clamp
	// POLYGON_OFFSET_CLAMP :: 0x8E1B;
	
	// ARB_post_depth_coverage
	
	// ARB_program_interface_query
	// UNIFORM :: 0x92E1;
	// UNIFORM_BLOCK :: 0x92E2;
	// PROGRAM_INPUT :: 0x92E3;
	// PROGRAM_OUTPUT :: 0x92E4;
	// BUFFER_VARIABLE :: 0x92E5;
	// SHADER_STORAGE_BLOCK :: 0x92E6;
	// ATOMIC_COUNTER_BUFFER :: 0x92C0;
	// VERTEX_SUBROUTINE :: 0x92E8;
	// TESS_CONTROL_SUBROUTINE :: 0x92E9;
	// TESS_EVALUATION_SUBROUTINE :: 0x92EA;
	// GEOMETRY_SUBROUTINE :: 0x92EB;
	// FRAGMENT_SUBROUTINE :: 0x92EC;
	// COMPUTE_SUBROUTINE :: 0x92ED;
	// VERTEX_SUBROUTINE_UNIFORM :: 0x92EE;
	// TESS_CONTROL_SUBROUTINE_UNIFORM :: 0x92EF;
	// TESS_EVALUATION_SUBROUTINE_UNIFORM :: 0x92F0;
	// GEOMETRY_SUBROUTINE_UNIFORM :: 0x92F1;
	// FRAGMENT_SUBROUTINE_UNIFORM :: 0x92F2;
	// COMPUTE_SUBROUTINE_UNIFORM :: 0x92F3;
	// TRANSFORM_FEEDBACK_VARYING :: 0x92F4;
	// ACTIVE_RESOURCES :: 0x92F5;
	// MAX_NAME_LENGTH :: 0x92F6;
	// MAX_NUM_ACTIVE_VARIABLES :: 0x92F7;
	// MAX_NUM_COMPATIBLE_SUBROUTINES :: 0x92F8;
	// NAME_LENGTH :: 0x92F9;
	// TYPE :: 0x92FA;
	// ARRAY_SIZE :: 0x92FB;
	// OFFSET :: 0x92FC;
	// BLOCK_INDEX :: 0x92FD;
	// ARRAY_STRIDE :: 0x92FE;
	// MATRIX_STRIDE :: 0x92FF;
	// IS_ROW_MAJOR :: 0x9300;
	// ATOMIC_COUNTER_BUFFER_INDEX :: 0x9301;
	// BUFFER_BINDING :: 0x9302;
	// BUFFER_DATA_SIZE :: 0x9303;
	// NUM_ACTIVE_VARIABLES :: 0x9304;
	// ACTIVE_VARIABLES :: 0x9305;
	// REFERENCED_BY_VERTEX_SHADER :: 0x9306;
	// REFERENCED_BY_TESS_CONTROL_SHADER :: 0x9307;
	// REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x9308;
	// REFERENCED_BY_GEOMETRY_SHADER :: 0x9309;
	// REFERENCED_BY_FRAGMENT_SHADER :: 0x930A;
	// REFERENCED_BY_COMPUTE_SHADER :: 0x930B;
	// TOP_LEVEL_ARRAY_SIZE :: 0x930C;
	// TOP_LEVEL_ARRAY_STRIDE :: 0x930D;
	// LOCATION :: 0x930E;
	// LOCATION_INDEX :: 0x930F;
	// IS_PER_PATCH :: 0x92E7;
	// NUM_COMPATIBLE_SUBROUTINES :: 0x8E4A;
	// COMPATIBLE_SUBROUTINES :: 0x8E4B;
	
	// ARB_provoking_vertex
	// QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION :: 0x8E4C;
	// FIRST_VERTEX_CONVENTION :: 0x8E4D;
	// LAST_VERTEX_CONVENTION :: 0x8E4E;
	// PROVOKING_VERTEX :: 0x8E4F;
	
	// ARB_query_buffer_object
	// QUERY_BUFFER :: 0x9192;
	// QUERY_BUFFER_BARRIER_BIT :: 0x00008000;
	// QUERY_BUFFER_BINDING :: 0x9193;
	// QUERY_RESULT_NO_WAIT :: 0x9194;
	
	// ARB_robust_buffer_access_behavior
	
	// ARB_robustness
	// NO_ERROR :: 0;
	CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB :: 0x00000004;
	LOSE_CONTEXT_ON_RESET_ARB :: 0x8252;
	GUILTY_CONTEXT_RESET_ARB :: 0x8253;
	INNOCENT_CONTEXT_RESET_ARB :: 0x8254;
	UNKNOWN_CONTEXT_RESET_ARB :: 0x8255;
	RESET_NOTIFICATION_STRATEGY_ARB :: 0x8256;
	NO_RESET_NOTIFICATION_ARB :: 0x8261;
	
	// ARB_robustness_isolation
	
	// ARB_sample_locations
	SAMPLE_LOCATION_SUBPIXEL_BITS_ARB :: 0x933D;
	SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB :: 0x933E;
	SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB :: 0x933F;
	PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB :: 0x9340;
	SAMPLE_LOCATION_ARB :: 0x8E50;
	PROGRAMMABLE_SAMPLE_LOCATION_ARB :: 0x9341;
	FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB :: 0x9342;
	FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB :: 0x9343;
	
	// ARB_sample_shading
	SAMPLE_SHADING_ARB :: 0x8C36;
	MIN_SAMPLE_SHADING_VALUE_ARB :: 0x8C37;
	
	// ARB_sampler_objects
	// SAMPLER_BINDING :: 0x8919;
	
	// ARB_seamless_cube_map
	// TEXTURE_CUBE_MAP_SEAMLESS :: 0x884F;
	
	// ARB_seamless_cubemap_per_texture
	// TEXTURE_CUBE_MAP_SEAMLESS :: 0x884F;
	
	// ARB_separate_shader_objects
	// VERTEX_SHADER_BIT :: 0x00000001;
	// FRAGMENT_SHADER_BIT :: 0x00000002;
	// GEOMETRY_SHADER_BIT :: 0x00000004;
	// TESS_CONTROL_SHADER_BIT :: 0x00000008;
	// TESS_EVALUATION_SHADER_BIT :: 0x00000010;
	// ALL_SHADER_BITS :: 0xFFFFFFFF;
	// PROGRAM_SEPARABLE :: 0x8258;
	// ACTIVE_PROGRAM :: 0x8259;
	// PROGRAM_PIPELINE_BINDING :: 0x825A;
	
	// ARB_shader_atomic_counter_ops
	
	// ARB_shader_atomic_counters
	// ATOMIC_COUNTER_BUFFER :: 0x92C0;
	// ATOMIC_COUNTER_BUFFER_BINDING :: 0x92C1;
	// ATOMIC_COUNTER_BUFFER_START :: 0x92C2;
	// ATOMIC_COUNTER_BUFFER_SIZE :: 0x92C3;
	// ATOMIC_COUNTER_BUFFER_DATA_SIZE :: 0x92C4;
	// ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS :: 0x92C5;
	// ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES :: 0x92C6;
	// ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER :: 0x92C7;
	// ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x92C8;
	// ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x92C9;
	// ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER :: 0x92CA;
	// ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER :: 0x92CB;
	// MAX_VERTEX_ATOMIC_COUNTER_BUFFERS :: 0x92CC;
	// MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS :: 0x92CD;
	// MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS :: 0x92CE;
	// MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS :: 0x92CF;
	// MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS :: 0x92D0;
	// MAX_COMBINED_ATOMIC_COUNTER_BUFFERS :: 0x92D1;
	// MAX_VERTEX_ATOMIC_COUNTERS :: 0x92D2;
	// MAX_TESS_CONTROL_ATOMIC_COUNTERS :: 0x92D3;
	// MAX_TESS_EVALUATION_ATOMIC_COUNTERS :: 0x92D4;
	// MAX_GEOMETRY_ATOMIC_COUNTERS :: 0x92D5;
	// MAX_FRAGMENT_ATOMIC_COUNTERS :: 0x92D6;
	// MAX_COMBINED_ATOMIC_COUNTERS :: 0x92D7;
	// MAX_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92D8;
	// MAX_ATOMIC_COUNTER_BUFFER_BINDINGS :: 0x92DC;
	// ACTIVE_ATOMIC_COUNTER_BUFFERS :: 0x92D9;
	// UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX :: 0x92DA;
	// UNSIGNED_INT_ATOMIC_COUNTER :: 0x92DB;
	
	// ARB_shader_ballot
	
	// ARB_shader_bit_encoding
	
	// ARB_shader_clock
	
	// ARB_shader_draw_parameters
	
	// ARB_shader_group_vote
	
	// ARB_shader_image_load_store
	// VERTEX_ATTRIB_ARRAY_BARRIER_BIT :: 0x00000001;
	// ELEMENT_ARRAY_BARRIER_BIT :: 0x00000002;
	// UNIFORM_BARRIER_BIT :: 0x00000004;
	// TEXTURE_FETCH_BARRIER_BIT :: 0x00000008;
	// SHADER_IMAGE_ACCESS_BARRIER_BIT :: 0x00000020;
	// COMMAND_BARRIER_BIT :: 0x00000040;
	// PIXEL_BUFFER_BARRIER_BIT :: 0x00000080;
	// TEXTURE_UPDATE_BARRIER_BIT :: 0x00000100;
	// BUFFER_UPDATE_BARRIER_BIT :: 0x00000200;
	// FRAMEBUFFER_BARRIER_BIT :: 0x00000400;
	// TRANSFORM_FEEDBACK_BARRIER_BIT :: 0x00000800;
	// ATOMIC_COUNTER_BARRIER_BIT :: 0x00001000;
	// ALL_BARRIER_BITS :: 0xFFFFFFFF;
	// MAX_IMAGE_UNITS :: 0x8F38;
	// MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS :: 0x8F39;
	// IMAGE_BINDING_NAME :: 0x8F3A;
	// IMAGE_BINDING_LEVEL :: 0x8F3B;
	// IMAGE_BINDING_LAYERED :: 0x8F3C;
	// IMAGE_BINDING_LAYER :: 0x8F3D;
	// IMAGE_BINDING_ACCESS :: 0x8F3E;
	// IMAGE_1D :: 0x904C;
	// IMAGE_2D :: 0x904D;
	// IMAGE_3D :: 0x904E;
	// IMAGE_2D_RECT :: 0x904F;
	// IMAGE_CUBE :: 0x9050;
	// IMAGE_BUFFER :: 0x9051;
	// IMAGE_1D_ARRAY :: 0x9052;
	// IMAGE_2D_ARRAY :: 0x9053;
	// IMAGE_CUBE_MAP_ARRAY :: 0x9054;
	// IMAGE_2D_MULTISAMPLE :: 0x9055;
	// IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9056;
	// INT_IMAGE_1D :: 0x9057;
	// INT_IMAGE_2D :: 0x9058;
	// INT_IMAGE_3D :: 0x9059;
	// INT_IMAGE_2D_RECT :: 0x905A;
	// INT_IMAGE_CUBE :: 0x905B;
	// INT_IMAGE_BUFFER :: 0x905C;
	// INT_IMAGE_1D_ARRAY :: 0x905D;
	// INT_IMAGE_2D_ARRAY :: 0x905E;
	// INT_IMAGE_CUBE_MAP_ARRAY :: 0x905F;
	// INT_IMAGE_2D_MULTISAMPLE :: 0x9060;
	// INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9061;
	// UNSIGNED_INT_IMAGE_1D :: 0x9062;
	// UNSIGNED_INT_IMAGE_2D :: 0x9063;
	// UNSIGNED_INT_IMAGE_3D :: 0x9064;
	// UNSIGNED_INT_IMAGE_2D_RECT :: 0x9065;
	// UNSIGNED_INT_IMAGE_CUBE :: 0x9066;
	// UNSIGNED_INT_IMAGE_BUFFER :: 0x9067;
	// UNSIGNED_INT_IMAGE_1D_ARRAY :: 0x9068;
	// UNSIGNED_INT_IMAGE_2D_ARRAY :: 0x9069;
	// UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY :: 0x906A;
	// UNSIGNED_INT_IMAGE_2D_MULTISAMPLE :: 0x906B;
	// UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x906C;
	// MAX_IMAGE_SAMPLES :: 0x906D;
	// IMAGE_BINDING_FORMAT :: 0x906E;
	// IMAGE_FORMAT_COMPATIBILITY_TYPE :: 0x90C7;
	// IMAGE_FORMAT_COMPATIBILITY_BY_SIZE :: 0x90C8;
	// IMAGE_FORMAT_COMPATIBILITY_BY_CLASS :: 0x90C9;
	// MAX_VERTEX_IMAGE_UNIFORMS :: 0x90CA;
	// MAX_TESS_CONTROL_IMAGE_UNIFORMS :: 0x90CB;
	// MAX_TESS_EVALUATION_IMAGE_UNIFORMS :: 0x90CC;
	// MAX_GEOMETRY_IMAGE_UNIFORMS :: 0x90CD;
	// MAX_FRAGMENT_IMAGE_UNIFORMS :: 0x90CE;
	// MAX_COMBINED_IMAGE_UNIFORMS :: 0x90CF;
	
	// ARB_shader_image_size
	
	// ARB_shader_objects
	PROGRAM_OBJECT_ARB :: 0x8B40;
	SHADER_OBJECT_ARB :: 0x8B48;
	OBJECT_TYPE_ARB :: 0x8B4E;
	OBJECT_SUBTYPE_ARB :: 0x8B4F;
	FLOAT_VEC2_ARB :: 0x8B50;
	FLOAT_VEC3_ARB :: 0x8B51;
	FLOAT_VEC4_ARB :: 0x8B52;
	INT_VEC2_ARB :: 0x8B53;
	INT_VEC3_ARB :: 0x8B54;
	INT_VEC4_ARB :: 0x8B55;
	BOOL_ARB :: 0x8B56;
	BOOL_VEC2_ARB :: 0x8B57;
	BOOL_VEC3_ARB :: 0x8B58;
	BOOL_VEC4_ARB :: 0x8B59;
	FLOAT_MAT2_ARB :: 0x8B5A;
	FLOAT_MAT3_ARB :: 0x8B5B;
	FLOAT_MAT4_ARB :: 0x8B5C;
	SAMPLER_1D_ARB :: 0x8B5D;
	SAMPLER_2D_ARB :: 0x8B5E;
	SAMPLER_3D_ARB :: 0x8B5F;
	SAMPLER_CUBE_ARB :: 0x8B60;
	SAMPLER_1D_SHADOW_ARB :: 0x8B61;
	SAMPLER_2D_SHADOW_ARB :: 0x8B62;
	SAMPLER_2D_RECT_ARB :: 0x8B63;
	SAMPLER_2D_RECT_SHADOW_ARB :: 0x8B64;
	OBJECT_DELETE_STATUS_ARB :: 0x8B80;
	OBJECT_COMPILE_STATUS_ARB :: 0x8B81;
	OBJECT_LINK_STATUS_ARB :: 0x8B82;
	OBJECT_VALIDATE_STATUS_ARB :: 0x8B83;
	OBJECT_INFO_LOG_LENGTH_ARB :: 0x8B84;
	OBJECT_ATTACHED_OBJECTS_ARB :: 0x8B85;
	OBJECT_ACTIVE_UNIFORMS_ARB :: 0x8B86;
	OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB :: 0x8B87;
	OBJECT_SHADER_SOURCE_LENGTH_ARB :: 0x8B88;
	
	// ARB_shader_precision
	
	// ARB_shader_stencil_export
	
	// ARB_shader_storage_buffer_object
	// SHADER_STORAGE_BUFFER :: 0x90D2;
	// SHADER_STORAGE_BUFFER_BINDING :: 0x90D3;
	// SHADER_STORAGE_BUFFER_START :: 0x90D4;
	// SHADER_STORAGE_BUFFER_SIZE :: 0x90D5;
	// MAX_VERTEX_SHADER_STORAGE_BLOCKS :: 0x90D6;
	// MAX_GEOMETRY_SHADER_STORAGE_BLOCKS :: 0x90D7;
	// MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS :: 0x90D8;
	// MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS :: 0x90D9;
	// MAX_FRAGMENT_SHADER_STORAGE_BLOCKS :: 0x90DA;
	// MAX_COMPUTE_SHADER_STORAGE_BLOCKS :: 0x90DB;
	// MAX_COMBINED_SHADER_STORAGE_BLOCKS :: 0x90DC;
	// MAX_SHADER_STORAGE_BUFFER_BINDINGS :: 0x90DD;
	// MAX_SHADER_STORAGE_BLOCK_SIZE :: 0x90DE;
	// SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT :: 0x90DF;
	// SHADER_STORAGE_BARRIER_BIT :: 0x00002000;
	// MAX_COMBINED_SHADER_OUTPUT_RESOURCES :: 0x8F39;
	// MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS :: 0x8F39;
	
	// ARB_shader_subroutine
	// ACTIVE_SUBROUTINES :: 0x8DE5;
	// ACTIVE_SUBROUTINE_UNIFORMS :: 0x8DE6;
	// ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8E47;
	// ACTIVE_SUBROUTINE_MAX_LENGTH :: 0x8E48;
	// ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH :: 0x8E49;
	// MAX_SUBROUTINES :: 0x8DE7;
	// MAX_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8DE8;
	// NUM_COMPATIBLE_SUBROUTINES :: 0x8E4A;
	// COMPATIBLE_SUBROUTINES :: 0x8E4B;
	// UNIFORM_SIZE :: 0x8A38;
	// UNIFORM_NAME_LENGTH :: 0x8A39;
	
	// ARB_shader_texture_image_samples
	
	// ARB_shader_texture_lod
	
	// ARB_shader_viewport_layer_array
	
	// ARB_shading_language_100
	SHADING_LANGUAGE_VERSION_ARB :: 0x8B8C;
	
	// ARB_shading_language_420pack
	
	// ARB_shading_language_include
	SHADER_INCLUDE_ARB :: 0x8DAE;
	NAMED_STRING_LENGTH_ARB :: 0x8DE9;
	NAMED_STRING_TYPE_ARB :: 0x8DEA;
	
	// ARB_shading_language_packing
	
	// ARB_shadow
	TEXTURE_COMPARE_MODE_ARB :: 0x884C;
	TEXTURE_COMPARE_FUNC_ARB :: 0x884D;
	COMPARE_R_TO_TEXTURE_ARB :: 0x884E;
	
	// ARB_shadow_ambient
	TEXTURE_COMPARE_FAIL_VALUE_ARB :: 0x80BF;
	
	// ARB_sparse_buffer
	SPARSE_STORAGE_BIT_ARB :: 0x0400;
	SPARSE_BUFFER_PAGE_SIZE_ARB :: 0x82F8;
	
	// ARB_sparse_texture
	TEXTURE_SPARSE_ARB :: 0x91A6;
	VIRTUAL_PAGE_SIZE_INDEX_ARB :: 0x91A7;
	NUM_SPARSE_LEVELS_ARB :: 0x91AA;
	NUM_VIRTUAL_PAGE_SIZES_ARB :: 0x91A8;
	VIRTUAL_PAGE_SIZE_X_ARB :: 0x9195;
	VIRTUAL_PAGE_SIZE_Y_ARB :: 0x9196;
	VIRTUAL_PAGE_SIZE_Z_ARB :: 0x9197;
	MAX_SPARSE_TEXTURE_SIZE_ARB :: 0x9198;
	MAX_SPARSE_3D_TEXTURE_SIZE_ARB :: 0x9199;
	MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB :: 0x919A;
	SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB :: 0x91A9;
	
	// ARB_sparse_texture2
	
	// ARB_sparse_texture_clamp
	
	// ARB_spirv_extensions
	// SPIR_V_EXTENSIONS :: 0x9553;
	// NUM_SPIR_V_EXTENSIONS :: 0x9554;
	
	// ARB_stencil_texturing
	// DEPTH_STENCIL_TEXTURE_MODE :: 0x90EA;
	
	// ARB_sync
	// MAX_SERVER_WAIT_TIMEOUT :: 0x9111;
	// OBJECT_TYPE :: 0x9112;
	// SYNC_CONDITION :: 0x9113;
	// SYNC_STATUS :: 0x9114;
	// SYNC_FLAGS :: 0x9115;
	// SYNC_FENCE :: 0x9116;
	// SYNC_GPU_COMMANDS_COMPLETE :: 0x9117;
	// UNSIGNALED :: 0x9118;
	// SIGNALED :: 0x9119;
	// ALREADY_SIGNALED :: 0x911A;
	// TIMEOUT_EXPIRED :: 0x911B;
	// CONDITION_SATISFIED :: 0x911C;
	// WAIT_FAILED :: 0x911D;
	// SYNC_FLUSH_COMMANDS_BIT :: 0x00000001;
	// TIMEOUT_IGNORED :: 0xFFFFFFFFFFFFFFFF;
	
	// ARB_tessellation_shader
	// PATCHES :: 0x000E;
	// PATCH_VERTICES :: 0x8E72;
	// PATCH_DEFAULT_INNER_LEVEL :: 0x8E73;
	// PATCH_DEFAULT_OUTER_LEVEL :: 0x8E74;
	// TESS_CONTROL_OUTPUT_VERTICES :: 0x8E75;
	// TESS_GEN_MODE :: 0x8E76;
	// TESS_GEN_SPACING :: 0x8E77;
	// TESS_GEN_VERTEX_ORDER :: 0x8E78;
	// TESS_GEN_POINT_MODE :: 0x8E79;
	// TRIANGLES :: 0x0004;
	// ISOLINES :: 0x8E7A;
	// QUADS :: 0x0007;
	// EQUAL :: 0x0202;
	// FRACTIONAL_ODD :: 0x8E7B;
	// FRACTIONAL_EVEN :: 0x8E7C;
	// CCW :: 0x0901;
	// CW :: 0x0900;
	// MAX_PATCH_VERTICES :: 0x8E7D;
	// MAX_TESS_GEN_LEVEL :: 0x8E7E;
	// MAX_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E7F;
	// MAX_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E80;
	// MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS :: 0x8E81;
	// MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS :: 0x8E82;
	// MAX_TESS_CONTROL_OUTPUT_COMPONENTS :: 0x8E83;
	// MAX_TESS_PATCH_COMPONENTS :: 0x8E84;
	// MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS :: 0x8E85;
	// MAX_TESS_EVALUATION_OUTPUT_COMPONENTS :: 0x8E86;
	// MAX_TESS_CONTROL_UNIFORM_BLOCKS :: 0x8E89;
	// MAX_TESS_EVALUATION_UNIFORM_BLOCKS :: 0x8E8A;
	// MAX_TESS_CONTROL_INPUT_COMPONENTS :: 0x886C;
	// MAX_TESS_EVALUATION_INPUT_COMPONENTS :: 0x886D;
	// MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E1E;
	// MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E1F;
	// UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x84F0;
	// UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x84F1;
	// TESS_EVALUATION_SHADER :: 0x8E87;
	// TESS_CONTROL_SHADER :: 0x8E88;
	
	// ARB_texture_barrier
	
	// ARB_texture_border_clamp
	CLAMP_TO_BORDER_ARB :: 0x812D;
	
	// ARB_texture_buffer_object
	TEXTURE_BUFFER_ARB :: 0x8C2A;
	MAX_TEXTURE_BUFFER_SIZE_ARB :: 0x8C2B;
	TEXTURE_BINDING_BUFFER_ARB :: 0x8C2C;
	TEXTURE_BUFFER_DATA_STORE_BINDING_ARB :: 0x8C2D;
	TEXTURE_BUFFER_FORMAT_ARB :: 0x8C2E;
	
	// ARB_texture_buffer_object_rgb32
	// RGB32F :: 0x8815;
	// RGB32UI :: 0x8D71;
	// RGB32I :: 0x8D83;
	
	// ARB_texture_buffer_range
	// TEXTURE_BUFFER_OFFSET :: 0x919D;
	// TEXTURE_BUFFER_SIZE :: 0x919E;
	// TEXTURE_BUFFER_OFFSET_ALIGNMENT :: 0x919F;
	
	// ARB_texture_compression
	COMPRESSED_ALPHA_ARB :: 0x84E9;
	COMPRESSED_LUMINANCE_ARB :: 0x84EA;
	COMPRESSED_LUMINANCE_ALPHA_ARB :: 0x84EB;
	COMPRESSED_INTENSITY_ARB :: 0x84EC;
	COMPRESSED_RGB_ARB :: 0x84ED;
	COMPRESSED_RGBA_ARB :: 0x84EE;
	TEXTURE_COMPRESSION_HINT_ARB :: 0x84EF;
	TEXTURE_COMPRESSED_IMAGE_SIZE_ARB :: 0x86A0;
	TEXTURE_COMPRESSED_ARB :: 0x86A1;
	NUM_COMPRESSED_TEXTURE_FORMATS_ARB :: 0x86A2;
	COMPRESSED_TEXTURE_FORMATS_ARB :: 0x86A3;
	
	// ARB_texture_compression_bptc
	COMPRESSED_RGBA_BPTC_UNORM_ARB :: 0x8E8C;
	COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB :: 0x8E8D;
	COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB :: 0x8E8E;
	COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB :: 0x8E8F;
	
	// ARB_texture_compression_rgtc
	// COMPRESSED_RED_RGTC1 :: 0x8DBB;
	// COMPRESSED_SIGNED_RED_RGTC1 :: 0x8DBC;
	// COMPRESSED_RG_RGTC2 :: 0x8DBD;
	// COMPRESSED_SIGNED_RG_RGTC2 :: 0x8DBE;
	
	// ARB_texture_cube_map
	NORMAL_MAP_ARB :: 0x8511;
	REFLECTION_MAP_ARB :: 0x8512;
	TEXTURE_CUBE_MAP_ARB :: 0x8513;
	TEXTURE_BINDING_CUBE_MAP_ARB :: 0x8514;
	TEXTURE_CUBE_MAP_POSITIVE_X_ARB :: 0x8515;
	TEXTURE_CUBE_MAP_NEGATIVE_X_ARB :: 0x8516;
	TEXTURE_CUBE_MAP_POSITIVE_Y_ARB :: 0x8517;
	TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB :: 0x8518;
	TEXTURE_CUBE_MAP_POSITIVE_Z_ARB :: 0x8519;
	TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB :: 0x851A;
	PROXY_TEXTURE_CUBE_MAP_ARB :: 0x851B;
	MAX_CUBE_MAP_TEXTURE_SIZE_ARB :: 0x851C;
	
	// ARB_texture_cube_map_array
	TEXTURE_CUBE_MAP_ARRAY_ARB :: 0x9009;
	TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB :: 0x900A;
	PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB :: 0x900B;
	SAMPLER_CUBE_MAP_ARRAY_ARB :: 0x900C;
	SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB :: 0x900D;
	INT_SAMPLER_CUBE_MAP_ARRAY_ARB :: 0x900E;
	UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB :: 0x900F;
	
	// ARB_texture_env_add
	
	// ARB_texture_env_combine
	COMBINE_ARB :: 0x8570;
	COMBINE_RGB_ARB :: 0x8571;
	COMBINE_ALPHA_ARB :: 0x8572;
	SOURCE0_RGB_ARB :: 0x8580;
	SOURCE1_RGB_ARB :: 0x8581;
	SOURCE2_RGB_ARB :: 0x8582;
	SOURCE0_ALPHA_ARB :: 0x8588;
	SOURCE1_ALPHA_ARB :: 0x8589;
	SOURCE2_ALPHA_ARB :: 0x858A;
	OPERAND0_RGB_ARB :: 0x8590;
	OPERAND1_RGB_ARB :: 0x8591;
	OPERAND2_RGB_ARB :: 0x8592;
	OPERAND0_ALPHA_ARB :: 0x8598;
	OPERAND1_ALPHA_ARB :: 0x8599;
	OPERAND2_ALPHA_ARB :: 0x859A;
	RGB_SCALE_ARB :: 0x8573;
	ADD_SIGNED_ARB :: 0x8574;
	INTERPOLATE_ARB :: 0x8575;
	SUBTRACT_ARB :: 0x84E7;
	CONSTANT_ARB :: 0x8576;
	PRIMARY_COLOR_ARB :: 0x8577;
	PREVIOUS_ARB :: 0x8578;
	
	// ARB_texture_env_crossbar
	
	// ARB_texture_env_dot3
	DOT3_RGB_ARB :: 0x86AE;
	DOT3_RGBA_ARB :: 0x86AF;
	
	// ARB_texture_filter_anisotropic
	// TEXTURE_MAX_ANISOTROPY :: 0x84FE;
	// MAX_TEXTURE_MAX_ANISOTROPY :: 0x84FF;
	
	// ARB_texture_filter_minmax
	TEXTURE_REDUCTION_MODE_ARB :: 0x9366;
	WEIGHTED_AVERAGE_ARB :: 0x9367;
	
	// ARB_texture_float
	TEXTURE_RED_TYPE_ARB :: 0x8C10;
	TEXTURE_GREEN_TYPE_ARB :: 0x8C11;
	TEXTURE_BLUE_TYPE_ARB :: 0x8C12;
	TEXTURE_ALPHA_TYPE_ARB :: 0x8C13;
	TEXTURE_LUMINANCE_TYPE_ARB :: 0x8C14;
	TEXTURE_INTENSITY_TYPE_ARB :: 0x8C15;
	TEXTURE_DEPTH_TYPE_ARB :: 0x8C16;
	UNSIGNED_NORMALIZED_ARB :: 0x8C17;
	RGBA32F_ARB :: 0x8814;
	RGB32F_ARB :: 0x8815;
	ALPHA32F_ARB :: 0x8816;
	INTENSITY32F_ARB :: 0x8817;
	LUMINANCE32F_ARB :: 0x8818;
	LUMINANCE_ALPHA32F_ARB :: 0x8819;
	RGBA16F_ARB :: 0x881A;
	RGB16F_ARB :: 0x881B;
	ALPHA16F_ARB :: 0x881C;
	INTENSITY16F_ARB :: 0x881D;
	LUMINANCE16F_ARB :: 0x881E;
	LUMINANCE_ALPHA16F_ARB :: 0x881F;
	
	// ARB_texture_gather
	MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB :: 0x8E5E;
	MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB :: 0x8E5F;
	MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB :: 0x8F9F;
	
	// ARB_texture_mirror_clamp_to_edge
	// MIRROR_CLAMP_TO_EDGE :: 0x8743;
	
	// ARB_texture_mirrored_repeat
	MIRRORED_REPEAT_ARB :: 0x8370;
	
	// ARB_texture_multisample
	// SAMPLE_POSITION :: 0x8E50;
	// SAMPLE_MASK :: 0x8E51;
	// SAMPLE_MASK_VALUE :: 0x8E52;
	// MAX_SAMPLE_MASK_WORDS :: 0x8E59;
	// TEXTURE_2D_MULTISAMPLE :: 0x9100;
	// PROXY_TEXTURE_2D_MULTISAMPLE :: 0x9101;
	// TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9102;
	// PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9103;
	// TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104;
	// TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105;
	// TEXTURE_SAMPLES :: 0x9106;
	// TEXTURE_FIXED_SAMPLE_LOCATIONS :: 0x9107;
	// SAMPLER_2D_MULTISAMPLE :: 0x9108;
	// INT_SAMPLER_2D_MULTISAMPLE :: 0x9109;
	// UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE :: 0x910A;
	// SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910B;
	// INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910C;
	// UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910D;
	// MAX_COLOR_TEXTURE_SAMPLES :: 0x910E;
	// MAX_DEPTH_TEXTURE_SAMPLES :: 0x910F;
	// MAX_INTEGER_SAMPLES :: 0x9110;
	
	// ARB_texture_non_power_of_two
	
	// ARB_texture_query_levels
	
	// ARB_texture_query_lod
	
	// ARB_texture_rectangle
	TEXTURE_RECTANGLE_ARB :: 0x84F5;
	TEXTURE_BINDING_RECTANGLE_ARB :: 0x84F6;
	PROXY_TEXTURE_RECTANGLE_ARB :: 0x84F7;
	MAX_RECTANGLE_TEXTURE_SIZE_ARB :: 0x84F8;
	
	// ARB_texture_rg
	// RG :: 0x8227;
	// RG_INTEGER :: 0x8228;
	// R8 :: 0x8229;
	// R16 :: 0x822A;
	// RG8 :: 0x822B;
	// RG16 :: 0x822C;
	// R16F :: 0x822D;
	// R32F :: 0x822E;
	// RG16F :: 0x822F;
	// RG32F :: 0x8230;
	// R8I :: 0x8231;
	// R8UI :: 0x8232;
	// R16I :: 0x8233;
	// R16UI :: 0x8234;
	// R32I :: 0x8235;
	// R32UI :: 0x8236;
	// RG8I :: 0x8237;
	// RG8UI :: 0x8238;
	// RG16I :: 0x8239;
	// RG16UI :: 0x823A;
	// RG32I :: 0x823B;
	// RG32UI :: 0x823C;
	
	// ARB_texture_rgb10_a2ui
	// RGB10_A2UI :: 0x906F;
	
	// ARB_texture_stencil8
	// STENCIL_INDEX :: 0x1901;
	// STENCIL_INDEX8 :: 0x8D48;
	
	// ARB_texture_storage
	// TEXTURE_IMMUTABLE_FORMAT :: 0x912F;
	
	// ARB_texture_storage_multisample
	
	// ARB_texture_swizzle
	// TEXTURE_SWIZZLE_R :: 0x8E42;
	// TEXTURE_SWIZZLE_G :: 0x8E43;
	// TEXTURE_SWIZZLE_B :: 0x8E44;
	// TEXTURE_SWIZZLE_A :: 0x8E45;
	// TEXTURE_SWIZZLE_RGBA :: 0x8E46;
	
	// ARB_texture_view
	// TEXTURE_VIEW_MIN_LEVEL :: 0x82DB;
	// TEXTURE_VIEW_NUM_LEVELS :: 0x82DC;
	// TEXTURE_VIEW_MIN_LAYER :: 0x82DD;
	// TEXTURE_VIEW_NUM_LAYERS :: 0x82DE;
	// TEXTURE_IMMUTABLE_LEVELS :: 0x82DF;
	
	// ARB_timer_query
	// TIME_ELAPSED :: 0x88BF;
	// TIMESTAMP :: 0x8E28;
	
	// ARB_transform_feedback2
	// TRANSFORM_FEEDBACK :: 0x8E22;
	// TRANSFORM_FEEDBACK_BUFFER_PAUSED :: 0x8E23;
	// TRANSFORM_FEEDBACK_BUFFER_ACTIVE :: 0x8E24;
	// TRANSFORM_FEEDBACK_BINDING :: 0x8E25;
	
	// ARB_transform_feedback3
	// MAX_TRANSFORM_FEEDBACK_BUFFERS :: 0x8E70;
	// MAX_VERTEX_STREAMS :: 0x8E71;
	
	// ARB_transform_feedback_instanced
	
	// ARB_transform_feedback_overflow_query
	TRANSFORM_FEEDBACK_OVERFLOW_ARB :: 0x82EC;
	TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB :: 0x82ED;
	
	// ARB_transpose_matrix
	TRANSPOSE_MODELVIEW_MATRIX_ARB :: 0x84E3;
	TRANSPOSE_PROJECTION_MATRIX_ARB :: 0x84E4;
	TRANSPOSE_TEXTURE_MATRIX_ARB :: 0x84E5;
	TRANSPOSE_COLOR_MATRIX_ARB :: 0x84E6;
	
	// ARB_uniform_buffer_object
	// UNIFORM_BUFFER :: 0x8A11;
	// UNIFORM_BUFFER_BINDING :: 0x8A28;
	// UNIFORM_BUFFER_START :: 0x8A29;
	// UNIFORM_BUFFER_SIZE :: 0x8A2A;
	// MAX_VERTEX_UNIFORM_BLOCKS :: 0x8A2B;
	// MAX_GEOMETRY_UNIFORM_BLOCKS :: 0x8A2C;
	// MAX_FRAGMENT_UNIFORM_BLOCKS :: 0x8A2D;
	// MAX_COMBINED_UNIFORM_BLOCKS :: 0x8A2E;
	// MAX_UNIFORM_BUFFER_BINDINGS :: 0x8A2F;
	// MAX_UNIFORM_BLOCK_SIZE :: 0x8A30;
	// MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS :: 0x8A31;
	// MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS :: 0x8A32;
	// MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :: 0x8A33;
	// UNIFORM_BUFFER_OFFSET_ALIGNMENT :: 0x8A34;
	// ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH :: 0x8A35;
	// ACTIVE_UNIFORM_BLOCKS :: 0x8A36;
	// UNIFORM_TYPE :: 0x8A37;
	// UNIFORM_SIZE :: 0x8A38;
	// UNIFORM_NAME_LENGTH :: 0x8A39;
	// UNIFORM_BLOCK_INDEX :: 0x8A3A;
	// UNIFORM_OFFSET :: 0x8A3B;
	// UNIFORM_ARRAY_STRIDE :: 0x8A3C;
	// UNIFORM_MATRIX_STRIDE :: 0x8A3D;
	// UNIFORM_IS_ROW_MAJOR :: 0x8A3E;
	// UNIFORM_BLOCK_BINDING :: 0x8A3F;
	// UNIFORM_BLOCK_DATA_SIZE :: 0x8A40;
	// UNIFORM_BLOCK_NAME_LENGTH :: 0x8A41;
	// UNIFORM_BLOCK_ACTIVE_UNIFORMS :: 0x8A42;
	// UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES :: 0x8A43;
	// UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :: 0x8A44;
	// UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER :: 0x8A45;
	// UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :: 0x8A46;
	// INVALID_INDEX :: 0xFFFFFFFF;
	
	// ARB_vertex_array_bgra
	// BGRA :: 0x80E1;
	
	// ARB_vertex_array_object
	// VERTEX_ARRAY_BINDING :: 0x85B5;
	
	// ARB_vertex_attrib_64bit
	// RGB32I :: 0x8D83;
	// DOUBLE_VEC2 :: 0x8FFC;
	// DOUBLE_VEC3 :: 0x8FFD;
	// DOUBLE_VEC4 :: 0x8FFE;
	// DOUBLE_MAT2 :: 0x8F46;
	// DOUBLE_MAT3 :: 0x8F47;
	// DOUBLE_MAT4 :: 0x8F48;
	// DOUBLE_MAT2x3 :: 0x8F49;
	// DOUBLE_MAT2x4 :: 0x8F4A;
	// DOUBLE_MAT3x2 :: 0x8F4B;
	// DOUBLE_MAT3x4 :: 0x8F4C;
	// DOUBLE_MAT4x2 :: 0x8F4D;
	// DOUBLE_MAT4x3 :: 0x8F4E;
	
	// ARB_vertex_attrib_binding
	// VERTEX_ATTRIB_BINDING :: 0x82D4;
	// VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D5;
	// VERTEX_BINDING_DIVISOR :: 0x82D6;
	// VERTEX_BINDING_OFFSET :: 0x82D7;
	// VERTEX_BINDING_STRIDE :: 0x82D8;
	// MAX_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D9;
	// MAX_VERTEX_ATTRIB_BINDINGS :: 0x82DA;
	
	// ARB_vertex_blend
	MAX_VERTEX_UNITS_ARB :: 0x86A4;
	ACTIVE_VERTEX_UNITS_ARB :: 0x86A5;
	WEIGHT_SUM_UNITY_ARB :: 0x86A6;
	VERTEX_BLEND_ARB :: 0x86A7;
	CURRENT_WEIGHT_ARB :: 0x86A8;
	WEIGHT_ARRAY_TYPE_ARB :: 0x86A9;
	WEIGHT_ARRAY_STRIDE_ARB :: 0x86AA;
	WEIGHT_ARRAY_SIZE_ARB :: 0x86AB;
	WEIGHT_ARRAY_POINTER_ARB :: 0x86AC;
	WEIGHT_ARRAY_ARB :: 0x86AD;
	MODELVIEW0_ARB :: 0x1700;
	MODELVIEW1_ARB :: 0x850A;
	MODELVIEW2_ARB :: 0x8722;
	MODELVIEW3_ARB :: 0x8723;
	MODELVIEW4_ARB :: 0x8724;
	MODELVIEW5_ARB :: 0x8725;
	MODELVIEW6_ARB :: 0x8726;
	MODELVIEW7_ARB :: 0x8727;
	MODELVIEW8_ARB :: 0x8728;
	MODELVIEW9_ARB :: 0x8729;
	MODELVIEW10_ARB :: 0x872A;
	MODELVIEW11_ARB :: 0x872B;
	MODELVIEW12_ARB :: 0x872C;
	MODELVIEW13_ARB :: 0x872D;
	MODELVIEW14_ARB :: 0x872E;
	MODELVIEW15_ARB :: 0x872F;
	MODELVIEW16_ARB :: 0x8730;
	MODELVIEW17_ARB :: 0x8731;
	MODELVIEW18_ARB :: 0x8732;
	MODELVIEW19_ARB :: 0x8733;
	MODELVIEW20_ARB :: 0x8734;
	MODELVIEW21_ARB :: 0x8735;
	MODELVIEW22_ARB :: 0x8736;
	MODELVIEW23_ARB :: 0x8737;
	MODELVIEW24_ARB :: 0x8738;
	MODELVIEW25_ARB :: 0x8739;
	MODELVIEW26_ARB :: 0x873A;
	MODELVIEW27_ARB :: 0x873B;
	MODELVIEW28_ARB :: 0x873C;
	MODELVIEW29_ARB :: 0x873D;
	MODELVIEW30_ARB :: 0x873E;
	MODELVIEW31_ARB :: 0x873F;
	
	// ARB_vertex_buffer_object
	BUFFER_SIZE_ARB :: 0x8764;
	BUFFER_USAGE_ARB :: 0x8765;
	ARRAY_BUFFER_ARB :: 0x8892;
	ELEMENT_ARRAY_BUFFER_ARB :: 0x8893;
	ARRAY_BUFFER_BINDING_ARB :: 0x8894;
	ELEMENT_ARRAY_BUFFER_BINDING_ARB :: 0x8895;
	VERTEX_ARRAY_BUFFER_BINDING_ARB :: 0x8896;
	NORMAL_ARRAY_BUFFER_BINDING_ARB :: 0x8897;
	COLOR_ARRAY_BUFFER_BINDING_ARB :: 0x8898;
	INDEX_ARRAY_BUFFER_BINDING_ARB :: 0x8899;
	TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB :: 0x889A;
	EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB :: 0x889B;
	SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB :: 0x889C;
	FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB :: 0x889D;
	WEIGHT_ARRAY_BUFFER_BINDING_ARB :: 0x889E;
	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB :: 0x889F;
	READ_ONLY_ARB :: 0x88B8;
	WRITE_ONLY_ARB :: 0x88B9;
	READ_WRITE_ARB :: 0x88BA;
	BUFFER_ACCESS_ARB :: 0x88BB;
	BUFFER_MAPPED_ARB :: 0x88BC;
	BUFFER_MAP_POINTER_ARB :: 0x88BD;
	STREAM_DRAW_ARB :: 0x88E0;
	STREAM_READ_ARB :: 0x88E1;
	STREAM_COPY_ARB :: 0x88E2;
	STATIC_DRAW_ARB :: 0x88E4;
	STATIC_READ_ARB :: 0x88E5;
	STATIC_COPY_ARB :: 0x88E6;
	DYNAMIC_DRAW_ARB :: 0x88E8;
	DYNAMIC_READ_ARB :: 0x88E9;
	DYNAMIC_COPY_ARB :: 0x88EA;
	
	// ARB_vertex_program
	COLOR_SUM_ARB :: 0x8458;
	VERTEX_PROGRAM_ARB :: 0x8620;
	VERTEX_ATTRIB_ARRAY_ENABLED_ARB :: 0x8622;
	VERTEX_ATTRIB_ARRAY_SIZE_ARB :: 0x8623;
	VERTEX_ATTRIB_ARRAY_STRIDE_ARB :: 0x8624;
	VERTEX_ATTRIB_ARRAY_TYPE_ARB :: 0x8625;
	CURRENT_VERTEX_ATTRIB_ARB :: 0x8626;
	// PROGRAM_LENGTH_ARB :: 0x8627;
	// PROGRAM_STRING_ARB :: 0x8628;
	// MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB :: 0x862E;
	// MAX_PROGRAM_MATRICES_ARB :: 0x862F;
	// CURRENT_MATRIX_STACK_DEPTH_ARB :: 0x8640;
	// CURRENT_MATRIX_ARB :: 0x8641;
	VERTEX_PROGRAM_POINT_SIZE_ARB :: 0x8642;
	VERTEX_PROGRAM_TWO_SIDE_ARB :: 0x8643;
	VERTEX_ATTRIB_ARRAY_POINTER_ARB :: 0x8645;
	// PROGRAM_ERROR_POSITION_ARB :: 0x864B;
	// PROGRAM_BINDING_ARB :: 0x8677;
	MAX_VERTEX_ATTRIBS_ARB :: 0x8869;
	VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB :: 0x886A;
	// PROGRAM_ERROR_STRING_ARB :: 0x8874;
	// PROGRAM_FORMAT_ASCII_ARB :: 0x8875;
	// PROGRAM_FORMAT_ARB :: 0x8876;
	// PROGRAM_INSTRUCTIONS_ARB :: 0x88A0;
	// MAX_PROGRAM_INSTRUCTIONS_ARB :: 0x88A1;
	// PROGRAM_NATIVE_INSTRUCTIONS_ARB :: 0x88A2;
	// MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB :: 0x88A3;
	// PROGRAM_TEMPORARIES_ARB :: 0x88A4;
	// MAX_PROGRAM_TEMPORARIES_ARB :: 0x88A5;
	// PROGRAM_NATIVE_TEMPORARIES_ARB :: 0x88A6;
	// MAX_PROGRAM_NATIVE_TEMPORARIES_ARB :: 0x88A7;
	// PROGRAM_PARAMETERS_ARB :: 0x88A8;
	// MAX_PROGRAM_PARAMETERS_ARB :: 0x88A9;
	// PROGRAM_NATIVE_PARAMETERS_ARB :: 0x88AA;
	// MAX_PROGRAM_NATIVE_PARAMETERS_ARB :: 0x88AB;
	// PROGRAM_ATTRIBS_ARB :: 0x88AC;
	// MAX_PROGRAM_ATTRIBS_ARB :: 0x88AD;
	// PROGRAM_NATIVE_ATTRIBS_ARB :: 0x88AE;
	// MAX_PROGRAM_NATIVE_ATTRIBS_ARB :: 0x88AF;
	PROGRAM_ADDRESS_REGISTERS_ARB :: 0x88B0;
	MAX_PROGRAM_ADDRESS_REGISTERS_ARB :: 0x88B1;
	PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB :: 0x88B2;
	MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB :: 0x88B3;
	// MAX_PROGRAM_LOCAL_PARAMETERS_ARB :: 0x88B4;
	// MAX_PROGRAM_ENV_PARAMETERS_ARB :: 0x88B5;
	// PROGRAM_UNDER_NATIVE_LIMITS_ARB :: 0x88B6;
	// TRANSPOSE_CURRENT_MATRIX_ARB :: 0x88B7;
	// MATRIX0_ARB :: 0x88C0;
	// MATRIX1_ARB :: 0x88C1;
	// MATRIX2_ARB :: 0x88C2;
	// MATRIX3_ARB :: 0x88C3;
	// MATRIX4_ARB :: 0x88C4;
	// MATRIX5_ARB :: 0x88C5;
	// MATRIX6_ARB :: 0x88C6;
	// MATRIX7_ARB :: 0x88C7;
	// MATRIX8_ARB :: 0x88C8;
	// MATRIX9_ARB :: 0x88C9;
	// MATRIX10_ARB :: 0x88CA;
	// MATRIX11_ARB :: 0x88CB;
	// MATRIX12_ARB :: 0x88CC;
	// MATRIX13_ARB :: 0x88CD;
	// MATRIX14_ARB :: 0x88CE;
	// MATRIX15_ARB :: 0x88CF;
	// MATRIX16_ARB :: 0x88D0;
	// MATRIX17_ARB :: 0x88D1;
	// MATRIX18_ARB :: 0x88D2;
	// MATRIX19_ARB :: 0x88D3;
	// MATRIX20_ARB :: 0x88D4;
	// MATRIX21_ARB :: 0x88D5;
	// MATRIX22_ARB :: 0x88D6;
	// MATRIX23_ARB :: 0x88D7;
	// MATRIX24_ARB :: 0x88D8;
	// MATRIX25_ARB :: 0x88D9;
	// MATRIX26_ARB :: 0x88DA;
	// MATRIX27_ARB :: 0x88DB;
	// MATRIX28_ARB :: 0x88DC;
	// MATRIX29_ARB :: 0x88DD;
	// MATRIX30_ARB :: 0x88DE;
	// MATRIX31_ARB :: 0x88DF;
	
	// ARB_vertex_shader
	VERTEX_SHADER_ARB :: 0x8B31;
	MAX_VERTEX_UNIFORM_COMPONENTS_ARB :: 0x8B4A;
	MAX_VARYING_FLOATS_ARB :: 0x8B4B;
	MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB :: 0x8B4C;
	MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB :: 0x8B4D;
	OBJECT_ACTIVE_ATTRIBUTES_ARB :: 0x8B89;
	OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB :: 0x8B8A;
	// MAX_VERTEX_ATTRIBS_ARB :: 0x8869;
	// MAX_TEXTURE_IMAGE_UNITS_ARB :: 0x8872;
	// MAX_TEXTURE_COORDS_ARB :: 0x8871;
	// VERTEX_PROGRAM_POINT_SIZE_ARB :: 0x8642;
	// VERTEX_PROGRAM_TWO_SIDE_ARB :: 0x8643;
	// VERTEX_ATTRIB_ARRAY_ENABLED_ARB :: 0x8622;
	// VERTEX_ATTRIB_ARRAY_SIZE_ARB :: 0x8623;
	// VERTEX_ATTRIB_ARRAY_STRIDE_ARB :: 0x8624;
	// VERTEX_ATTRIB_ARRAY_TYPE_ARB :: 0x8625;
	// VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB :: 0x886A;
	// CURRENT_VERTEX_ATTRIB_ARB :: 0x8626;
	// VERTEX_ATTRIB_ARRAY_POINTER_ARB :: 0x8645;
	// FLOAT :: 0x1406;
	// FLOAT_VEC2_ARB :: 0x8B50;
	// FLOAT_VEC3_ARB :: 0x8B51;
	// FLOAT_VEC4_ARB :: 0x8B52;
	// FLOAT_MAT2_ARB :: 0x8B5A;
	// FLOAT_MAT3_ARB :: 0x8B5B;
	// FLOAT_MAT4_ARB :: 0x8B5C;
	
	// ARB_vertex_type_10f_11f_11f_rev
	// UNSIGNED_INT_10F_11F_11F_REV :: 0x8C3B;
	
	// ARB_vertex_type_2_10_10_10_rev
	// UNSIGNED_INT_2_10_10_10_REV :: 0x8368;
	// INT_2_10_10_10_REV :: 0x8D9F;
	
	// ARB_viewport_array
	// SCISSOR_BOX :: 0x0C10;
	// VIEWPORT :: 0x0BA2;
	// DEPTH_RANGE :: 0x0B70;
	// SCISSOR_TEST :: 0x0C11;
	// MAX_VIEWPORTS :: 0x825B;
	// VIEWPORT_SUBPIXEL_BITS :: 0x825C;
	// VIEWPORT_BOUNDS_RANGE :: 0x825D;
	// LAYER_PROVOKING_VERTEX :: 0x825E;
	// VIEWPORT_INDEX_PROVOKING_VERTEX :: 0x825F;
	// UNDEFINED_VERTEX :: 0x8260;
	// FIRST_VERTEX_CONVENTION :: 0x8E4D;
	// LAST_VERTEX_CONVENTION :: 0x8E4E;
	// PROVOKING_VERTEX :: 0x8E4F;
	
	// ARB_window_pos
	
	// ATI_draw_buffers
	MAX_DRAW_BUFFERS_ATI :: 0x8824;
	DRAW_BUFFER0_ATI :: 0x8825;
	DRAW_BUFFER1_ATI :: 0x8826;
	DRAW_BUFFER2_ATI :: 0x8827;
	DRAW_BUFFER3_ATI :: 0x8828;
	DRAW_BUFFER4_ATI :: 0x8829;
	DRAW_BUFFER5_ATI :: 0x882A;
	DRAW_BUFFER6_ATI :: 0x882B;
	DRAW_BUFFER7_ATI :: 0x882C;
	DRAW_BUFFER8_ATI :: 0x882D;
	DRAW_BUFFER9_ATI :: 0x882E;
	DRAW_BUFFER10_ATI :: 0x882F;
	DRAW_BUFFER11_ATI :: 0x8830;
	DRAW_BUFFER12_ATI :: 0x8831;
	DRAW_BUFFER13_ATI :: 0x8832;
	DRAW_BUFFER14_ATI :: 0x8833;
	DRAW_BUFFER15_ATI :: 0x8834;
	
	// ATI_element_array
	ELEMENT_ARRAY_ATI :: 0x8768;
	ELEMENT_ARRAY_TYPE_ATI :: 0x8769;
	ELEMENT_ARRAY_POINTER_ATI :: 0x876A;
	
	// ATI_envmap_bumpmap
	BUMP_ROT_MATRIX_ATI :: 0x8775;
	BUMP_ROT_MATRIX_SIZE_ATI :: 0x8776;
	BUMP_NUM_TEX_UNITS_ATI :: 0x8777;
	BUMP_TEX_UNITS_ATI :: 0x8778;
	DUDV_ATI :: 0x8779;
	DU8DV8_ATI :: 0x877A;
	BUMP_ENVMAP_ATI :: 0x877B;
	BUMP_TARGET_ATI :: 0x877C;
	
	// ATI_fragment_shader
	FRAGMENT_SHADER_ATI :: 0x8920;
	REG_0_ATI :: 0x8921;
	REG_1_ATI :: 0x8922;
	REG_2_ATI :: 0x8923;
	REG_3_ATI :: 0x8924;
	REG_4_ATI :: 0x8925;
	REG_5_ATI :: 0x8926;
	REG_6_ATI :: 0x8927;
	REG_7_ATI :: 0x8928;
	REG_8_ATI :: 0x8929;
	REG_9_ATI :: 0x892A;
	REG_10_ATI :: 0x892B;
	REG_11_ATI :: 0x892C;
	REG_12_ATI :: 0x892D;
	REG_13_ATI :: 0x892E;
	REG_14_ATI :: 0x892F;
	REG_15_ATI :: 0x8930;
	REG_16_ATI :: 0x8931;
	REG_17_ATI :: 0x8932;
	REG_18_ATI :: 0x8933;
	REG_19_ATI :: 0x8934;
	REG_20_ATI :: 0x8935;
	REG_21_ATI :: 0x8936;
	REG_22_ATI :: 0x8937;
	REG_23_ATI :: 0x8938;
	REG_24_ATI :: 0x8939;
	REG_25_ATI :: 0x893A;
	REG_26_ATI :: 0x893B;
	REG_27_ATI :: 0x893C;
	REG_28_ATI :: 0x893D;
	REG_29_ATI :: 0x893E;
	REG_30_ATI :: 0x893F;
	REG_31_ATI :: 0x8940;
	CON_0_ATI :: 0x8941;
	CON_1_ATI :: 0x8942;
	CON_2_ATI :: 0x8943;
	CON_3_ATI :: 0x8944;
	CON_4_ATI :: 0x8945;
	CON_5_ATI :: 0x8946;
	CON_6_ATI :: 0x8947;
	CON_7_ATI :: 0x8948;
	CON_8_ATI :: 0x8949;
	CON_9_ATI :: 0x894A;
	CON_10_ATI :: 0x894B;
	CON_11_ATI :: 0x894C;
	CON_12_ATI :: 0x894D;
	CON_13_ATI :: 0x894E;
	CON_14_ATI :: 0x894F;
	CON_15_ATI :: 0x8950;
	CON_16_ATI :: 0x8951;
	CON_17_ATI :: 0x8952;
	CON_18_ATI :: 0x8953;
	CON_19_ATI :: 0x8954;
	CON_20_ATI :: 0x8955;
	CON_21_ATI :: 0x8956;
	CON_22_ATI :: 0x8957;
	CON_23_ATI :: 0x8958;
	CON_24_ATI :: 0x8959;
	CON_25_ATI :: 0x895A;
	CON_26_ATI :: 0x895B;
	CON_27_ATI :: 0x895C;
	CON_28_ATI :: 0x895D;
	CON_29_ATI :: 0x895E;
	CON_30_ATI :: 0x895F;
	CON_31_ATI :: 0x8960;
	MOV_ATI :: 0x8961;
	ADD_ATI :: 0x8963;
	MUL_ATI :: 0x8964;
	SUB_ATI :: 0x8965;
	DOT3_ATI :: 0x8966;
	DOT4_ATI :: 0x8967;
	MAD_ATI :: 0x8968;
	LERP_ATI :: 0x8969;
	CND_ATI :: 0x896A;
	CND0_ATI :: 0x896B;
	DOT2_ADD_ATI :: 0x896C;
	SECONDARY_INTERPOLATOR_ATI :: 0x896D;
	NUM_FRAGMENT_REGISTERS_ATI :: 0x896E;
	NUM_FRAGMENT_CONSTANTS_ATI :: 0x896F;
	NUM_PASSES_ATI :: 0x8970;
	NUM_INSTRUCTIONS_PER_PASS_ATI :: 0x8971;
	NUM_INSTRUCTIONS_TOTAL_ATI :: 0x8972;
	NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI :: 0x8973;
	NUM_LOOPBACK_COMPONENTS_ATI :: 0x8974;
	COLOR_ALPHA_PAIRING_ATI :: 0x8975;
	SWIZZLE_STR_ATI :: 0x8976;
	SWIZZLE_STQ_ATI :: 0x8977;
	SWIZZLE_STR_DR_ATI :: 0x8978;
	SWIZZLE_STQ_DQ_ATI :: 0x8979;
	SWIZZLE_STRQ_ATI :: 0x897A;
	SWIZZLE_STRQ_DQ_ATI :: 0x897B;
	RED_BIT_ATI :: 0x00000001;
	GREEN_BIT_ATI :: 0x00000002;
	BLUE_BIT_ATI :: 0x00000004;
	GL_2X_BIT_ATI :: 0x00000001;
	GL_4X_BIT_ATI :: 0x00000002;
	GL_8X_BIT_ATI :: 0x00000004;
	HALF_BIT_ATI :: 0x00000008;
	QUARTER_BIT_ATI :: 0x00000010;
	EIGHTH_BIT_ATI :: 0x00000020;
	SATURATE_BIT_ATI :: 0x00000040;
	COMP_BIT_ATI :: 0x00000002;
	NEGATE_BIT_ATI :: 0x00000004;
	BIAS_BIT_ATI :: 0x00000008;
	
	// ATI_map_object_buffer
	
	// ATI_meminfo
	VBO_FREE_MEMORY_ATI :: 0x87FB;
	TEXTURE_FREE_MEMORY_ATI :: 0x87FC;
	RENDERBUFFER_FREE_MEMORY_ATI :: 0x87FD;
	
	// ATI_pixel_format_float
	RGBA_FLOAT_MODE_ATI :: 0x8820;
	COLOR_CLEAR_UNCLAMPED_VALUE_ATI :: 0x8835;
	
	// ATI_pn_triangles
	PN_TRIANGLES_ATI :: 0x87F0;
	MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI :: 0x87F1;
	PN_TRIANGLES_POINT_MODE_ATI :: 0x87F2;
	PN_TRIANGLES_NORMAL_MODE_ATI :: 0x87F3;
	PN_TRIANGLES_TESSELATION_LEVEL_ATI :: 0x87F4;
	PN_TRIANGLES_POINT_MODE_LINEAR_ATI :: 0x87F5;
	PN_TRIANGLES_POINT_MODE_CUBIC_ATI :: 0x87F6;
	PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI :: 0x87F7;
	PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI :: 0x87F8;
	
	// ATI_separate_stencil
	STENCIL_BACK_FUNC_ATI :: 0x8800;
	STENCIL_BACK_FAIL_ATI :: 0x8801;
	STENCIL_BACK_PASS_DEPTH_FAIL_ATI :: 0x8802;
	STENCIL_BACK_PASS_DEPTH_PASS_ATI :: 0x8803;
	
	// ATI_text_fragment_shader
	TEXT_FRAGMENT_SHADER_ATI :: 0x8200;
	
	// ATI_texture_env_combine3
	MODULATE_ADD_ATI :: 0x8744;
	MODULATE_SIGNED_ADD_ATI :: 0x8745;
	MODULATE_SUBTRACT_ATI :: 0x8746;
	
	// ATI_texture_float
	RGBA_FLOAT32_ATI :: 0x8814;
	RGB_FLOAT32_ATI :: 0x8815;
	ALPHA_FLOAT32_ATI :: 0x8816;
	INTENSITY_FLOAT32_ATI :: 0x8817;
	LUMINANCE_FLOAT32_ATI :: 0x8818;
	LUMINANCE_ALPHA_FLOAT32_ATI :: 0x8819;
	RGBA_FLOAT16_ATI :: 0x881A;
	RGB_FLOAT16_ATI :: 0x881B;
	ALPHA_FLOAT16_ATI :: 0x881C;
	INTENSITY_FLOAT16_ATI :: 0x881D;
	LUMINANCE_FLOAT16_ATI :: 0x881E;
	LUMINANCE_ALPHA_FLOAT16_ATI :: 0x881F;
	
	// ATI_texture_mirror_once
	MIRROR_CLAMP_ATI :: 0x8742;
	MIRROR_CLAMP_TO_EDGE_ATI :: 0x8743;
	
	// ATI_vertex_array_object
	STATIC_ATI :: 0x8760;
	DYNAMIC_ATI :: 0x8761;
	PRESERVE_ATI :: 0x8762;
	DISCARD_ATI :: 0x8763;
	OBJECT_BUFFER_SIZE_ATI :: 0x8764;
	OBJECT_BUFFER_USAGE_ATI :: 0x8765;
	ARRAY_OBJECT_BUFFER_ATI :: 0x8766;
	ARRAY_OBJECT_OFFSET_ATI :: 0x8767;
	
	// ATI_vertex_attrib_array_object
	
	// ATI_vertex_streams
	MAX_VERTEX_STREAMS_ATI :: 0x876B;
	VERTEX_STREAM0_ATI :: 0x876C;
	VERTEX_STREAM1_ATI :: 0x876D;
	VERTEX_STREAM2_ATI :: 0x876E;
	VERTEX_STREAM3_ATI :: 0x876F;
	VERTEX_STREAM4_ATI :: 0x8770;
	VERTEX_STREAM5_ATI :: 0x8771;
	VERTEX_STREAM6_ATI :: 0x8772;
	VERTEX_STREAM7_ATI :: 0x8773;
	VERTEX_SOURCE_ATI :: 0x8774;
	
	// EXT_422_pixels
	GL_422_EXT :: 0x80CC;
	GL_422_REV_EXT :: 0x80CD;
	GL_422_AVERAGE_EXT :: 0x80CE;
	GL_422_REV_AVERAGE_EXT :: 0x80CF;
	
	// EXT_abgr
	ABGR_EXT :: 0x8000;
	
	// EXT_bgra
	BGR_EXT :: 0x80E0;
	BGRA_EXT :: 0x80E1;
	
	// EXT_bindable_uniform
	MAX_VERTEX_BINDABLE_UNIFORMS_EXT :: 0x8DE2;
	MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT :: 0x8DE3;
	MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT :: 0x8DE4;
	MAX_BINDABLE_UNIFORM_SIZE_EXT :: 0x8DED;
	UNIFORM_BUFFER_EXT :: 0x8DEE;
	UNIFORM_BUFFER_BINDING_EXT :: 0x8DEF;
	
	// EXT_blend_color
	CONSTANT_COLOR_EXT :: 0x8001;
	ONE_MINUS_CONSTANT_COLOR_EXT :: 0x8002;
	CONSTANT_ALPHA_EXT :: 0x8003;
	ONE_MINUS_CONSTANT_ALPHA_EXT :: 0x8004;
	BLEND_COLOR_EXT :: 0x8005;
	
	// EXT_blend_equation_separate
	BLEND_EQUATION_RGB_EXT :: 0x8009;
	BLEND_EQUATION_ALPHA_EXT :: 0x883D;
	
	// EXT_blend_func_separate
	BLEND_DST_RGB_EXT :: 0x80C8;
	BLEND_SRC_RGB_EXT :: 0x80C9;
	BLEND_DST_ALPHA_EXT :: 0x80CA;
	BLEND_SRC_ALPHA_EXT :: 0x80CB;
	
	// EXT_blend_logic_op
	
	// EXT_blend_minmax
	MIN_EXT :: 0x8007;
	MAX_EXT :: 0x8008;
	FUNC_ADD_EXT :: 0x8006;
	BLEND_EQUATION_EXT :: 0x8009;
	
	// EXT_blend_subtract
	FUNC_SUBTRACT_EXT :: 0x800A;
	FUNC_REVERSE_SUBTRACT_EXT :: 0x800B;
	
	// EXT_clip_volume_hint
	CLIP_VOLUME_CLIPPING_HINT_EXT :: 0x80F0;
	
	// EXT_cmyka
	CMYK_EXT :: 0x800C;
	CMYKA_EXT :: 0x800D;
	PACK_CMYK_HINT_EXT :: 0x800E;
	UNPACK_CMYK_HINT_EXT :: 0x800F;
	
	// EXT_color_subtable
	
	// EXT_compiled_vertex_array
	ARRAY_ELEMENT_LOCK_FIRST_EXT :: 0x81A8;
	ARRAY_ELEMENT_LOCK_COUNT_EXT :: 0x81A9;
	
	// EXT_convolution
	CONVOLUTION_1D_EXT :: 0x8010;
	CONVOLUTION_2D_EXT :: 0x8011;
	SEPARABLE_2D_EXT :: 0x8012;
	CONVOLUTION_BORDER_MODE_EXT :: 0x8013;
	CONVOLUTION_FILTER_SCALE_EXT :: 0x8014;
	CONVOLUTION_FILTER_BIAS_EXT :: 0x8015;
	REDUCE_EXT :: 0x8016;
	CONVOLUTION_FORMAT_EXT :: 0x8017;
	CONVOLUTION_WIDTH_EXT :: 0x8018;
	CONVOLUTION_HEIGHT_EXT :: 0x8019;
	MAX_CONVOLUTION_WIDTH_EXT :: 0x801A;
	MAX_CONVOLUTION_HEIGHT_EXT :: 0x801B;
	POST_CONVOLUTION_RED_SCALE_EXT :: 0x801C;
	POST_CONVOLUTION_GREEN_SCALE_EXT :: 0x801D;
	POST_CONVOLUTION_BLUE_SCALE_EXT :: 0x801E;
	POST_CONVOLUTION_ALPHA_SCALE_EXT :: 0x801F;
	POST_CONVOLUTION_RED_BIAS_EXT :: 0x8020;
	POST_CONVOLUTION_GREEN_BIAS_EXT :: 0x8021;
	POST_CONVOLUTION_BLUE_BIAS_EXT :: 0x8022;
	POST_CONVOLUTION_ALPHA_BIAS_EXT :: 0x8023;
	
	// EXT_coordinate_frame
	TANGENT_ARRAY_EXT :: 0x8439;
	BINORMAL_ARRAY_EXT :: 0x843A;
	CURRENT_TANGENT_EXT :: 0x843B;
	CURRENT_BINORMAL_EXT :: 0x843C;
	TANGENT_ARRAY_TYPE_EXT :: 0x843E;
	TANGENT_ARRAY_STRIDE_EXT :: 0x843F;
	BINORMAL_ARRAY_TYPE_EXT :: 0x8440;
	BINORMAL_ARRAY_STRIDE_EXT :: 0x8441;
	TANGENT_ARRAY_POINTER_EXT :: 0x8442;
	BINORMAL_ARRAY_POINTER_EXT :: 0x8443;
	MAP1_TANGENT_EXT :: 0x8444;
	MAP2_TANGENT_EXT :: 0x8445;
	MAP1_BINORMAL_EXT :: 0x8446;
	MAP2_BINORMAL_EXT :: 0x8447;
	
	// EXT_copy_texture
	
	// EXT_cull_vertex
	CULL_VERTEX_EXT :: 0x81AA;
	CULL_VERTEX_EYE_POSITION_EXT :: 0x81AB;
	CULL_VERTEX_OBJECT_POSITION_EXT :: 0x81AC;
	
	// EXT_debug_label
	PROGRAM_PIPELINE_OBJECT_EXT :: 0x8A4F;
	PROGRAM_OBJECT_EXT :: 0x8B40;
	SHADER_OBJECT_EXT :: 0x8B48;
	BUFFER_OBJECT_EXT :: 0x9151;
	QUERY_OBJECT_EXT :: 0x9153;
	VERTEX_ARRAY_OBJECT_EXT :: 0x9154;
	// SAMPLER :: 0x82E6;
	// TRANSFORM_FEEDBACK :: 0x8E22;
	
	// EXT_debug_marker
	
	// EXT_depth_bounds_test
	DEPTH_BOUNDS_TEST_EXT :: 0x8890;
	DEPTH_BOUNDS_EXT :: 0x8891;
	
	// EXT_direct_state_access
	PROGRAM_MATRIX_EXT :: 0x8E2D;
	TRANSPOSE_PROGRAM_MATRIX_EXT :: 0x8E2E;
	PROGRAM_MATRIX_STACK_DEPTH_EXT :: 0x8E2F;
	
	// EXT_draw_buffers2
	
	// EXT_draw_instanced
	
	// EXT_draw_range_elements
	MAX_ELEMENTS_VERTICES_EXT :: 0x80E8;
	MAX_ELEMENTS_INDICES_EXT :: 0x80E9;
	
	// EXT_external_buffer
	
	// EXT_fog_coord
	FOG_COORDINATE_SOURCE_EXT :: 0x8450;
	FOG_COORDINATE_EXT :: 0x8451;
	FRAGMENT_DEPTH_EXT :: 0x8452;
	CURRENT_FOG_COORDINATE_EXT :: 0x8453;
	FOG_COORDINATE_ARRAY_TYPE_EXT :: 0x8454;
	FOG_COORDINATE_ARRAY_STRIDE_EXT :: 0x8455;
	FOG_COORDINATE_ARRAY_POINTER_EXT :: 0x8456;
	FOG_COORDINATE_ARRAY_EXT :: 0x8457;
	
	// EXT_framebuffer_blit
	READ_FRAMEBUFFER_EXT :: 0x8CA8;
	DRAW_FRAMEBUFFER_EXT :: 0x8CA9;
	DRAW_FRAMEBUFFER_BINDING_EXT :: 0x8CA6;
	READ_FRAMEBUFFER_BINDING_EXT :: 0x8CAA;
	
	// EXT_framebuffer_multisample
	RENDERBUFFER_SAMPLES_EXT :: 0x8CAB;
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT :: 0x8D56;
	MAX_SAMPLES_EXT :: 0x8D57;
	
	// EXT_framebuffer_multisample_blit_scaled
	SCALED_RESOLVE_FASTEST_EXT :: 0x90BA;
	SCALED_RESOLVE_NICEST_EXT :: 0x90BB;
	
	// EXT_framebuffer_object
	INVALID_FRAMEBUFFER_OPERATION_EXT :: 0x0506;
	MAX_RENDERBUFFER_SIZE_EXT :: 0x84E8;
	FRAMEBUFFER_BINDING_EXT :: 0x8CA6;
	RENDERBUFFER_BINDING_EXT :: 0x8CA7;
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT :: 0x8CD0;
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT :: 0x8CD1;
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT :: 0x8CD2;
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT :: 0x8CD3;
	FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT :: 0x8CD4;
	FRAMEBUFFER_COMPLETE_EXT :: 0x8CD5;
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT :: 0x8CD6;
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT :: 0x8CD7;
	FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT :: 0x8CD9;
	FRAMEBUFFER_INCOMPLETE_FORMATS_EXT :: 0x8CDA;
	FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT :: 0x8CDB;
	FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT :: 0x8CDC;
	FRAMEBUFFER_UNSUPPORTED_EXT :: 0x8CDD;
	MAX_COLOR_ATTACHMENTS_EXT :: 0x8CDF;
	COLOR_ATTACHMENT0_EXT :: 0x8CE0;
	COLOR_ATTACHMENT1_EXT :: 0x8CE1;
	COLOR_ATTACHMENT2_EXT :: 0x8CE2;
	COLOR_ATTACHMENT3_EXT :: 0x8CE3;
	COLOR_ATTACHMENT4_EXT :: 0x8CE4;
	COLOR_ATTACHMENT5_EXT :: 0x8CE5;
	COLOR_ATTACHMENT6_EXT :: 0x8CE6;
	COLOR_ATTACHMENT7_EXT :: 0x8CE7;
	COLOR_ATTACHMENT8_EXT :: 0x8CE8;
	COLOR_ATTACHMENT9_EXT :: 0x8CE9;
	COLOR_ATTACHMENT10_EXT :: 0x8CEA;
	COLOR_ATTACHMENT11_EXT :: 0x8CEB;
	COLOR_ATTACHMENT12_EXT :: 0x8CEC;
	COLOR_ATTACHMENT13_EXT :: 0x8CED;
	COLOR_ATTACHMENT14_EXT :: 0x8CEE;
	COLOR_ATTACHMENT15_EXT :: 0x8CEF;
	DEPTH_ATTACHMENT_EXT :: 0x8D00;
	STENCIL_ATTACHMENT_EXT :: 0x8D20;
	FRAMEBUFFER_EXT :: 0x8D40;
	RENDERBUFFER_EXT :: 0x8D41;
	RENDERBUFFER_WIDTH_EXT :: 0x8D42;
	RENDERBUFFER_HEIGHT_EXT :: 0x8D43;
	RENDERBUFFER_INTERNAL_FORMAT_EXT :: 0x8D44;
	STENCIL_INDEX1_EXT :: 0x8D46;
	STENCIL_INDEX4_EXT :: 0x8D47;
	STENCIL_INDEX8_EXT :: 0x8D48;
	STENCIL_INDEX16_EXT :: 0x8D49;
	RENDERBUFFER_RED_SIZE_EXT :: 0x8D50;
	RENDERBUFFER_GREEN_SIZE_EXT :: 0x8D51;
	RENDERBUFFER_BLUE_SIZE_EXT :: 0x8D52;
	RENDERBUFFER_ALPHA_SIZE_EXT :: 0x8D53;
	RENDERBUFFER_DEPTH_SIZE_EXT :: 0x8D54;
	RENDERBUFFER_STENCIL_SIZE_EXT :: 0x8D55;
	
	// EXT_framebuffer_sRGB
	FRAMEBUFFER_SRGB_EXT :: 0x8DB9;
	FRAMEBUFFER_SRGB_CAPABLE_EXT :: 0x8DBA;
	
	// EXT_geometry_shader4
	GEOMETRY_SHADER_EXT :: 0x8DD9;
	GEOMETRY_VERTICES_OUT_EXT :: 0x8DDA;
	GEOMETRY_INPUT_TYPE_EXT :: 0x8DDB;
	GEOMETRY_OUTPUT_TYPE_EXT :: 0x8DDC;
	MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT :: 0x8C29;
	MAX_GEOMETRY_VARYING_COMPONENTS_EXT :: 0x8DDD;
	MAX_VERTEX_VARYING_COMPONENTS_EXT :: 0x8DDE;
	MAX_VARYING_COMPONENTS_EXT :: 0x8B4B;
	MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT :: 0x8DDF;
	MAX_GEOMETRY_OUTPUT_VERTICES_EXT :: 0x8DE0;
	MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT :: 0x8DE1;
	LINES_ADJACENCY_EXT :: 0x000A;
	LINE_STRIP_ADJACENCY_EXT :: 0x000B;
	TRIANGLES_ADJACENCY_EXT :: 0x000C;
	TRIANGLE_STRIP_ADJACENCY_EXT :: 0x000D;
	FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT :: 0x8DA8;
	FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT :: 0x8DA9;
	FRAMEBUFFER_ATTACHMENT_LAYERED_EXT :: 0x8DA7;
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT :: 0x8CD4;
	PROGRAM_POINT_SIZE_EXT :: 0x8642;
	
	// EXT_gpu_program_parameters
	
	// EXT_gpu_shader4
	VERTEX_ATTRIB_ARRAY_INTEGER_EXT :: 0x88FD;
	SAMPLER_1D_ARRAY_EXT :: 0x8DC0;
	SAMPLER_2D_ARRAY_EXT :: 0x8DC1;
	SAMPLER_BUFFER_EXT :: 0x8DC2;
	SAMPLER_1D_ARRAY_SHADOW_EXT :: 0x8DC3;
	SAMPLER_2D_ARRAY_SHADOW_EXT :: 0x8DC4;
	SAMPLER_CUBE_SHADOW_EXT :: 0x8DC5;
	UNSIGNED_INT_VEC2_EXT :: 0x8DC6;
	UNSIGNED_INT_VEC3_EXT :: 0x8DC7;
	UNSIGNED_INT_VEC4_EXT :: 0x8DC8;
	INT_SAMPLER_1D_EXT :: 0x8DC9;
	INT_SAMPLER_2D_EXT :: 0x8DCA;
	INT_SAMPLER_3D_EXT :: 0x8DCB;
	INT_SAMPLER_CUBE_EXT :: 0x8DCC;
	INT_SAMPLER_2D_RECT_EXT :: 0x8DCD;
	INT_SAMPLER_1D_ARRAY_EXT :: 0x8DCE;
	INT_SAMPLER_2D_ARRAY_EXT :: 0x8DCF;
	INT_SAMPLER_BUFFER_EXT :: 0x8DD0;
	UNSIGNED_INT_SAMPLER_1D_EXT :: 0x8DD1;
	UNSIGNED_INT_SAMPLER_2D_EXT :: 0x8DD2;
	UNSIGNED_INT_SAMPLER_3D_EXT :: 0x8DD3;
	UNSIGNED_INT_SAMPLER_CUBE_EXT :: 0x8DD4;
	UNSIGNED_INT_SAMPLER_2D_RECT_EXT :: 0x8DD5;
	UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT :: 0x8DD6;
	UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT :: 0x8DD7;
	UNSIGNED_INT_SAMPLER_BUFFER_EXT :: 0x8DD8;
	MIN_PROGRAM_TEXEL_OFFSET_EXT :: 0x8904;
	MAX_PROGRAM_TEXEL_OFFSET_EXT :: 0x8905;
	
	// EXT_histogram
	HISTOGRAM_EXT :: 0x8024;
	PROXY_HISTOGRAM_EXT :: 0x8025;
	HISTOGRAM_WIDTH_EXT :: 0x8026;
	HISTOGRAM_FORMAT_EXT :: 0x8027;
	HISTOGRAM_RED_SIZE_EXT :: 0x8028;
	HISTOGRAM_GREEN_SIZE_EXT :: 0x8029;
	HISTOGRAM_BLUE_SIZE_EXT :: 0x802A;
	HISTOGRAM_ALPHA_SIZE_EXT :: 0x802B;
	HISTOGRAM_LUMINANCE_SIZE_EXT :: 0x802C;
	HISTOGRAM_SINK_EXT :: 0x802D;
	MINMAX_EXT :: 0x802E;
	MINMAX_FORMAT_EXT :: 0x802F;
	MINMAX_SINK_EXT :: 0x8030;
	TABLE_TOO_LARGE_EXT :: 0x8031;
	
	// EXT_index_array_formats
	IUI_V2F_EXT :: 0x81AD;
	IUI_V3F_EXT :: 0x81AE;
	IUI_N3F_V2F_EXT :: 0x81AF;
	IUI_N3F_V3F_EXT :: 0x81B0;
	T2F_IUI_V2F_EXT :: 0x81B1;
	T2F_IUI_V3F_EXT :: 0x81B2;
	T2F_IUI_N3F_V2F_EXT :: 0x81B3;
	T2F_IUI_N3F_V3F_EXT :: 0x81B4;
	
	// EXT_index_func
	INDEX_TEST_EXT :: 0x81B5;
	INDEX_TEST_FUNC_EXT :: 0x81B6;
	INDEX_TEST_REF_EXT :: 0x81B7;
	
	// EXT_index_material
	INDEX_MATERIAL_EXT :: 0x81B8;
	INDEX_MATERIAL_PARAMETER_EXT :: 0x81B9;
	INDEX_MATERIAL_FACE_EXT :: 0x81BA;
	
	// EXT_index_texture
	
	// EXT_light_texture
	FRAGMENT_MATERIAL_EXT :: 0x8349;
	FRAGMENT_NORMAL_EXT :: 0x834A;
	FRAGMENT_COLOR_EXT :: 0x834C;
	ATTENUATION_EXT :: 0x834D;
	SHADOW_ATTENUATION_EXT :: 0x834E;
	TEXTURE_APPLICATION_MODE_EXT :: 0x834F;
	TEXTURE_LIGHT_EXT :: 0x8350;
	TEXTURE_MATERIAL_FACE_EXT :: 0x8351;
	TEXTURE_MATERIAL_PARAMETER_EXT :: 0x8352;
	// FRAGMENT_DEPTH_EXT :: 0x8452;
	
	// EXT_memory_object
	TEXTURE_TILING_EXT :: 0x9580;
	DEDICATED_MEMORY_OBJECT_EXT :: 0x9581;
	PROTECTED_MEMORY_OBJECT_EXT :: 0x959B;
	NUM_TILING_TYPES_EXT :: 0x9582;
	TILING_TYPES_EXT :: 0x9583;
	OPTIMAL_TILING_EXT :: 0x9584;
	LINEAR_TILING_EXT :: 0x9585;
	NUM_DEVICE_UUIDS_EXT :: 0x9596;
	DEVICE_UUID_EXT :: 0x9597;
	DRIVER_UUID_EXT :: 0x9598;
	UUID_SIZE_EXT :: 16;
	
	// EXT_memory_object_fd
	HANDLE_TYPE_OPAQUE_FD_EXT :: 0x9586;
	
	// EXT_memory_object_win32
	HANDLE_TYPE_OPAQUE_WIN32_EXT :: 0x9587;
	HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT :: 0x9588;
	DEVICE_LUID_EXT :: 0x9599;
	DEVICE_NODE_MASK_EXT :: 0x959A;
	LUID_SIZE_EXT :: 8;
	HANDLE_TYPE_D3D12_TILEPOOL_EXT :: 0x9589;
	HANDLE_TYPE_D3D12_RESOURCE_EXT :: 0x958A;
	HANDLE_TYPE_D3D11_IMAGE_EXT :: 0x958B;
	HANDLE_TYPE_D3D11_IMAGE_KMT_EXT :: 0x958C;
	
	// EXT_misc_attribute
	
	// EXT_multi_draw_arrays
	
	// EXT_multisample
	MULTISAMPLE_EXT :: 0x809D;
	SAMPLE_ALPHA_TO_MASK_EXT :: 0x809E;
	SAMPLE_ALPHA_TO_ONE_EXT :: 0x809F;
	SAMPLE_MASK_EXT :: 0x80A0;
	GL_1PASS_EXT :: 0x80A1;
	GL_2PASS_0_EXT :: 0x80A2;
	GL_2PASS_1_EXT :: 0x80A3;
	GL_4PASS_0_EXT :: 0x80A4;
	GL_4PASS_1_EXT :: 0x80A5;
	GL_4PASS_2_EXT :: 0x80A6;
	GL_4PASS_3_EXT :: 0x80A7;
	SAMPLE_BUFFERS_EXT :: 0x80A8;
	SAMPLES_EXT :: 0x80A9;
	SAMPLE_MASK_VALUE_EXT :: 0x80AA;
	SAMPLE_MASK_INVERT_EXT :: 0x80AB;
	SAMPLE_PATTERN_EXT :: 0x80AC;
	MULTISAMPLE_BIT_EXT :: 0x20000000;
	
	// EXT_packed_depth_stencil
	DEPTH_STENCIL_EXT :: 0x84F9;
	UNSIGNED_INT_24_8_EXT :: 0x84FA;
	DEPTH24_STENCIL8_EXT :: 0x88F0;
	TEXTURE_STENCIL_SIZE_EXT :: 0x88F1;
	
	// EXT_packed_float
	R11F_G11F_B10F_EXT :: 0x8C3A;
	UNSIGNED_INT_10F_11F_11F_REV_EXT :: 0x8C3B;
	RGBA_SIGNED_COMPONENTS_EXT :: 0x8C3C;
	
	// EXT_packed_pixels
	UNSIGNED_BYTE_3_3_2_EXT :: 0x8032;
	UNSIGNED_SHORT_4_4_4_4_EXT :: 0x8033;
	UNSIGNED_SHORT_5_5_5_1_EXT :: 0x8034;
	UNSIGNED_INT_8_8_8_8_EXT :: 0x8035;
	UNSIGNED_INT_10_10_10_2_EXT :: 0x8036;
	
	// EXT_paletted_texture
	COLOR_INDEX1_EXT :: 0x80E2;
	COLOR_INDEX2_EXT :: 0x80E3;
	COLOR_INDEX4_EXT :: 0x80E4;
	COLOR_INDEX8_EXT :: 0x80E5;
	COLOR_INDEX12_EXT :: 0x80E6;
	COLOR_INDEX16_EXT :: 0x80E7;
	TEXTURE_INDEX_SIZE_EXT :: 0x80ED;
	
	// EXT_pixel_buffer_object
	PIXEL_PACK_BUFFER_EXT :: 0x88EB;
	PIXEL_UNPACK_BUFFER_EXT :: 0x88EC;
	PIXEL_PACK_BUFFER_BINDING_EXT :: 0x88ED;
	PIXEL_UNPACK_BUFFER_BINDING_EXT :: 0x88EF;
	
	// EXT_pixel_transform
	PIXEL_TRANSFORM_2D_EXT :: 0x8330;
	PIXEL_MAG_FILTER_EXT :: 0x8331;
	PIXEL_MIN_FILTER_EXT :: 0x8332;
	PIXEL_CUBIC_WEIGHT_EXT :: 0x8333;
	CUBIC_EXT :: 0x8334;
	AVERAGE_EXT :: 0x8335;
	PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT :: 0x8336;
	MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT :: 0x8337;
	PIXEL_TRANSFORM_2D_MATRIX_EXT :: 0x8338;
	
	// EXT_pixel_transform_color_table
	
	// EXT_point_parameters
	POINT_SIZE_MIN_EXT :: 0x8126;
	POINT_SIZE_MAX_EXT :: 0x8127;
	POINT_FADE_THRESHOLD_SIZE_EXT :: 0x8128;
	DISTANCE_ATTENUATION_EXT :: 0x8129;
	
	// EXT_polygon_offset
	POLYGON_OFFSET_EXT :: 0x8037;
	POLYGON_OFFSET_FACTOR_EXT :: 0x8038;
	POLYGON_OFFSET_BIAS_EXT :: 0x8039;
	
	// EXT_polygon_offset_clamp
	POLYGON_OFFSET_CLAMP_EXT :: 0x8E1B;
	
	// EXT_post_depth_coverage
	
	// EXT_provoking_vertex
	QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT :: 0x8E4C;
	FIRST_VERTEX_CONVENTION_EXT :: 0x8E4D;
	LAST_VERTEX_CONVENTION_EXT :: 0x8E4E;
	PROVOKING_VERTEX_EXT :: 0x8E4F;
	
	// EXT_raster_multisample
	RASTER_MULTISAMPLE_EXT :: 0x9327;
	RASTER_SAMPLES_EXT :: 0x9328;
	MAX_RASTER_SAMPLES_EXT :: 0x9329;
	RASTER_FIXED_SAMPLE_LOCATIONS_EXT :: 0x932A;
	MULTISAMPLE_RASTERIZATION_ALLOWED_EXT :: 0x932B;
	EFFECTIVE_RASTER_SAMPLES_EXT :: 0x932C;
	
	// EXT_rescale_normal
	RESCALE_NORMAL_EXT :: 0x803A;
	
	// EXT_secondary_color
	COLOR_SUM_EXT :: 0x8458;
	CURRENT_SECONDARY_COLOR_EXT :: 0x8459;
	SECONDARY_COLOR_ARRAY_SIZE_EXT :: 0x845A;
	SECONDARY_COLOR_ARRAY_TYPE_EXT :: 0x845B;
	SECONDARY_COLOR_ARRAY_STRIDE_EXT :: 0x845C;
	SECONDARY_COLOR_ARRAY_POINTER_EXT :: 0x845D;
	SECONDARY_COLOR_ARRAY_EXT :: 0x845E;
	
	// EXT_semaphore
	// NUM_DEVICE_UUIDS_EXT :: 0x9596;
	// DEVICE_UUID_EXT :: 0x9597;
	// DRIVER_UUID_EXT :: 0x9598;
	// UUID_SIZE_EXT :: 16;
	LAYOUT_GENERAL_EXT :: 0x958D;
	LAYOUT_COLOR_ATTACHMENT_EXT :: 0x958E;
	LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT :: 0x958F;
	LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT :: 0x9590;
	LAYOUT_SHADER_READ_ONLY_EXT :: 0x9591;
	LAYOUT_TRANSFER_SRC_EXT :: 0x9592;
	LAYOUT_TRANSFER_DST_EXT :: 0x9593;
	LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT :: 0x9530;
	LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT :: 0x9531;
	
	// EXT_semaphore_fd
	// HANDLE_TYPE_OPAQUE_FD_EXT :: 0x9586;
	
	// EXT_semaphore_win32
	// HANDLE_TYPE_OPAQUE_WIN32_EXT :: 0x9587;
	// HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT :: 0x9588;
	// DEVICE_LUID_EXT :: 0x9599;
	// DEVICE_NODE_MASK_EXT :: 0x959A;
	// LUID_SIZE_EXT :: 8;
	HANDLE_TYPE_D3D12_FENCE_EXT :: 0x9594;
	D3D12_FENCE_VALUE_EXT :: 0x9595;
	
	// EXT_separate_shader_objects
	ACTIVE_PROGRAM_EXT :: 0x8B8D;
	VERTEX_SHADER_BIT_EXT :: 0x00000001;
	FRAGMENT_SHADER_BIT_EXT :: 0x00000002;
	ALL_SHADER_BITS_EXT :: 0xFFFFFFFF;
	PROGRAM_SEPARABLE_EXT :: 0x8258;
	// ACTIVE_PROGRAM_EXT :: 0x8B8D;
	PROGRAM_PIPELINE_BINDING_EXT :: 0x825A;
	
	// EXT_separate_specular_color
	LIGHT_MODEL_COLOR_CONTROL_EXT :: 0x81F8;
	SINGLE_COLOR_EXT :: 0x81F9;
	SEPARATE_SPECULAR_COLOR_EXT :: 0x81FA;
	
	// EXT_shader_framebuffer_fetch
	FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT :: 0x8A52;
	
	// EXT_shader_framebuffer_fetch_non_coherent
	// FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT :: 0x8A52;
	
	// EXT_shader_image_load_formatted
	
	// EXT_shader_image_load_store
	MAX_IMAGE_UNITS_EXT :: 0x8F38;
	MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT :: 0x8F39;
	IMAGE_BINDING_NAME_EXT :: 0x8F3A;
	IMAGE_BINDING_LEVEL_EXT :: 0x8F3B;
	IMAGE_BINDING_LAYERED_EXT :: 0x8F3C;
	IMAGE_BINDING_LAYER_EXT :: 0x8F3D;
	IMAGE_BINDING_ACCESS_EXT :: 0x8F3E;
	IMAGE_1D_EXT :: 0x904C;
	IMAGE_2D_EXT :: 0x904D;
	IMAGE_3D_EXT :: 0x904E;
	IMAGE_2D_RECT_EXT :: 0x904F;
	IMAGE_CUBE_EXT :: 0x9050;
	IMAGE_BUFFER_EXT :: 0x9051;
	IMAGE_1D_ARRAY_EXT :: 0x9052;
	IMAGE_2D_ARRAY_EXT :: 0x9053;
	IMAGE_CUBE_MAP_ARRAY_EXT :: 0x9054;
	IMAGE_2D_MULTISAMPLE_EXT :: 0x9055;
	IMAGE_2D_MULTISAMPLE_ARRAY_EXT :: 0x9056;
	INT_IMAGE_1D_EXT :: 0x9057;
	INT_IMAGE_2D_EXT :: 0x9058;
	INT_IMAGE_3D_EXT :: 0x9059;
	INT_IMAGE_2D_RECT_EXT :: 0x905A;
	INT_IMAGE_CUBE_EXT :: 0x905B;
	INT_IMAGE_BUFFER_EXT :: 0x905C;
	INT_IMAGE_1D_ARRAY_EXT :: 0x905D;
	INT_IMAGE_2D_ARRAY_EXT :: 0x905E;
	INT_IMAGE_CUBE_MAP_ARRAY_EXT :: 0x905F;
	INT_IMAGE_2D_MULTISAMPLE_EXT :: 0x9060;
	INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT :: 0x9061;
	UNSIGNED_INT_IMAGE_1D_EXT :: 0x9062;
	UNSIGNED_INT_IMAGE_2D_EXT :: 0x9063;
	UNSIGNED_INT_IMAGE_3D_EXT :: 0x9064;
	UNSIGNED_INT_IMAGE_2D_RECT_EXT :: 0x9065;
	UNSIGNED_INT_IMAGE_CUBE_EXT :: 0x9066;
	UNSIGNED_INT_IMAGE_BUFFER_EXT :: 0x9067;
	UNSIGNED_INT_IMAGE_1D_ARRAY_EXT :: 0x9068;
	UNSIGNED_INT_IMAGE_2D_ARRAY_EXT :: 0x9069;
	UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT :: 0x906A;
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT :: 0x906B;
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT :: 0x906C;
	MAX_IMAGE_SAMPLES_EXT :: 0x906D;
	IMAGE_BINDING_FORMAT_EXT :: 0x906E;
	VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT :: 0x00000001;
	ELEMENT_ARRAY_BARRIER_BIT_EXT :: 0x00000002;
	UNIFORM_BARRIER_BIT_EXT :: 0x00000004;
	TEXTURE_FETCH_BARRIER_BIT_EXT :: 0x00000008;
	SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT :: 0x00000020;
	COMMAND_BARRIER_BIT_EXT :: 0x00000040;
	PIXEL_BUFFER_BARRIER_BIT_EXT :: 0x00000080;
	TEXTURE_UPDATE_BARRIER_BIT_EXT :: 0x00000100;
	BUFFER_UPDATE_BARRIER_BIT_EXT :: 0x00000200;
	FRAMEBUFFER_BARRIER_BIT_EXT :: 0x00000400;
	TRANSFORM_FEEDBACK_BARRIER_BIT_EXT :: 0x00000800;
	ATOMIC_COUNTER_BARRIER_BIT_EXT :: 0x00001000;
	ALL_BARRIER_BITS_EXT :: 0xFFFFFFFF;
	
	// EXT_shader_integer_mix
	
	// EXT_shadow_funcs
	
	// EXT_shared_texture_palette
	SHARED_TEXTURE_PALETTE_EXT :: 0x81FB;
	
	// EXT_sparse_texture2
	
	// EXT_stencil_clear_tag
	STENCIL_TAG_BITS_EXT :: 0x88F2;
	STENCIL_CLEAR_TAG_VALUE_EXT :: 0x88F3;
	
	// EXT_stencil_two_side
	STENCIL_TEST_TWO_SIDE_EXT :: 0x8910;
	ACTIVE_STENCIL_FACE_EXT :: 0x8911;
	
	// EXT_stencil_wrap
	INCR_WRAP_EXT :: 0x8507;
	DECR_WRAP_EXT :: 0x8508;
	
	// EXT_subtexture
	
	// EXT_texture
	ALPHA4_EXT :: 0x803B;
	ALPHA8_EXT :: 0x803C;
	ALPHA12_EXT :: 0x803D;
	ALPHA16_EXT :: 0x803E;
	LUMINANCE4_EXT :: 0x803F;
	LUMINANCE8_EXT :: 0x8040;
	LUMINANCE12_EXT :: 0x8041;
	LUMINANCE16_EXT :: 0x8042;
	LUMINANCE4_ALPHA4_EXT :: 0x8043;
	LUMINANCE6_ALPHA2_EXT :: 0x8044;
	LUMINANCE8_ALPHA8_EXT :: 0x8045;
	LUMINANCE12_ALPHA4_EXT :: 0x8046;
	LUMINANCE12_ALPHA12_EXT :: 0x8047;
	LUMINANCE16_ALPHA16_EXT :: 0x8048;
	INTENSITY_EXT :: 0x8049;
	INTENSITY4_EXT :: 0x804A;
	INTENSITY8_EXT :: 0x804B;
	INTENSITY12_EXT :: 0x804C;
	INTENSITY16_EXT :: 0x804D;
	RGB2_EXT :: 0x804E;
	RGB4_EXT :: 0x804F;
	RGB5_EXT :: 0x8050;
	RGB8_EXT :: 0x8051;
	RGB10_EXT :: 0x8052;
	RGB12_EXT :: 0x8053;
	RGB16_EXT :: 0x8054;
	RGBA2_EXT :: 0x8055;
	RGBA4_EXT :: 0x8056;
	RGB5_A1_EXT :: 0x8057;
	RGBA8_EXT :: 0x8058;
	RGB10_A2_EXT :: 0x8059;
	RGBA12_EXT :: 0x805A;
	RGBA16_EXT :: 0x805B;
	TEXTURE_RED_SIZE_EXT :: 0x805C;
	TEXTURE_GREEN_SIZE_EXT :: 0x805D;
	TEXTURE_BLUE_SIZE_EXT :: 0x805E;
	TEXTURE_ALPHA_SIZE_EXT :: 0x805F;
	TEXTURE_LUMINANCE_SIZE_EXT :: 0x8060;
	TEXTURE_INTENSITY_SIZE_EXT :: 0x8061;
	REPLACE_EXT :: 0x8062;
	PROXY_TEXTURE_1D_EXT :: 0x8063;
	PROXY_TEXTURE_2D_EXT :: 0x8064;
	TEXTURE_TOO_LARGE_EXT :: 0x8065;
	
	// EXT_texture3D
	PACK_SKIP_IMAGES_EXT :: 0x806B;
	PACK_IMAGE_HEIGHT_EXT :: 0x806C;
	UNPACK_SKIP_IMAGES_EXT :: 0x806D;
	UNPACK_IMAGE_HEIGHT_EXT :: 0x806E;
	TEXTURE_3D_EXT :: 0x806F;
	PROXY_TEXTURE_3D_EXT :: 0x8070;
	TEXTURE_DEPTH_EXT :: 0x8071;
	TEXTURE_WRAP_R_EXT :: 0x8072;
	MAX_3D_TEXTURE_SIZE_EXT :: 0x8073;
	
	// EXT_texture_array
	TEXTURE_1D_ARRAY_EXT :: 0x8C18;
	PROXY_TEXTURE_1D_ARRAY_EXT :: 0x8C19;
	TEXTURE_2D_ARRAY_EXT :: 0x8C1A;
	PROXY_TEXTURE_2D_ARRAY_EXT :: 0x8C1B;
	TEXTURE_BINDING_1D_ARRAY_EXT :: 0x8C1C;
	TEXTURE_BINDING_2D_ARRAY_EXT :: 0x8C1D;
	MAX_ARRAY_TEXTURE_LAYERS_EXT :: 0x88FF;
	COMPARE_REF_DEPTH_TO_TEXTURE_EXT :: 0x884E;
	// FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT :: 0x8CD4;
	
	// EXT_texture_buffer_object
	TEXTURE_BUFFER_EXT :: 0x8C2A;
	MAX_TEXTURE_BUFFER_SIZE_EXT :: 0x8C2B;
	TEXTURE_BINDING_BUFFER_EXT :: 0x8C2C;
	TEXTURE_BUFFER_DATA_STORE_BINDING_EXT :: 0x8C2D;
	TEXTURE_BUFFER_FORMAT_EXT :: 0x8C2E;
	
	// EXT_texture_compression_latc
	COMPRESSED_LUMINANCE_LATC1_EXT :: 0x8C70;
	COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT :: 0x8C71;
	COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT :: 0x8C72;
	COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT :: 0x8C73;
	
	// EXT_texture_compression_rgtc
	COMPRESSED_RED_RGTC1_EXT :: 0x8DBB;
	COMPRESSED_SIGNED_RED_RGTC1_EXT :: 0x8DBC;
	COMPRESSED_RED_GREEN_RGTC2_EXT :: 0x8DBD;
	COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT :: 0x8DBE;
	
	// EXT_texture_compression_s3tc
	COMPRESSED_RGB_S3TC_DXT1_EXT :: 0x83F0;
	COMPRESSED_RGBA_S3TC_DXT1_EXT :: 0x83F1;
	COMPRESSED_RGBA_S3TC_DXT3_EXT :: 0x83F2;
	COMPRESSED_RGBA_S3TC_DXT5_EXT :: 0x83F3;
	
	// EXT_texture_cube_map
	NORMAL_MAP_EXT :: 0x8511;
	REFLECTION_MAP_EXT :: 0x8512;
	TEXTURE_CUBE_MAP_EXT :: 0x8513;
	TEXTURE_BINDING_CUBE_MAP_EXT :: 0x8514;
	TEXTURE_CUBE_MAP_POSITIVE_X_EXT :: 0x8515;
	TEXTURE_CUBE_MAP_NEGATIVE_X_EXT :: 0x8516;
	TEXTURE_CUBE_MAP_POSITIVE_Y_EXT :: 0x8517;
	TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT :: 0x8518;
	TEXTURE_CUBE_MAP_POSITIVE_Z_EXT :: 0x8519;
	TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT :: 0x851A;
	PROXY_TEXTURE_CUBE_MAP_EXT :: 0x851B;
	MAX_CUBE_MAP_TEXTURE_SIZE_EXT :: 0x851C;
	
	// EXT_texture_env_add
	
	// EXT_texture_env_combine
	COMBINE_EXT :: 0x8570;
	COMBINE_RGB_EXT :: 0x8571;
	COMBINE_ALPHA_EXT :: 0x8572;
	RGB_SCALE_EXT :: 0x8573;
	ADD_SIGNED_EXT :: 0x8574;
	INTERPOLATE_EXT :: 0x8575;
	CONSTANT_EXT :: 0x8576;
	PRIMARY_COLOR_EXT :: 0x8577;
	PREVIOUS_EXT :: 0x8578;
	SOURCE0_RGB_EXT :: 0x8580;
	SOURCE1_RGB_EXT :: 0x8581;
	SOURCE2_RGB_EXT :: 0x8582;
	SOURCE0_ALPHA_EXT :: 0x8588;
	SOURCE1_ALPHA_EXT :: 0x8589;
	SOURCE2_ALPHA_EXT :: 0x858A;
	OPERAND0_RGB_EXT :: 0x8590;
	OPERAND1_RGB_EXT :: 0x8591;
	OPERAND2_RGB_EXT :: 0x8592;
	OPERAND0_ALPHA_EXT :: 0x8598;
	OPERAND1_ALPHA_EXT :: 0x8599;
	OPERAND2_ALPHA_EXT :: 0x859A;
	
	// EXT_texture_env_dot3
	DOT3_RGB_EXT :: 0x8740;
	DOT3_RGBA_EXT :: 0x8741;
	
	// EXT_texture_filter_anisotropic
	TEXTURE_MAX_ANISOTROPY_EXT :: 0x84FE;
	MAX_TEXTURE_MAX_ANISOTROPY_EXT :: 0x84FF;
	
	// EXT_texture_filter_minmax
	TEXTURE_REDUCTION_MODE_EXT :: 0x9366;
	WEIGHTED_AVERAGE_EXT :: 0x9367;
	
	// EXT_texture_integer
	RGBA32UI_EXT :: 0x8D70;
	RGB32UI_EXT :: 0x8D71;
	ALPHA32UI_EXT :: 0x8D72;
	INTENSITY32UI_EXT :: 0x8D73;
	LUMINANCE32UI_EXT :: 0x8D74;
	LUMINANCE_ALPHA32UI_EXT :: 0x8D75;
	RGBA16UI_EXT :: 0x8D76;
	RGB16UI_EXT :: 0x8D77;
	ALPHA16UI_EXT :: 0x8D78;
	INTENSITY16UI_EXT :: 0x8D79;
	LUMINANCE16UI_EXT :: 0x8D7A;
	LUMINANCE_ALPHA16UI_EXT :: 0x8D7B;
	RGBA8UI_EXT :: 0x8D7C;
	RGB8UI_EXT :: 0x8D7D;
	ALPHA8UI_EXT :: 0x8D7E;
	INTENSITY8UI_EXT :: 0x8D7F;
	LUMINANCE8UI_EXT :: 0x8D80;
	LUMINANCE_ALPHA8UI_EXT :: 0x8D81;
	RGBA32I_EXT :: 0x8D82;
	RGB32I_EXT :: 0x8D83;
	ALPHA32I_EXT :: 0x8D84;
	INTENSITY32I_EXT :: 0x8D85;
	LUMINANCE32I_EXT :: 0x8D86;
	LUMINANCE_ALPHA32I_EXT :: 0x8D87;
	RGBA16I_EXT :: 0x8D88;
	RGB16I_EXT :: 0x8D89;
	ALPHA16I_EXT :: 0x8D8A;
	INTENSITY16I_EXT :: 0x8D8B;
	LUMINANCE16I_EXT :: 0x8D8C;
	LUMINANCE_ALPHA16I_EXT :: 0x8D8D;
	RGBA8I_EXT :: 0x8D8E;
	RGB8I_EXT :: 0x8D8F;
	ALPHA8I_EXT :: 0x8D90;
	INTENSITY8I_EXT :: 0x8D91;
	LUMINANCE8I_EXT :: 0x8D92;
	LUMINANCE_ALPHA8I_EXT :: 0x8D93;
	RED_INTEGER_EXT :: 0x8D94;
	GREEN_INTEGER_EXT :: 0x8D95;
	BLUE_INTEGER_EXT :: 0x8D96;
	ALPHA_INTEGER_EXT :: 0x8D97;
	RGB_INTEGER_EXT :: 0x8D98;
	RGBA_INTEGER_EXT :: 0x8D99;
	BGR_INTEGER_EXT :: 0x8D9A;
	BGRA_INTEGER_EXT :: 0x8D9B;
	LUMINANCE_INTEGER_EXT :: 0x8D9C;
	LUMINANCE_ALPHA_INTEGER_EXT :: 0x8D9D;
	RGBA_INTEGER_MODE_EXT :: 0x8D9E;
	
	// EXT_texture_lod_bias
	MAX_TEXTURE_LOD_BIAS_EXT :: 0x84FD;
	TEXTURE_FILTER_CONTROL_EXT :: 0x8500;
	TEXTURE_LOD_BIAS_EXT :: 0x8501;
	
	// EXT_texture_mirror_clamp
	MIRROR_CLAMP_EXT :: 0x8742;
	MIRROR_CLAMP_TO_EDGE_EXT :: 0x8743;
	MIRROR_CLAMP_TO_BORDER_EXT :: 0x8912;
	
	// EXT_texture_object
	TEXTURE_PRIORITY_EXT :: 0x8066;
	TEXTURE_RESIDENT_EXT :: 0x8067;
	TEXTURE_1D_BINDING_EXT :: 0x8068;
	TEXTURE_2D_BINDING_EXT :: 0x8069;
	TEXTURE_3D_BINDING_EXT :: 0x806A;
	
	// EXT_texture_perturb_normal
	PERTURB_EXT :: 0x85AE;
	TEXTURE_NORMAL_EXT :: 0x85AF;
	
	// EXT_texture_sRGB
	SRGB_EXT :: 0x8C40;
	SRGB8_EXT :: 0x8C41;
	SRGB_ALPHA_EXT :: 0x8C42;
	SRGB8_ALPHA8_EXT :: 0x8C43;
	SLUMINANCE_ALPHA_EXT :: 0x8C44;
	SLUMINANCE8_ALPHA8_EXT :: 0x8C45;
	SLUMINANCE_EXT :: 0x8C46;
	SLUMINANCE8_EXT :: 0x8C47;
	COMPRESSED_SRGB_EXT :: 0x8C48;
	COMPRESSED_SRGB_ALPHA_EXT :: 0x8C49;
	COMPRESSED_SLUMINANCE_EXT :: 0x8C4A;
	COMPRESSED_SLUMINANCE_ALPHA_EXT :: 0x8C4B;
	COMPRESSED_SRGB_S3TC_DXT1_EXT :: 0x8C4C;
	COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT :: 0x8C4D;
	COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT :: 0x8C4E;
	COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT :: 0x8C4F;
	
	// EXT_texture_sRGB_decode
	TEXTURE_SRGB_DECODE_EXT :: 0x8A48;
	DECODE_EXT :: 0x8A49;
	SKIP_DECODE_EXT :: 0x8A4A;
	
	// EXT_texture_shared_exponent
	RGB9_E5_EXT :: 0x8C3D;
	UNSIGNED_INT_5_9_9_9_REV_EXT :: 0x8C3E;
	TEXTURE_SHARED_SIZE_EXT :: 0x8C3F;
	
	// EXT_texture_snorm
	ALPHA_SNORM :: 0x9010;
	LUMINANCE_SNORM :: 0x9011;
	LUMINANCE_ALPHA_SNORM :: 0x9012;
	INTENSITY_SNORM :: 0x9013;
	ALPHA8_SNORM :: 0x9014;
	LUMINANCE8_SNORM :: 0x9015;
	LUMINANCE8_ALPHA8_SNORM :: 0x9016;
	INTENSITY8_SNORM :: 0x9017;
	ALPHA16_SNORM :: 0x9018;
	LUMINANCE16_SNORM :: 0x9019;
	LUMINANCE16_ALPHA16_SNORM :: 0x901A;
	INTENSITY16_SNORM :: 0x901B;
	RED_SNORM :: 0x8F90;
	RG_SNORM :: 0x8F91;
	RGB_SNORM :: 0x8F92;
	RGBA_SNORM :: 0x8F93;
	// R8_SNORM :: 0x8F94;
	// RG8_SNORM :: 0x8F95;
	// RGB8_SNORM :: 0x8F96;
	// RGBA8_SNORM :: 0x8F97;
	// R16_SNORM :: 0x8F98;
	// RG16_SNORM :: 0x8F99;
	// RGB16_SNORM :: 0x8F9A;
	// RGBA16_SNORM :: 0x8F9B;
	// SIGNED_NORMALIZED :: 0x8F9C;
	
	// EXT_texture_swizzle
	TEXTURE_SWIZZLE_R_EXT :: 0x8E42;
	TEXTURE_SWIZZLE_G_EXT :: 0x8E43;
	TEXTURE_SWIZZLE_B_EXT :: 0x8E44;
	TEXTURE_SWIZZLE_A_EXT :: 0x8E45;
	TEXTURE_SWIZZLE_RGBA_EXT :: 0x8E46;
	
	// EXT_timer_query
	TIME_ELAPSED_EXT :: 0x88BF;
	
	// EXT_transform_feedback
	TRANSFORM_FEEDBACK_BUFFER_EXT :: 0x8C8E;
	TRANSFORM_FEEDBACK_BUFFER_START_EXT :: 0x8C84;
	TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT :: 0x8C85;
	TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT :: 0x8C8F;
	INTERLEAVED_ATTRIBS_EXT :: 0x8C8C;
	SEPARATE_ATTRIBS_EXT :: 0x8C8D;
	PRIMITIVES_GENERATED_EXT :: 0x8C87;
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT :: 0x8C88;
	RASTERIZER_DISCARD_EXT :: 0x8C89;
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT :: 0x8C8A;
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT :: 0x8C8B;
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT :: 0x8C80;
	TRANSFORM_FEEDBACK_VARYINGS_EXT :: 0x8C83;
	TRANSFORM_FEEDBACK_BUFFER_MODE_EXT :: 0x8C7F;
	TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT :: 0x8C76;
	
	// EXT_vertex_array
	VERTEX_ARRAY_EXT :: 0x8074;
	NORMAL_ARRAY_EXT :: 0x8075;
	COLOR_ARRAY_EXT :: 0x8076;
	INDEX_ARRAY_EXT :: 0x8077;
	TEXTURE_COORD_ARRAY_EXT :: 0x8078;
	EDGE_FLAG_ARRAY_EXT :: 0x8079;
	VERTEX_ARRAY_SIZE_EXT :: 0x807A;
	VERTEX_ARRAY_TYPE_EXT :: 0x807B;
	VERTEX_ARRAY_STRIDE_EXT :: 0x807C;
	VERTEX_ARRAY_COUNT_EXT :: 0x807D;
	NORMAL_ARRAY_TYPE_EXT :: 0x807E;
	NORMAL_ARRAY_STRIDE_EXT :: 0x807F;
	NORMAL_ARRAY_COUNT_EXT :: 0x8080;
	COLOR_ARRAY_SIZE_EXT :: 0x8081;
	COLOR_ARRAY_TYPE_EXT :: 0x8082;
	COLOR_ARRAY_STRIDE_EXT :: 0x8083;
	COLOR_ARRAY_COUNT_EXT :: 0x8084;
	INDEX_ARRAY_TYPE_EXT :: 0x8085;
	INDEX_ARRAY_STRIDE_EXT :: 0x8086;
	INDEX_ARRAY_COUNT_EXT :: 0x8087;
	TEXTURE_COORD_ARRAY_SIZE_EXT :: 0x8088;
	TEXTURE_COORD_ARRAY_TYPE_EXT :: 0x8089;
	TEXTURE_COORD_ARRAY_STRIDE_EXT :: 0x808A;
	TEXTURE_COORD_ARRAY_COUNT_EXT :: 0x808B;
	EDGE_FLAG_ARRAY_STRIDE_EXT :: 0x808C;
	EDGE_FLAG_ARRAY_COUNT_EXT :: 0x808D;
	VERTEX_ARRAY_POINTER_EXT :: 0x808E;
	NORMAL_ARRAY_POINTER_EXT :: 0x808F;
	COLOR_ARRAY_POINTER_EXT :: 0x8090;
	INDEX_ARRAY_POINTER_EXT :: 0x8091;
	TEXTURE_COORD_ARRAY_POINTER_EXT :: 0x8092;
	EDGE_FLAG_ARRAY_POINTER_EXT :: 0x8093;
	
	// EXT_vertex_array_bgra
	// BGRA :: 0x80E1;
	
	// EXT_vertex_attrib_64bit
	// DOUBLE :: 0x140A;
	DOUBLE_VEC2_EXT :: 0x8FFC;
	DOUBLE_VEC3_EXT :: 0x8FFD;
	DOUBLE_VEC4_EXT :: 0x8FFE;
	DOUBLE_MAT2_EXT :: 0x8F46;
	DOUBLE_MAT3_EXT :: 0x8F47;
	DOUBLE_MAT4_EXT :: 0x8F48;
	DOUBLE_MAT2x3_EXT :: 0x8F49;
	DOUBLE_MAT2x4_EXT :: 0x8F4A;
	DOUBLE_MAT3x2_EXT :: 0x8F4B;
	DOUBLE_MAT3x4_EXT :: 0x8F4C;
	DOUBLE_MAT4x2_EXT :: 0x8F4D;
	DOUBLE_MAT4x3_EXT :: 0x8F4E;
	
	// EXT_vertex_shader
	VERTEX_SHADER_EXT :: 0x8780;
	VERTEX_SHADER_BINDING_EXT :: 0x8781;
	OP_INDEX_EXT :: 0x8782;
	OP_NEGATE_EXT :: 0x8783;
	OP_DOT3_EXT :: 0x8784;
	OP_DOT4_EXT :: 0x8785;
	OP_MUL_EXT :: 0x8786;
	OP_ADD_EXT :: 0x8787;
	OP_MADD_EXT :: 0x8788;
	OP_FRAC_EXT :: 0x8789;
	OP_MAX_EXT :: 0x878A;
	OP_MIN_EXT :: 0x878B;
	OP_SET_GE_EXT :: 0x878C;
	OP_SET_LT_EXT :: 0x878D;
	OP_CLAMP_EXT :: 0x878E;
	OP_FLOOR_EXT :: 0x878F;
	OP_ROUND_EXT :: 0x8790;
	OP_EXP_BASE_2_EXT :: 0x8791;
	OP_LOG_BASE_2_EXT :: 0x8792;
	OP_POWER_EXT :: 0x8793;
	OP_RECIP_EXT :: 0x8794;
	OP_RECIP_SQRT_EXT :: 0x8795;
	OP_SUB_EXT :: 0x8796;
	OP_CROSS_PRODUCT_EXT :: 0x8797;
	OP_MULTIPLY_MATRIX_EXT :: 0x8798;
	OP_MOV_EXT :: 0x8799;
	OUTPUT_VERTEX_EXT :: 0x879A;
	OUTPUT_COLOR0_EXT :: 0x879B;
	OUTPUT_COLOR1_EXT :: 0x879C;
	OUTPUT_TEXTURE_COORD0_EXT :: 0x879D;
	OUTPUT_TEXTURE_COORD1_EXT :: 0x879E;
	OUTPUT_TEXTURE_COORD2_EXT :: 0x879F;
	OUTPUT_TEXTURE_COORD3_EXT :: 0x87A0;
	OUTPUT_TEXTURE_COORD4_EXT :: 0x87A1;
	OUTPUT_TEXTURE_COORD5_EXT :: 0x87A2;
	OUTPUT_TEXTURE_COORD6_EXT :: 0x87A3;
	OUTPUT_TEXTURE_COORD7_EXT :: 0x87A4;
	OUTPUT_TEXTURE_COORD8_EXT :: 0x87A5;
	OUTPUT_TEXTURE_COORD9_EXT :: 0x87A6;
	OUTPUT_TEXTURE_COORD10_EXT :: 0x87A7;
	OUTPUT_TEXTURE_COORD11_EXT :: 0x87A8;
	OUTPUT_TEXTURE_COORD12_EXT :: 0x87A9;
	OUTPUT_TEXTURE_COORD13_EXT :: 0x87AA;
	OUTPUT_TEXTURE_COORD14_EXT :: 0x87AB;
	OUTPUT_TEXTURE_COORD15_EXT :: 0x87AC;
	OUTPUT_TEXTURE_COORD16_EXT :: 0x87AD;
	OUTPUT_TEXTURE_COORD17_EXT :: 0x87AE;
	OUTPUT_TEXTURE_COORD18_EXT :: 0x87AF;
	OUTPUT_TEXTURE_COORD19_EXT :: 0x87B0;
	OUTPUT_TEXTURE_COORD20_EXT :: 0x87B1;
	OUTPUT_TEXTURE_COORD21_EXT :: 0x87B2;
	OUTPUT_TEXTURE_COORD22_EXT :: 0x87B3;
	OUTPUT_TEXTURE_COORD23_EXT :: 0x87B4;
	OUTPUT_TEXTURE_COORD24_EXT :: 0x87B5;
	OUTPUT_TEXTURE_COORD25_EXT :: 0x87B6;
	OUTPUT_TEXTURE_COORD26_EXT :: 0x87B7;
	OUTPUT_TEXTURE_COORD27_EXT :: 0x87B8;
	OUTPUT_TEXTURE_COORD28_EXT :: 0x87B9;
	OUTPUT_TEXTURE_COORD29_EXT :: 0x87BA;
	OUTPUT_TEXTURE_COORD30_EXT :: 0x87BB;
	OUTPUT_TEXTURE_COORD31_EXT :: 0x87BC;
	OUTPUT_FOG_EXT :: 0x87BD;
	SCALAR_EXT :: 0x87BE;
	VECTOR_EXT :: 0x87BF;
	MATRIX_EXT :: 0x87C0;
	VARIANT_EXT :: 0x87C1;
	INVARIANT_EXT :: 0x87C2;
	LOCAL_CONSTANT_EXT :: 0x87C3;
	LOCAL_EXT :: 0x87C4;
	MAX_VERTEX_SHADER_INSTRUCTIONS_EXT :: 0x87C5;
	MAX_VERTEX_SHADER_VARIANTS_EXT :: 0x87C6;
	MAX_VERTEX_SHADER_INVARIANTS_EXT :: 0x87C7;
	MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT :: 0x87C8;
	MAX_VERTEX_SHADER_LOCALS_EXT :: 0x87C9;
	MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT :: 0x87CA;
	MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT :: 0x87CB;
	MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT :: 0x87CC;
	MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT :: 0x87CD;
	MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT :: 0x87CE;
	VERTEX_SHADER_INSTRUCTIONS_EXT :: 0x87CF;
	VERTEX_SHADER_VARIANTS_EXT :: 0x87D0;
	VERTEX_SHADER_INVARIANTS_EXT :: 0x87D1;
	VERTEX_SHADER_LOCAL_CONSTANTS_EXT :: 0x87D2;
	VERTEX_SHADER_LOCALS_EXT :: 0x87D3;
	VERTEX_SHADER_OPTIMIZED_EXT :: 0x87D4;
	X_EXT :: 0x87D5;
	Y_EXT :: 0x87D6;
	Z_EXT :: 0x87D7;
	W_EXT :: 0x87D8;
	NEGATIVE_X_EXT :: 0x87D9;
	NEGATIVE_Y_EXT :: 0x87DA;
	NEGATIVE_Z_EXT :: 0x87DB;
	NEGATIVE_W_EXT :: 0x87DC;
	ZERO_EXT :: 0x87DD;
	ONE_EXT :: 0x87DE;
	NEGATIVE_ONE_EXT :: 0x87DF;
	NORMALIZED_RANGE_EXT :: 0x87E0;
	FULL_RANGE_EXT :: 0x87E1;
	CURRENT_VERTEX_EXT :: 0x87E2;
	MVP_MATRIX_EXT :: 0x87E3;
	VARIANT_VALUE_EXT :: 0x87E4;
	VARIANT_DATATYPE_EXT :: 0x87E5;
	VARIANT_ARRAY_STRIDE_EXT :: 0x87E6;
	VARIANT_ARRAY_TYPE_EXT :: 0x87E7;
	VARIANT_ARRAY_EXT :: 0x87E8;
	VARIANT_ARRAY_POINTER_EXT :: 0x87E9;
	INVARIANT_VALUE_EXT :: 0x87EA;
	INVARIANT_DATATYPE_EXT :: 0x87EB;
	LOCAL_CONSTANT_VALUE_EXT :: 0x87EC;
	LOCAL_CONSTANT_DATATYPE_EXT :: 0x87ED;
	
	// EXT_vertex_weighting
	MODELVIEW0_STACK_DEPTH_EXT :: 0x0BA3;
	MODELVIEW1_STACK_DEPTH_EXT :: 0x8502;
	MODELVIEW0_MATRIX_EXT :: 0x0BA6;
	MODELVIEW1_MATRIX_EXT :: 0x8506;
	VERTEX_WEIGHTING_EXT :: 0x8509;
	MODELVIEW0_EXT :: 0x1700;
	MODELVIEW1_EXT :: 0x850A;
	CURRENT_VERTEX_WEIGHT_EXT :: 0x850B;
	VERTEX_WEIGHT_ARRAY_EXT :: 0x850C;
	VERTEX_WEIGHT_ARRAY_SIZE_EXT :: 0x850D;
	VERTEX_WEIGHT_ARRAY_TYPE_EXT :: 0x850E;
	VERTEX_WEIGHT_ARRAY_STRIDE_EXT :: 0x850F;
	VERTEX_WEIGHT_ARRAY_POINTER_EXT :: 0x8510;
	
	// EXT_win32_keyed_mutex
	
	// EXT_window_rectangles
	INCLUSIVE_EXT :: 0x8F10;
	EXCLUSIVE_EXT :: 0x8F11;
	WINDOW_RECTANGLE_EXT :: 0x8F12;
	WINDOW_RECTANGLE_MODE_EXT :: 0x8F13;
	MAX_WINDOW_RECTANGLES_EXT :: 0x8F14;
	NUM_WINDOW_RECTANGLES_EXT :: 0x8F15;
	
	// EXT_x11_sync_object
	SYNC_X11_FENCE_EXT :: 0x90E1;
	
	// GREMEDY_frame_terminator
	
	// GREMEDY_string_marker
	
	// HP_convolution_border_modes
	IGNORE_BORDER_HP :: 0x8150;
	CONSTANT_BORDER_HP :: 0x8151;
	REPLICATE_BORDER_HP :: 0x8153;
	CONVOLUTION_BORDER_COLOR_HP :: 0x8154;
	
	// HP_image_transform
	IMAGE_SCALE_X_HP :: 0x8155;
	IMAGE_SCALE_Y_HP :: 0x8156;
	IMAGE_TRANSLATE_X_HP :: 0x8157;
	IMAGE_TRANSLATE_Y_HP :: 0x8158;
	IMAGE_ROTATE_ANGLE_HP :: 0x8159;
	IMAGE_ROTATE_ORIGIN_X_HP :: 0x815A;
	IMAGE_ROTATE_ORIGIN_Y_HP :: 0x815B;
	IMAGE_MAG_FILTER_HP :: 0x815C;
	IMAGE_MIN_FILTER_HP :: 0x815D;
	IMAGE_CUBIC_WEIGHT_HP :: 0x815E;
	CUBIC_HP :: 0x815F;
	AVERAGE_HP :: 0x8160;
	IMAGE_TRANSFORM_2D_HP :: 0x8161;
	POST_IMAGE_TRANSFORM_COLOR_TABLE_HP :: 0x8162;
	PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP :: 0x8163;
	
	// HP_occlusion_test
	OCCLUSION_TEST_HP :: 0x8165;
	OCCLUSION_TEST_RESULT_HP :: 0x8166;
	
	// HP_texture_lighting
	TEXTURE_LIGHTING_MODE_HP :: 0x8167;
	TEXTURE_POST_SPECULAR_HP :: 0x8168;
	TEXTURE_PRE_SPECULAR_HP :: 0x8169;
	
	// IBM_cull_vertex
	CULL_VERTEX_IBM :: 103050;
	
	// IBM_multimode_draw_arrays
	
	// IBM_rasterpos_clip
	RASTER_POSITION_UNCLIPPED_IBM :: 0x19262;
	
	// IBM_static_data
	ALL_STATIC_DATA_IBM :: 103060;
	STATIC_VERTEX_ARRAY_IBM :: 103061;
	
	// IBM_texture_mirrored_repeat
	MIRRORED_REPEAT_IBM :: 0x8370;
	
	// IBM_vertex_array_lists
	VERTEX_ARRAY_LIST_IBM :: 103070;
	NORMAL_ARRAY_LIST_IBM :: 103071;
	COLOR_ARRAY_LIST_IBM :: 103072;
	INDEX_ARRAY_LIST_IBM :: 103073;
	TEXTURE_COORD_ARRAY_LIST_IBM :: 103074;
	EDGE_FLAG_ARRAY_LIST_IBM :: 103075;
	FOG_COORDINATE_ARRAY_LIST_IBM :: 103076;
	SECONDARY_COLOR_ARRAY_LIST_IBM :: 103077;
	VERTEX_ARRAY_LIST_STRIDE_IBM :: 103080;
	NORMAL_ARRAY_LIST_STRIDE_IBM :: 103081;
	COLOR_ARRAY_LIST_STRIDE_IBM :: 103082;
	INDEX_ARRAY_LIST_STRIDE_IBM :: 103083;
	TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM :: 103084;
	EDGE_FLAG_ARRAY_LIST_STRIDE_IBM :: 103085;
	FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM :: 103086;
	SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM :: 103087;
	
	// INGR_blend_func_separate
	
	// INGR_color_clamp
	RED_MIN_CLAMP_INGR :: 0x8560;
	GREEN_MIN_CLAMP_INGR :: 0x8561;
	BLUE_MIN_CLAMP_INGR :: 0x8562;
	ALPHA_MIN_CLAMP_INGR :: 0x8563;
	RED_MAX_CLAMP_INGR :: 0x8564;
	GREEN_MAX_CLAMP_INGR :: 0x8565;
	BLUE_MAX_CLAMP_INGR :: 0x8566;
	ALPHA_MAX_CLAMP_INGR :: 0x8567;
	
	// INGR_interlace_read
	INTERLACE_READ_INGR :: 0x8568;
	
	// INTEL_conservative_rasterization
	CONSERVATIVE_RASTERIZATION_INTEL :: 0x83FE;
	
	// INTEL_fragment_shader_ordering
	
	// INTEL_framebuffer_CMAA
	
	// INTEL_map_texture
	TEXTURE_MEMORY_LAYOUT_INTEL :: 0x83FF;
	LAYOUT_DEFAULT_INTEL :: 0;
	LAYOUT_LINEAR_INTEL :: 1;
	LAYOUT_LINEAR_CPU_CACHED_INTEL :: 2;
	
	// INTEL_parallel_arrays
	PARALLEL_ARRAYS_INTEL :: 0x83F4;
	VERTEX_ARRAY_PARALLEL_POINTERS_INTEL :: 0x83F5;
	NORMAL_ARRAY_PARALLEL_POINTERS_INTEL :: 0x83F6;
	COLOR_ARRAY_PARALLEL_POINTERS_INTEL :: 0x83F7;
	TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL :: 0x83F8;
	
	// INTEL_performance_query
	PERFQUERY_SINGLE_CONTEXT_INTEL :: 0x00000000;
	PERFQUERY_GLOBAL_CONTEXT_INTEL :: 0x00000001;
	PERFQUERY_WAIT_INTEL :: 0x83FB;
	PERFQUERY_FLUSH_INTEL :: 0x83FA;
	PERFQUERY_DONOT_FLUSH_INTEL :: 0x83F9;
	PERFQUERY_COUNTER_EVENT_INTEL :: 0x94F0;
	PERFQUERY_COUNTER_DURATION_NORM_INTEL :: 0x94F1;
	PERFQUERY_COUNTER_DURATION_RAW_INTEL :: 0x94F2;
	PERFQUERY_COUNTER_THROUGHPUT_INTEL :: 0x94F3;
	PERFQUERY_COUNTER_RAW_INTEL :: 0x94F4;
	PERFQUERY_COUNTER_TIMESTAMP_INTEL :: 0x94F5;
	PERFQUERY_COUNTER_DATA_UINT32_INTEL :: 0x94F8;
	PERFQUERY_COUNTER_DATA_UINT64_INTEL :: 0x94F9;
	PERFQUERY_COUNTER_DATA_FLOAT_INTEL :: 0x94FA;
	PERFQUERY_COUNTER_DATA_DOUBLE_INTEL :: 0x94FB;
	PERFQUERY_COUNTER_DATA_BOOL32_INTEL :: 0x94FC;
	PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL :: 0x94FD;
	PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL :: 0x94FE;
	PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL :: 0x94FF;
	PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL :: 0x9500;
	
	// KHR_blend_equation_advanced
	MULTIPLY_KHR :: 0x9294;
	SCREEN_KHR :: 0x9295;
	OVERLAY_KHR :: 0x9296;
	DARKEN_KHR :: 0x9297;
	LIGHTEN_KHR :: 0x9298;
	COLORDODGE_KHR :: 0x9299;
	COLORBURN_KHR :: 0x929A;
	HARDLIGHT_KHR :: 0x929B;
	SOFTLIGHT_KHR :: 0x929C;
	DIFFERENCE_KHR :: 0x929E;
	EXCLUSION_KHR :: 0x92A0;
	HSL_HUE_KHR :: 0x92AD;
	HSL_SATURATION_KHR :: 0x92AE;
	HSL_COLOR_KHR :: 0x92AF;
	HSL_LUMINOSITY_KHR :: 0x92B0;
	
	// KHR_blend_equation_advanced_coherent
	BLEND_ADVANCED_COHERENT_KHR :: 0x9285;
	
	// KHR_context_flush_control
	// CONTEXT_RELEASE_BEHAVIOR :: 0x82FB;
	// CONTEXT_RELEASE_BEHAVIOR_FLUSH :: 0x82FC;
	// NONE :: 0;
	CONTEXT_RELEASE_BEHAVIOR_KHR :: 0x82FB;
	CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR :: 0x82FC;
	// NONE :: 0;
	
	// KHR_debug
	// DEBUG_OUTPUT_SYNCHRONOUS :: 0x8242;
	// DEBUG_NEXT_LOGGED_MESSAGE_LENGTH :: 0x8243;
	// DEBUG_CALLBACK_FUNCTION :: 0x8244;
	// DEBUG_CALLBACK_USER_PARAM :: 0x8245;
	// DEBUG_SOURCE_API :: 0x8246;
	// DEBUG_SOURCE_WINDOW_SYSTEM :: 0x8247;
	// DEBUG_SOURCE_SHADER_COMPILER :: 0x8248;
	// DEBUG_SOURCE_THIRD_PARTY :: 0x8249;
	// DEBUG_SOURCE_APPLICATION :: 0x824A;
	// DEBUG_SOURCE_OTHER :: 0x824B;
	// DEBUG_TYPE_ERROR :: 0x824C;
	// DEBUG_TYPE_DEPRECATED_BEHAVIOR :: 0x824D;
	// DEBUG_TYPE_UNDEFINED_BEHAVIOR :: 0x824E;
	// DEBUG_TYPE_PORTABILITY :: 0x824F;
	// DEBUG_TYPE_PERFORMANCE :: 0x8250;
	// DEBUG_TYPE_OTHER :: 0x8251;
	// DEBUG_TYPE_MARKER :: 0x8268;
	// DEBUG_TYPE_PUSH_GROUP :: 0x8269;
	// DEBUG_TYPE_POP_GROUP :: 0x826A;
	// DEBUG_SEVERITY_NOTIFICATION :: 0x826B;
	// MAX_DEBUG_GROUP_STACK_DEPTH :: 0x826C;
	// DEBUG_GROUP_STACK_DEPTH :: 0x826D;
	// BUFFER :: 0x82E0;
	// SHADER :: 0x82E1;
	// PROGRAM :: 0x82E2;
	// VERTEX_ARRAY :: 0x8074;
	// QUERY :: 0x82E3;
	// PROGRAM_PIPELINE :: 0x82E4;
	// SAMPLER :: 0x82E6;
	// MAX_LABEL_LENGTH :: 0x82E8;
	// MAX_DEBUG_MESSAGE_LENGTH :: 0x9143;
	// MAX_DEBUG_LOGGED_MESSAGES :: 0x9144;
	// DEBUG_LOGGED_MESSAGES :: 0x9145;
	// DEBUG_SEVERITY_HIGH :: 0x9146;
	// DEBUG_SEVERITY_MEDIUM :: 0x9147;
	// DEBUG_SEVERITY_LOW :: 0x9148;
	// DEBUG_OUTPUT :: 0x92E0;
	// CONTEXT_FLAG_DEBUG_BIT :: 0x00000002;
	// STACK_OVERFLOW :: 0x0503;
	// STACK_UNDERFLOW :: 0x0504;
	DEBUG_OUTPUT_SYNCHRONOUS_KHR :: 0x8242;
	DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR :: 0x8243;
	DEBUG_CALLBACK_FUNCTION_KHR :: 0x8244;
	DEBUG_CALLBACK_USER_PARAM_KHR :: 0x8245;
	DEBUG_SOURCE_API_KHR :: 0x8246;
	DEBUG_SOURCE_WINDOW_SYSTEM_KHR :: 0x8247;
	DEBUG_SOURCE_SHADER_COMPILER_KHR :: 0x8248;
	DEBUG_SOURCE_THIRD_PARTY_KHR :: 0x8249;
	DEBUG_SOURCE_APPLICATION_KHR :: 0x824A;
	DEBUG_SOURCE_OTHER_KHR :: 0x824B;
	DEBUG_TYPE_ERROR_KHR :: 0x824C;
	DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR :: 0x824D;
	DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR :: 0x824E;
	DEBUG_TYPE_PORTABILITY_KHR :: 0x824F;
	DEBUG_TYPE_PERFORMANCE_KHR :: 0x8250;
	DEBUG_TYPE_OTHER_KHR :: 0x8251;
	DEBUG_TYPE_MARKER_KHR :: 0x8268;
	DEBUG_TYPE_PUSH_GROUP_KHR :: 0x8269;
	DEBUG_TYPE_POP_GROUP_KHR :: 0x826A;
	DEBUG_SEVERITY_NOTIFICATION_KHR :: 0x826B;
	MAX_DEBUG_GROUP_STACK_DEPTH_KHR :: 0x826C;
	DEBUG_GROUP_STACK_DEPTH_KHR :: 0x826D;
	BUFFER_KHR :: 0x82E0;
	SHADER_KHR :: 0x82E1;
	PROGRAM_KHR :: 0x82E2;
	VERTEX_ARRAY_KHR :: 0x8074;
	QUERY_KHR :: 0x82E3;
	PROGRAM_PIPELINE_KHR :: 0x82E4;
	SAMPLER_KHR :: 0x82E6;
	MAX_LABEL_LENGTH_KHR :: 0x82E8;
	MAX_DEBUG_MESSAGE_LENGTH_KHR :: 0x9143;
	MAX_DEBUG_LOGGED_MESSAGES_KHR :: 0x9144;
	DEBUG_LOGGED_MESSAGES_KHR :: 0x9145;
	DEBUG_SEVERITY_HIGH_KHR :: 0x9146;
	DEBUG_SEVERITY_MEDIUM_KHR :: 0x9147;
	DEBUG_SEVERITY_LOW_KHR :: 0x9148;
	DEBUG_OUTPUT_KHR :: 0x92E0;
	CONTEXT_FLAG_DEBUG_BIT_KHR :: 0x00000002;
	STACK_OVERFLOW_KHR :: 0x0503;
	STACK_UNDERFLOW_KHR :: 0x0504;
	// DISPLAY_LIST :: 0x82E7;
	
	// KHR_no_error
	CONTEXT_FLAG_NO_ERROR_BIT_KHR :: 0x00000008;
	
	// KHR_parallel_shader_compile
	MAX_SHADER_COMPILER_THREADS_KHR :: 0x91B0;
	COMPLETION_STATUS_KHR :: 0x91B1;
	
	// KHR_robust_buffer_access_behavior
	
	// KHR_robustness
	// NO_ERROR :: 0;
	CONTEXT_ROBUST_ACCESS :: 0x90F3;
	// LOSE_CONTEXT_ON_RESET :: 0x8252;
	// GUILTY_CONTEXT_RESET :: 0x8253;
	// INNOCENT_CONTEXT_RESET :: 0x8254;
	// UNKNOWN_CONTEXT_RESET :: 0x8255;
	// RESET_NOTIFICATION_STRATEGY :: 0x8256;
	// NO_RESET_NOTIFICATION :: 0x8261;
	// CONTEXT_LOST :: 0x0507;
	// NO_ERROR :: 0;
	CONTEXT_ROBUST_ACCESS_KHR :: 0x90F3;
	LOSE_CONTEXT_ON_RESET_KHR :: 0x8252;
	GUILTY_CONTEXT_RESET_KHR :: 0x8253;
	INNOCENT_CONTEXT_RESET_KHR :: 0x8254;
	UNKNOWN_CONTEXT_RESET_KHR :: 0x8255;
	RESET_NOTIFICATION_STRATEGY_KHR :: 0x8256;
	NO_RESET_NOTIFICATION_KHR :: 0x8261;
	CONTEXT_LOST_KHR :: 0x0507;
	
	// KHR_texture_compression_astc_hdr
	COMPRESSED_RGBA_ASTC_4x4_KHR :: 0x93B0;
	COMPRESSED_RGBA_ASTC_5x4_KHR :: 0x93B1;
	COMPRESSED_RGBA_ASTC_5x5_KHR :: 0x93B2;
	COMPRESSED_RGBA_ASTC_6x5_KHR :: 0x93B3;
	COMPRESSED_RGBA_ASTC_6x6_KHR :: 0x93B4;
	COMPRESSED_RGBA_ASTC_8x5_KHR :: 0x93B5;
	COMPRESSED_RGBA_ASTC_8x6_KHR :: 0x93B6;
	COMPRESSED_RGBA_ASTC_8x8_KHR :: 0x93B7;
	COMPRESSED_RGBA_ASTC_10x5_KHR :: 0x93B8;
	COMPRESSED_RGBA_ASTC_10x6_KHR :: 0x93B9;
	COMPRESSED_RGBA_ASTC_10x8_KHR :: 0x93BA;
	COMPRESSED_RGBA_ASTC_10x10_KHR :: 0x93BB;
	COMPRESSED_RGBA_ASTC_12x10_KHR :: 0x93BC;
	COMPRESSED_RGBA_ASTC_12x12_KHR :: 0x93BD;
	COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR :: 0x93D0;
	COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR :: 0x93D1;
	COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR :: 0x93D2;
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR :: 0x93D3;
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR :: 0x93D4;
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR :: 0x93D5;
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR :: 0x93D6;
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR :: 0x93D7;
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR :: 0x93D8;
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR :: 0x93D9;
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR :: 0x93DA;
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR :: 0x93DB;
	COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR :: 0x93DC;
	COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR :: 0x93DD;
	
	// KHR_texture_compression_astc_ldr
	// COMPRESSED_RGBA_ASTC_4x4_KHR :: 0x93B0;
	// COMPRESSED_RGBA_ASTC_5x4_KHR :: 0x93B1;
	// COMPRESSED_RGBA_ASTC_5x5_KHR :: 0x93B2;
	// COMPRESSED_RGBA_ASTC_6x5_KHR :: 0x93B3;
	// COMPRESSED_RGBA_ASTC_6x6_KHR :: 0x93B4;
	// COMPRESSED_RGBA_ASTC_8x5_KHR :: 0x93B5;
	// COMPRESSED_RGBA_ASTC_8x6_KHR :: 0x93B6;
	// COMPRESSED_RGBA_ASTC_8x8_KHR :: 0x93B7;
	// COMPRESSED_RGBA_ASTC_10x5_KHR :: 0x93B8;
	// COMPRESSED_RGBA_ASTC_10x6_KHR :: 0x93B9;
	// COMPRESSED_RGBA_ASTC_10x8_KHR :: 0x93BA;
	// COMPRESSED_RGBA_ASTC_10x10_KHR :: 0x93BB;
	// COMPRESSED_RGBA_ASTC_12x10_KHR :: 0x93BC;
	// COMPRESSED_RGBA_ASTC_12x12_KHR :: 0x93BD;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR :: 0x93D0;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR :: 0x93D1;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR :: 0x93D2;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR :: 0x93D3;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR :: 0x93D4;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR :: 0x93D5;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR :: 0x93D6;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR :: 0x93D7;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR :: 0x93D8;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR :: 0x93D9;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR :: 0x93DA;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR :: 0x93DB;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR :: 0x93DC;
	// COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR :: 0x93DD;
	
	// KHR_texture_compression_astc_sliced_3d
	
	// MESAX_texture_stack
	TEXTURE_1D_STACK_MESAX :: 0x8759;
	TEXTURE_2D_STACK_MESAX :: 0x875A;
	PROXY_TEXTURE_1D_STACK_MESAX :: 0x875B;
	PROXY_TEXTURE_2D_STACK_MESAX :: 0x875C;
	TEXTURE_1D_STACK_BINDING_MESAX :: 0x875D;
	TEXTURE_2D_STACK_BINDING_MESAX :: 0x875E;
	
	// MESA_pack_invert
	PACK_INVERT_MESA :: 0x8758;
	
	// MESA_program_binary_formats
	PROGRAM_BINARY_FORMAT_MESA :: 0x875F;
	
	// MESA_resize_buffers
	
	// MESA_shader_integer_functions
	
	// MESA_tile_raster_order
	TILE_RASTER_ORDER_FIXED_MESA :: 0x8BB8;
	TILE_RASTER_ORDER_INCREASING_X_MESA :: 0x8BB9;
	TILE_RASTER_ORDER_INCREASING_Y_MESA :: 0x8BBA;
	
	// MESA_window_pos
	
	// MESA_ycbcr_texture
	UNSIGNED_SHORT_8_8_MESA :: 0x85BA;
	UNSIGNED_SHORT_8_8_REV_MESA :: 0x85BB;
	YCBCR_MESA :: 0x8757;
	
	// NVX_blend_equation_advanced_multi_draw_buffers
	
	// NVX_conditional_render
	
	// NVX_gpu_memory_info
	GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX :: 0x9047;
	GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX :: 0x9048;
	GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX :: 0x9049;
	GPU_MEMORY_INFO_EVICTION_COUNT_NVX :: 0x904A;
	GPU_MEMORY_INFO_EVICTED_MEMORY_NVX :: 0x904B;
	
	// NVX_linked_gpu_multicast
	LGPU_SEPARATE_STORAGE_BIT_NVX :: 0x0800;
	MAX_LGPU_GPUS_NVX :: 0x92BA;
	
	// NV_alpha_to_coverage_dither_control
	ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV :: 0x934D;
	ALPHA_TO_COVERAGE_DITHER_ENABLE_NV :: 0x934E;
	ALPHA_TO_COVERAGE_DITHER_DISABLE_NV :: 0x934F;
	ALPHA_TO_COVERAGE_DITHER_MODE_NV :: 0x92BF;
	
	// NV_bindless_multi_draw_indirect
	
	// NV_bindless_multi_draw_indirect_count
	
	// NV_bindless_texture
	
	// NV_blend_equation_advanced
	BLEND_OVERLAP_NV :: 0x9281;
	BLEND_PREMULTIPLIED_SRC_NV :: 0x9280;
	BLUE_NV :: 0x1905;
	COLORBURN_NV :: 0x929A;
	COLORDODGE_NV :: 0x9299;
	CONJOINT_NV :: 0x9284;
	CONTRAST_NV :: 0x92A1;
	DARKEN_NV :: 0x9297;
	DIFFERENCE_NV :: 0x929E;
	DISJOINT_NV :: 0x9283;
	DST_ATOP_NV :: 0x928F;
	DST_IN_NV :: 0x928B;
	DST_NV :: 0x9287;
	DST_OUT_NV :: 0x928D;
	DST_OVER_NV :: 0x9289;
	EXCLUSION_NV :: 0x92A0;
	GREEN_NV :: 0x1904;
	HARDLIGHT_NV :: 0x929B;
	HARDMIX_NV :: 0x92A9;
	HSL_COLOR_NV :: 0x92AF;
	HSL_HUE_NV :: 0x92AD;
	HSL_LUMINOSITY_NV :: 0x92B0;
	HSL_SATURATION_NV :: 0x92AE;
	// INVERT :: 0x150A;
	INVERT_OVG_NV :: 0x92B4;
	INVERT_RGB_NV :: 0x92A3;
	LIGHTEN_NV :: 0x9298;
	LINEARBURN_NV :: 0x92A5;
	LINEARDODGE_NV :: 0x92A4;
	LINEARLIGHT_NV :: 0x92A7;
	MINUS_CLAMPED_NV :: 0x92B3;
	MINUS_NV :: 0x929F;
	MULTIPLY_NV :: 0x9294;
	OVERLAY_NV :: 0x9296;
	PINLIGHT_NV :: 0x92A8;
	PLUS_CLAMPED_ALPHA_NV :: 0x92B2;
	PLUS_CLAMPED_NV :: 0x92B1;
	PLUS_DARKER_NV :: 0x9292;
	PLUS_NV :: 0x9291;
	RED_NV :: 0x1903;
	SCREEN_NV :: 0x9295;
	SOFTLIGHT_NV :: 0x929C;
	SRC_ATOP_NV :: 0x928E;
	SRC_IN_NV :: 0x928A;
	SRC_NV :: 0x9286;
	SRC_OUT_NV :: 0x928C;
	SRC_OVER_NV :: 0x9288;
	UNCORRELATED_NV :: 0x9282;
	VIVIDLIGHT_NV :: 0x92A6;
	XOR_NV :: 0x1506;
	// ZERO :: 0;
	
	// NV_blend_equation_advanced_coherent
	BLEND_ADVANCED_COHERENT_NV :: 0x9285;
	
	// NV_blend_minmax_factor
	// FACTOR_MIN_AMD :: 0x901C;
	// FACTOR_MAX_AMD :: 0x901D;
	
	// NV_blend_square
	
	// NV_clip_space_w_scaling
	VIEWPORT_POSITION_W_SCALE_NV :: 0x937C;
	VIEWPORT_POSITION_W_SCALE_X_COEFF_NV :: 0x937D;
	VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV :: 0x937E;
	
	// NV_command_list
	TERMINATE_SEQUENCE_COMMAND_NV :: 0x0000;
	NOP_COMMAND_NV :: 0x0001;
	DRAW_ELEMENTS_COMMAND_NV :: 0x0002;
	DRAW_ARRAYS_COMMAND_NV :: 0x0003;
	DRAW_ELEMENTS_STRIP_COMMAND_NV :: 0x0004;
	DRAW_ARRAYS_STRIP_COMMAND_NV :: 0x0005;
	DRAW_ELEMENTS_INSTANCED_COMMAND_NV :: 0x0006;
	DRAW_ARRAYS_INSTANCED_COMMAND_NV :: 0x0007;
	ELEMENT_ADDRESS_COMMAND_NV :: 0x0008;
	ATTRIBUTE_ADDRESS_COMMAND_NV :: 0x0009;
	UNIFORM_ADDRESS_COMMAND_NV :: 0x000A;
	BLEND_COLOR_COMMAND_NV :: 0x000B;
	STENCIL_REF_COMMAND_NV :: 0x000C;
	LINE_WIDTH_COMMAND_NV :: 0x000D;
	POLYGON_OFFSET_COMMAND_NV :: 0x000E;
	ALPHA_REF_COMMAND_NV :: 0x000F;
	VIEWPORT_COMMAND_NV :: 0x0010;
	SCISSOR_COMMAND_NV :: 0x0011;
	FRONT_FACE_COMMAND_NV :: 0x0012;
	
	// NV_compute_program5
	COMPUTE_PROGRAM_NV :: 0x90FB;
	COMPUTE_PROGRAM_PARAMETER_BUFFER_NV :: 0x90FC;
	
	// NV_conditional_render
	QUERY_WAIT_NV :: 0x8E13;
	QUERY_NO_WAIT_NV :: 0x8E14;
	QUERY_BY_REGION_WAIT_NV :: 0x8E15;
	QUERY_BY_REGION_NO_WAIT_NV :: 0x8E16;
	
	// NV_conservative_raster
	CONSERVATIVE_RASTERIZATION_NV :: 0x9346;
	SUBPIXEL_PRECISION_BIAS_X_BITS_NV :: 0x9347;
	SUBPIXEL_PRECISION_BIAS_Y_BITS_NV :: 0x9348;
	MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV :: 0x9349;
	
	// NV_conservative_raster_dilate
	CONSERVATIVE_RASTER_DILATE_NV :: 0x9379;
	CONSERVATIVE_RASTER_DILATE_RANGE_NV :: 0x937A;
	CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV :: 0x937B;
	
	// NV_conservative_raster_pre_snap
	CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV :: 0x9550;
	
	// NV_conservative_raster_pre_snap_triangles
	CONSERVATIVE_RASTER_MODE_NV :: 0x954D;
	CONSERVATIVE_RASTER_MODE_POST_SNAP_NV :: 0x954E;
	CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV :: 0x954F;
	// CONSERVATIVE_RASTER_MODE_NV :: 0x954D;
	
	// NV_conservative_raster_underestimation
	
	// NV_copy_depth_to_color
	DEPTH_STENCIL_TO_RGBA_NV :: 0x886E;
	DEPTH_STENCIL_TO_BGRA_NV :: 0x886F;
	
	// NV_copy_image
	
	// NV_deep_texture3D
	MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV :: 0x90D0;
	MAX_DEEP_3D_TEXTURE_DEPTH_NV :: 0x90D1;
	
	// NV_depth_buffer_float
	DEPTH_COMPONENT32F_NV :: 0x8DAB;
	DEPTH32F_STENCIL8_NV :: 0x8DAC;
	FLOAT_32_UNSIGNED_INT_24_8_REV_NV :: 0x8DAD;
	DEPTH_BUFFER_FLOAT_MODE_NV :: 0x8DAF;
	
	// NV_depth_clamp
	DEPTH_CLAMP_NV :: 0x864F;
	
	// NV_draw_texture
	
	// NV_draw_vulkan_image
	
	// NV_evaluators
	EVAL_2D_NV :: 0x86C0;
	EVAL_TRIANGULAR_2D_NV :: 0x86C1;
	MAP_TESSELLATION_NV :: 0x86C2;
	MAP_ATTRIB_U_ORDER_NV :: 0x86C3;
	MAP_ATTRIB_V_ORDER_NV :: 0x86C4;
	EVAL_FRACTIONAL_TESSELLATION_NV :: 0x86C5;
	EVAL_VERTEX_ATTRIB0_NV :: 0x86C6;
	EVAL_VERTEX_ATTRIB1_NV :: 0x86C7;
	EVAL_VERTEX_ATTRIB2_NV :: 0x86C8;
	EVAL_VERTEX_ATTRIB3_NV :: 0x86C9;
	EVAL_VERTEX_ATTRIB4_NV :: 0x86CA;
	EVAL_VERTEX_ATTRIB5_NV :: 0x86CB;
	EVAL_VERTEX_ATTRIB6_NV :: 0x86CC;
	EVAL_VERTEX_ATTRIB7_NV :: 0x86CD;
	EVAL_VERTEX_ATTRIB8_NV :: 0x86CE;
	EVAL_VERTEX_ATTRIB9_NV :: 0x86CF;
	EVAL_VERTEX_ATTRIB10_NV :: 0x86D0;
	EVAL_VERTEX_ATTRIB11_NV :: 0x86D1;
	EVAL_VERTEX_ATTRIB12_NV :: 0x86D2;
	EVAL_VERTEX_ATTRIB13_NV :: 0x86D3;
	EVAL_VERTEX_ATTRIB14_NV :: 0x86D4;
	EVAL_VERTEX_ATTRIB15_NV :: 0x86D5;
	MAX_MAP_TESSELLATION_NV :: 0x86D6;
	MAX_RATIONAL_EVAL_ORDER_NV :: 0x86D7;
	
	// NV_explicit_multisample
	SAMPLE_POSITION_NV :: 0x8E50;
	SAMPLE_MASK_NV :: 0x8E51;
	SAMPLE_MASK_VALUE_NV :: 0x8E52;
	TEXTURE_BINDING_RENDERBUFFER_NV :: 0x8E53;
	TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV :: 0x8E54;
	TEXTURE_RENDERBUFFER_NV :: 0x8E55;
	SAMPLER_RENDERBUFFER_NV :: 0x8E56;
	INT_SAMPLER_RENDERBUFFER_NV :: 0x8E57;
	UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV :: 0x8E58;
	MAX_SAMPLE_MASK_WORDS_NV :: 0x8E59;
	
	// NV_fence
	ALL_COMPLETED_NV :: 0x84F2;
	FENCE_STATUS_NV :: 0x84F3;
	FENCE_CONDITION_NV :: 0x84F4;
	
	// NV_fill_rectangle
	FILL_RECTANGLE_NV :: 0x933C;
	
	// NV_float_buffer
	FLOAT_R_NV :: 0x8880;
	FLOAT_RG_NV :: 0x8881;
	FLOAT_RGB_NV :: 0x8882;
	FLOAT_RGBA_NV :: 0x8883;
	FLOAT_R16_NV :: 0x8884;
	FLOAT_R32_NV :: 0x8885;
	FLOAT_RG16_NV :: 0x8886;
	FLOAT_RG32_NV :: 0x8887;
	FLOAT_RGB16_NV :: 0x8888;
	FLOAT_RGB32_NV :: 0x8889;
	FLOAT_RGBA16_NV :: 0x888A;
	FLOAT_RGBA32_NV :: 0x888B;
	TEXTURE_FLOAT_COMPONENTS_NV :: 0x888C;
	FLOAT_CLEAR_COLOR_VALUE_NV :: 0x888D;
	FLOAT_RGBA_MODE_NV :: 0x888E;
	
	// NV_fog_distance
	FOG_DISTANCE_MODE_NV :: 0x855A;
	EYE_RADIAL_NV :: 0x855B;
	EYE_PLANE_ABSOLUTE_NV :: 0x855C;
	// EYE_PLANE :: 0x2502;
	
	// NV_fragment_coverage_to_color
	FRAGMENT_COVERAGE_TO_COLOR_NV :: 0x92DD;
	FRAGMENT_COVERAGE_COLOR_NV :: 0x92DE;
	
	// NV_fragment_program
	MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV :: 0x8868;
	FRAGMENT_PROGRAM_NV :: 0x8870;
	MAX_TEXTURE_COORDS_NV :: 0x8871;
	MAX_TEXTURE_IMAGE_UNITS_NV :: 0x8872;
	FRAGMENT_PROGRAM_BINDING_NV :: 0x8873;
	PROGRAM_ERROR_STRING_NV :: 0x8874;
	
	// NV_fragment_program2
	MAX_PROGRAM_EXEC_INSTRUCTIONS_NV :: 0x88F4;
	MAX_PROGRAM_CALL_DEPTH_NV :: 0x88F5;
	MAX_PROGRAM_IF_DEPTH_NV :: 0x88F6;
	MAX_PROGRAM_LOOP_DEPTH_NV :: 0x88F7;
	MAX_PROGRAM_LOOP_COUNT_NV :: 0x88F8;
	
	// NV_fragment_program4
	
	// NV_fragment_program_option
	
	// NV_fragment_shader_interlock
	
	// NV_framebuffer_mixed_samples
	// RASTER_MULTISAMPLE_EXT :: 0x9327;
	COVERAGE_MODULATION_TABLE_NV :: 0x9331;
	// RASTER_SAMPLES_EXT :: 0x9328;
	// MAX_RASTER_SAMPLES_EXT :: 0x9329;
	// RASTER_FIXED_SAMPLE_LOCATIONS_EXT :: 0x932A;
	// MULTISAMPLE_RASTERIZATION_ALLOWED_EXT :: 0x932B;
	// EFFECTIVE_RASTER_SAMPLES_EXT :: 0x932C;
	COLOR_SAMPLES_NV :: 0x8E20;
	DEPTH_SAMPLES_NV :: 0x932D;
	STENCIL_SAMPLES_NV :: 0x932E;
	MIXED_DEPTH_SAMPLES_SUPPORTED_NV :: 0x932F;
	MIXED_STENCIL_SAMPLES_SUPPORTED_NV :: 0x9330;
	COVERAGE_MODULATION_NV :: 0x9332;
	COVERAGE_MODULATION_TABLE_SIZE_NV :: 0x9333;
	
	// NV_framebuffer_multisample_coverage
	RENDERBUFFER_COVERAGE_SAMPLES_NV :: 0x8CAB;
	RENDERBUFFER_COLOR_SAMPLES_NV :: 0x8E10;
	MAX_MULTISAMPLE_COVERAGE_MODES_NV :: 0x8E11;
	MULTISAMPLE_COVERAGE_MODES_NV :: 0x8E12;
	
	// NV_geometry_program4
	// LINES_ADJACENCY_EXT :: 0x000A;
	// LINE_STRIP_ADJACENCY_EXT :: 0x000B;
	// TRIANGLES_ADJACENCY_EXT :: 0x000C;
	// TRIANGLE_STRIP_ADJACENCY_EXT :: 0x000D;
	GEOMETRY_PROGRAM_NV :: 0x8C26;
	MAX_PROGRAM_OUTPUT_VERTICES_NV :: 0x8C27;
	MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV :: 0x8C28;
	// GEOMETRY_VERTICES_OUT_EXT :: 0x8DDA;
	// GEOMETRY_INPUT_TYPE_EXT :: 0x8DDB;
	// GEOMETRY_OUTPUT_TYPE_EXT :: 0x8DDC;
	// MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT :: 0x8C29;
	// FRAMEBUFFER_ATTACHMENT_LAYERED_EXT :: 0x8DA7;
	// FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT :: 0x8DA8;
	// FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT :: 0x8DA9;
	// FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT :: 0x8CD4;
	// PROGRAM_POINT_SIZE_EXT :: 0x8642;
	
	// NV_geometry_shader4
	
	// NV_geometry_shader_passthrough
	
	// NV_gpu_multicast
	PER_GPU_STORAGE_BIT_NV :: 0x0800;
	MULTICAST_GPUS_NV :: 0x92BA;
	RENDER_GPU_MASK_NV :: 0x9558;
	PER_GPU_STORAGE_NV :: 0x9548;
	MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV :: 0x9549;
	
	// NV_gpu_program4
	MIN_PROGRAM_TEXEL_OFFSET_NV :: 0x8904;
	MAX_PROGRAM_TEXEL_OFFSET_NV :: 0x8905;
	PROGRAM_ATTRIB_COMPONENTS_NV :: 0x8906;
	PROGRAM_RESULT_COMPONENTS_NV :: 0x8907;
	MAX_PROGRAM_ATTRIB_COMPONENTS_NV :: 0x8908;
	MAX_PROGRAM_RESULT_COMPONENTS_NV :: 0x8909;
	MAX_PROGRAM_GENERIC_ATTRIBS_NV :: 0x8DA5;
	MAX_PROGRAM_GENERIC_RESULTS_NV :: 0x8DA6;
	
	// NV_gpu_program5
	MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV :: 0x8E5A;
	MIN_FRAGMENT_INTERPOLATION_OFFSET_NV :: 0x8E5B;
	MAX_FRAGMENT_INTERPOLATION_OFFSET_NV :: 0x8E5C;
	FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV :: 0x8E5D;
	MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV :: 0x8E5E;
	MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV :: 0x8E5F;
	MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV :: 0x8F44;
	MAX_PROGRAM_SUBROUTINE_NUM_NV :: 0x8F45;
	
	// NV_gpu_program5_mem_extended
	
	// NV_gpu_shader5
	// INT64_NV :: 0x140E;
	// UNSIGNED_INT64_NV :: 0x140F;
	// INT8_NV :: 0x8FE0;
	// INT8_VEC2_NV :: 0x8FE1;
	// INT8_VEC3_NV :: 0x8FE2;
	// INT8_VEC4_NV :: 0x8FE3;
	// INT16_NV :: 0x8FE4;
	// INT16_VEC2_NV :: 0x8FE5;
	// INT16_VEC3_NV :: 0x8FE6;
	// INT16_VEC4_NV :: 0x8FE7;
	// INT64_VEC2_NV :: 0x8FE9;
	// INT64_VEC3_NV :: 0x8FEA;
	// INT64_VEC4_NV :: 0x8FEB;
	// UNSIGNED_INT8_NV :: 0x8FEC;
	// UNSIGNED_INT8_VEC2_NV :: 0x8FED;
	// UNSIGNED_INT8_VEC3_NV :: 0x8FEE;
	// UNSIGNED_INT8_VEC4_NV :: 0x8FEF;
	// UNSIGNED_INT16_NV :: 0x8FF0;
	// UNSIGNED_INT16_VEC2_NV :: 0x8FF1;
	// UNSIGNED_INT16_VEC3_NV :: 0x8FF2;
	// UNSIGNED_INT16_VEC4_NV :: 0x8FF3;
	// UNSIGNED_INT64_VEC2_NV :: 0x8FF5;
	// UNSIGNED_INT64_VEC3_NV :: 0x8FF6;
	// UNSIGNED_INT64_VEC4_NV :: 0x8FF7;
	// FLOAT16_NV :: 0x8FF8;
	// FLOAT16_VEC2_NV :: 0x8FF9;
	// FLOAT16_VEC3_NV :: 0x8FFA;
	// FLOAT16_VEC4_NV :: 0x8FFB;
	// PATCHES :: 0x000E;
	
	// NV_half_float
	HALF_FLOAT_NV :: 0x140B;
	
	// NV_internalformat_sample_query
	// RENDERBUFFER :: 0x8D41;
	// TEXTURE_2D_MULTISAMPLE :: 0x9100;
	// TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9102;
	MULTISAMPLES_NV :: 0x9371;
	SUPERSAMPLE_SCALE_X_NV :: 0x9372;
	SUPERSAMPLE_SCALE_Y_NV :: 0x9373;
	CONFORMANT_NV :: 0x9374;
	
	// NV_light_max_exponent
	MAX_SHININESS_NV :: 0x8504;
	MAX_SPOT_EXPONENT_NV :: 0x8505;
	
	// NV_multisample_coverage
	// SAMPLES_ARB :: 0x80A9;
	// COLOR_SAMPLES_NV :: 0x8E20;
	
	// NV_multisample_filter_hint
	MULTISAMPLE_FILTER_HINT_NV :: 0x8534;
	
	// NV_occlusion_query
	PIXEL_COUNTER_BITS_NV :: 0x8864;
	CURRENT_OCCLUSION_QUERY_ID_NV :: 0x8865;
	PIXEL_COUNT_NV :: 0x8866;
	PIXEL_COUNT_AVAILABLE_NV :: 0x8867;
	
	// NV_packed_depth_stencil
	DEPTH_STENCIL_NV :: 0x84F9;
	UNSIGNED_INT_24_8_NV :: 0x84FA;
	
	// NV_parameter_buffer_object
	MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV :: 0x8DA0;
	MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV :: 0x8DA1;
	VERTEX_PROGRAM_PARAMETER_BUFFER_NV :: 0x8DA2;
	GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV :: 0x8DA3;
	FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV :: 0x8DA4;
	
	// NV_parameter_buffer_object2
	
	// NV_path_rendering
	PATH_FORMAT_SVG_NV :: 0x9070;
	PATH_FORMAT_PS_NV :: 0x9071;
	STANDARD_FONT_NAME_NV :: 0x9072;
	SYSTEM_FONT_NAME_NV :: 0x9073;
	FILE_NAME_NV :: 0x9074;
	PATH_STROKE_WIDTH_NV :: 0x9075;
	PATH_END_CAPS_NV :: 0x9076;
	PATH_INITIAL_END_CAP_NV :: 0x9077;
	PATH_TERMINAL_END_CAP_NV :: 0x9078;
	PATH_JOIN_STYLE_NV :: 0x9079;
	PATH_MITER_LIMIT_NV :: 0x907A;
	PATH_DASH_CAPS_NV :: 0x907B;
	PATH_INITIAL_DASH_CAP_NV :: 0x907C;
	PATH_TERMINAL_DASH_CAP_NV :: 0x907D;
	PATH_DASH_OFFSET_NV :: 0x907E;
	PATH_CLIENT_LENGTH_NV :: 0x907F;
	PATH_FILL_MODE_NV :: 0x9080;
	PATH_FILL_MASK_NV :: 0x9081;
	PATH_FILL_COVER_MODE_NV :: 0x9082;
	PATH_STROKE_COVER_MODE_NV :: 0x9083;
	PATH_STROKE_MASK_NV :: 0x9084;
	COUNT_UP_NV :: 0x9088;
	COUNT_DOWN_NV :: 0x9089;
	PATH_OBJECT_BOUNDING_BOX_NV :: 0x908A;
	CONVEX_HULL_NV :: 0x908B;
	BOUNDING_BOX_NV :: 0x908D;
	TRANSLATE_X_NV :: 0x908E;
	TRANSLATE_Y_NV :: 0x908F;
	TRANSLATE_2D_NV :: 0x9090;
	TRANSLATE_3D_NV :: 0x9091;
	AFFINE_2D_NV :: 0x9092;
	AFFINE_3D_NV :: 0x9094;
	TRANSPOSE_AFFINE_2D_NV :: 0x9096;
	TRANSPOSE_AFFINE_3D_NV :: 0x9098;
	UTF8_NV :: 0x909A;
	UTF16_NV :: 0x909B;
	BOUNDING_BOX_OF_BOUNDING_BOXES_NV :: 0x909C;
	PATH_COMMAND_COUNT_NV :: 0x909D;
	PATH_COORD_COUNT_NV :: 0x909E;
	PATH_DASH_ARRAY_COUNT_NV :: 0x909F;
	PATH_COMPUTED_LENGTH_NV :: 0x90A0;
	PATH_FILL_BOUNDING_BOX_NV :: 0x90A1;
	PATH_STROKE_BOUNDING_BOX_NV :: 0x90A2;
	SQUARE_NV :: 0x90A3;
	ROUND_NV :: 0x90A4;
	TRIANGULAR_NV :: 0x90A5;
	BEVEL_NV :: 0x90A6;
	MITER_REVERT_NV :: 0x90A7;
	MITER_TRUNCATE_NV :: 0x90A8;
	SKIP_MISSING_GLYPH_NV :: 0x90A9;
	USE_MISSING_GLYPH_NV :: 0x90AA;
	PATH_ERROR_POSITION_NV :: 0x90AB;
	ACCUM_ADJACENT_PAIRS_NV :: 0x90AD;
	ADJACENT_PAIRS_NV :: 0x90AE;
	FIRST_TO_REST_NV :: 0x90AF;
	PATH_GEN_MODE_NV :: 0x90B0;
	PATH_GEN_COEFF_NV :: 0x90B1;
	PATH_GEN_COMPONENTS_NV :: 0x90B3;
	PATH_STENCIL_FUNC_NV :: 0x90B7;
	PATH_STENCIL_REF_NV :: 0x90B8;
	PATH_STENCIL_VALUE_MASK_NV :: 0x90B9;
	PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV :: 0x90BD;
	PATH_STENCIL_DEPTH_OFFSET_UNITS_NV :: 0x90BE;
	PATH_COVER_DEPTH_FUNC_NV :: 0x90BF;
	PATH_DASH_OFFSET_RESET_NV :: 0x90B4;
	MOVE_TO_RESETS_NV :: 0x90B5;
	MOVE_TO_CONTINUES_NV :: 0x90B6;
	CLOSE_PATH_NV :: 0x00;
	MOVE_TO_NV :: 0x02;
	RELATIVE_MOVE_TO_NV :: 0x03;
	LINE_TO_NV :: 0x04;
	RELATIVE_LINE_TO_NV :: 0x05;
	HORIZONTAL_LINE_TO_NV :: 0x06;
	RELATIVE_HORIZONTAL_LINE_TO_NV :: 0x07;
	VERTICAL_LINE_TO_NV :: 0x08;
	RELATIVE_VERTICAL_LINE_TO_NV :: 0x09;
	QUADRATIC_CURVE_TO_NV :: 0x0A;
	RELATIVE_QUADRATIC_CURVE_TO_NV :: 0x0B;
	CUBIC_CURVE_TO_NV :: 0x0C;
	RELATIVE_CUBIC_CURVE_TO_NV :: 0x0D;
	SMOOTH_QUADRATIC_CURVE_TO_NV :: 0x0E;
	RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV :: 0x0F;
	SMOOTH_CUBIC_CURVE_TO_NV :: 0x10;
	RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV :: 0x11;
	SMALL_CCW_ARC_TO_NV :: 0x12;
	RELATIVE_SMALL_CCW_ARC_TO_NV :: 0x13;
	SMALL_CW_ARC_TO_NV :: 0x14;
	RELATIVE_SMALL_CW_ARC_TO_NV :: 0x15;
	LARGE_CCW_ARC_TO_NV :: 0x16;
	RELATIVE_LARGE_CCW_ARC_TO_NV :: 0x17;
	LARGE_CW_ARC_TO_NV :: 0x18;
	RELATIVE_LARGE_CW_ARC_TO_NV :: 0x19;
	RESTART_PATH_NV :: 0xF0;
	DUP_FIRST_CUBIC_CURVE_TO_NV :: 0xF2;
	DUP_LAST_CUBIC_CURVE_TO_NV :: 0xF4;
	RECT_NV :: 0xF6;
	CIRCULAR_CCW_ARC_TO_NV :: 0xF8;
	CIRCULAR_CW_ARC_TO_NV :: 0xFA;
	CIRCULAR_TANGENT_ARC_TO_NV :: 0xFC;
	ARC_TO_NV :: 0xFE;
	RELATIVE_ARC_TO_NV :: 0xFF;
	BOLD_BIT_NV :: 0x01;
	ITALIC_BIT_NV :: 0x02;
	GLYPH_WIDTH_BIT_NV :: 0x01;
	GLYPH_HEIGHT_BIT_NV :: 0x02;
	GLYPH_HORIZONTAL_BEARING_X_BIT_NV :: 0x04;
	GLYPH_HORIZONTAL_BEARING_Y_BIT_NV :: 0x08;
	GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV :: 0x10;
	GLYPH_VERTICAL_BEARING_X_BIT_NV :: 0x20;
	GLYPH_VERTICAL_BEARING_Y_BIT_NV :: 0x40;
	GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV :: 0x80;
	GLYPH_HAS_KERNING_BIT_NV :: 0x100;
	FONT_X_MIN_BOUNDS_BIT_NV :: 0x00010000;
	FONT_Y_MIN_BOUNDS_BIT_NV :: 0x00020000;
	FONT_X_MAX_BOUNDS_BIT_NV :: 0x00040000;
	FONT_Y_MAX_BOUNDS_BIT_NV :: 0x00080000;
	FONT_UNITS_PER_EM_BIT_NV :: 0x00100000;
	FONT_ASCENDER_BIT_NV :: 0x00200000;
	FONT_DESCENDER_BIT_NV :: 0x00400000;
	FONT_HEIGHT_BIT_NV :: 0x00800000;
	FONT_MAX_ADVANCE_WIDTH_BIT_NV :: 0x01000000;
	FONT_MAX_ADVANCE_HEIGHT_BIT_NV :: 0x02000000;
	FONT_UNDERLINE_POSITION_BIT_NV :: 0x04000000;
	FONT_UNDERLINE_THICKNESS_BIT_NV :: 0x08000000;
	FONT_HAS_KERNING_BIT_NV :: 0x10000000;
	ROUNDED_RECT_NV :: 0xE8;
	RELATIVE_ROUNDED_RECT_NV :: 0xE9;
	ROUNDED_RECT2_NV :: 0xEA;
	RELATIVE_ROUNDED_RECT2_NV :: 0xEB;
	ROUNDED_RECT4_NV :: 0xEC;
	RELATIVE_ROUNDED_RECT4_NV :: 0xED;
	ROUNDED_RECT8_NV :: 0xEE;
	RELATIVE_ROUNDED_RECT8_NV :: 0xEF;
	RELATIVE_RECT_NV :: 0xF7;
	FONT_GLYPHS_AVAILABLE_NV :: 0x9368;
	FONT_TARGET_UNAVAILABLE_NV :: 0x9369;
	FONT_UNAVAILABLE_NV :: 0x936A;
	FONT_UNINTELLIGIBLE_NV :: 0x936B;
	CONIC_CURVE_TO_NV :: 0x1A;
	RELATIVE_CONIC_CURVE_TO_NV :: 0x1B;
	FONT_NUM_GLYPH_INDICES_BIT_NV :: 0x20000000;
	STANDARD_FONT_FORMAT_NV :: 0x936C;
	GL_2_BYTES_NV :: 0x1407;
	GL_3_BYTES_NV :: 0x1408;
	GL_4_BYTES_NV :: 0x1409;
	EYE_LINEAR_NV :: 0x2400;
	OBJECT_LINEAR_NV :: 0x2401;
	CONSTANT_NV :: 0x8576;
	PATH_FOG_GEN_MODE_NV :: 0x90AC;
	// PRIMARY_COLOR :: 0x8577;
	PRIMARY_COLOR_NV :: 0x852C;
	SECONDARY_COLOR_NV :: 0x852D;
	PATH_GEN_COLOR_FORMAT_NV :: 0x90B2;
	PATH_PROJECTION_NV :: 0x1701;
	PATH_MODELVIEW_NV :: 0x1700;
	PATH_MODELVIEW_STACK_DEPTH_NV :: 0x0BA3;
	PATH_MODELVIEW_MATRIX_NV :: 0x0BA6;
	PATH_MAX_MODELVIEW_STACK_DEPTH_NV :: 0x0D36;
	PATH_TRANSPOSE_MODELVIEW_MATRIX_NV :: 0x84E3;
	PATH_PROJECTION_STACK_DEPTH_NV :: 0x0BA4;
	PATH_PROJECTION_MATRIX_NV :: 0x0BA7;
	PATH_MAX_PROJECTION_STACK_DEPTH_NV :: 0x0D38;
	PATH_TRANSPOSE_PROJECTION_MATRIX_NV :: 0x84E4;
	FRAGMENT_INPUT_NV :: 0x936D;
	
	// NV_path_rendering_shared_edge
	SHARED_EDGE_NV :: 0xC0;
	
	// NV_pixel_data_range
	WRITE_PIXEL_DATA_RANGE_NV :: 0x8878;
	READ_PIXEL_DATA_RANGE_NV :: 0x8879;
	WRITE_PIXEL_DATA_RANGE_LENGTH_NV :: 0x887A;
	READ_PIXEL_DATA_RANGE_LENGTH_NV :: 0x887B;
	WRITE_PIXEL_DATA_RANGE_POINTER_NV :: 0x887C;
	READ_PIXEL_DATA_RANGE_POINTER_NV :: 0x887D;
	
	// NV_point_sprite
	POINT_SPRITE_NV :: 0x8861;
	COORD_REPLACE_NV :: 0x8862;
	POINT_SPRITE_R_MODE_NV :: 0x8863;
	
	// NV_present_video
	FRAME_NV :: 0x8E26;
	FIELDS_NV :: 0x8E27;
	CURRENT_TIME_NV :: 0x8E28;
	NUM_FILL_STREAMS_NV :: 0x8E29;
	PRESENT_TIME_NV :: 0x8E2A;
	PRESENT_DURATION_NV :: 0x8E2B;
	
	// NV_primitive_restart
	PRIMITIVE_RESTART_NV :: 0x8558;
	PRIMITIVE_RESTART_INDEX_NV :: 0x8559;
	
	// NV_query_resource
	QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV :: 0x9540;
	QUERY_RESOURCE_MEMTYPE_VIDMEM_NV :: 0x9542;
	QUERY_RESOURCE_SYS_RESERVED_NV :: 0x9544;
	QUERY_RESOURCE_TEXTURE_NV :: 0x9545;
	QUERY_RESOURCE_RENDERBUFFER_NV :: 0x9546;
	QUERY_RESOURCE_BUFFEROBJECT_NV :: 0x9547;
	
	// NV_query_resource_tag
	
	// NV_register_combiners
	REGISTER_COMBINERS_NV :: 0x8522;
	VARIABLE_A_NV :: 0x8523;
	VARIABLE_B_NV :: 0x8524;
	VARIABLE_C_NV :: 0x8525;
	VARIABLE_D_NV :: 0x8526;
	VARIABLE_E_NV :: 0x8527;
	VARIABLE_F_NV :: 0x8528;
	VARIABLE_G_NV :: 0x8529;
	CONSTANT_COLOR0_NV :: 0x852A;
	CONSTANT_COLOR1_NV :: 0x852B;
	// PRIMARY_COLOR_NV :: 0x852C;
	// SECONDARY_COLOR_NV :: 0x852D;
	SPARE0_NV :: 0x852E;
	SPARE1_NV :: 0x852F;
	DISCARD_NV :: 0x8530;
	E_TIMES_F_NV :: 0x8531;
	SPARE0_PLUS_SECONDARY_COLOR_NV :: 0x8532;
	UNSIGNED_IDENTITY_NV :: 0x8536;
	UNSIGNED_INVERT_NV :: 0x8537;
	EXPAND_NORMAL_NV :: 0x8538;
	EXPAND_NEGATE_NV :: 0x8539;
	HALF_BIAS_NORMAL_NV :: 0x853A;
	HALF_BIAS_NEGATE_NV :: 0x853B;
	SIGNED_IDENTITY_NV :: 0x853C;
	SIGNED_NEGATE_NV :: 0x853D;
	SCALE_BY_TWO_NV :: 0x853E;
	SCALE_BY_FOUR_NV :: 0x853F;
	SCALE_BY_ONE_HALF_NV :: 0x8540;
	BIAS_BY_NEGATIVE_ONE_HALF_NV :: 0x8541;
	COMBINER_INPUT_NV :: 0x8542;
	COMBINER_MAPPING_NV :: 0x8543;
	COMBINER_COMPONENT_USAGE_NV :: 0x8544;
	COMBINER_AB_DOT_PRODUCT_NV :: 0x8545;
	COMBINER_CD_DOT_PRODUCT_NV :: 0x8546;
	COMBINER_MUX_SUM_NV :: 0x8547;
	COMBINER_SCALE_NV :: 0x8548;
	COMBINER_BIAS_NV :: 0x8549;
	COMBINER_AB_OUTPUT_NV :: 0x854A;
	COMBINER_CD_OUTPUT_NV :: 0x854B;
	COMBINER_SUM_OUTPUT_NV :: 0x854C;
	MAX_GENERAL_COMBINERS_NV :: 0x854D;
	NUM_GENERAL_COMBINERS_NV :: 0x854E;
	COLOR_SUM_CLAMP_NV :: 0x854F;
	COMBINER0_NV :: 0x8550;
	COMBINER1_NV :: 0x8551;
	COMBINER2_NV :: 0x8552;
	COMBINER3_NV :: 0x8553;
	COMBINER4_NV :: 0x8554;
	COMBINER5_NV :: 0x8555;
	COMBINER6_NV :: 0x8556;
	COMBINER7_NV :: 0x8557;
	// TEXTURE0_ARB :: 0x84C0;
	// TEXTURE1_ARB :: 0x84C1;
	// ZERO :: 0;
	// NONE :: 0;
	// FOG :: 0x0B60;
	
	// NV_register_combiners2
	PER_STAGE_CONSTANTS_NV :: 0x8535;
	
	// NV_robustness_video_memory_purge
	PURGED_CONTEXT_RESET_NV :: 0x92BB;
	
	// NV_sample_locations
	SAMPLE_LOCATION_SUBPIXEL_BITS_NV :: 0x933D;
	SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV :: 0x933E;
	SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV :: 0x933F;
	PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV :: 0x9340;
	SAMPLE_LOCATION_NV :: 0x8E50;
	PROGRAMMABLE_SAMPLE_LOCATION_NV :: 0x9341;
	FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV :: 0x9342;
	FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV :: 0x9343;
	
	// NV_sample_mask_override_coverage
	
	// NV_shader_atomic_counters
	
	// NV_shader_atomic_float
	
	// NV_shader_atomic_float64
	
	// NV_shader_atomic_fp16_vector
	
	// NV_shader_atomic_int64
	
	// NV_shader_buffer_load
	BUFFER_GPU_ADDRESS_NV :: 0x8F1D;
	GPU_ADDRESS_NV :: 0x8F34;
	MAX_SHADER_BUFFER_ADDRESS_NV :: 0x8F35;
	
	// NV_shader_buffer_store
	SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV :: 0x00000010;
	// READ_WRITE :: 0x88BA;
	// WRITE_ONLY :: 0x88B9;
	
	// NV_shader_storage_buffer_object
	
	// NV_shader_thread_group
	WARP_SIZE_NV :: 0x9339;
	WARPS_PER_SM_NV :: 0x933A;
	SM_COUNT_NV :: 0x933B;
	
	// NV_shader_thread_shuffle
	
	// NV_stereo_view_rendering
	
	// NV_tessellation_program5
	MAX_PROGRAM_PATCH_ATTRIBS_NV :: 0x86D8;
	TESS_CONTROL_PROGRAM_NV :: 0x891E;
	TESS_EVALUATION_PROGRAM_NV :: 0x891F;
	TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV :: 0x8C74;
	TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV :: 0x8C75;
	
	// NV_texgen_emboss
	EMBOSS_LIGHT_NV :: 0x855D;
	EMBOSS_CONSTANT_NV :: 0x855E;
	EMBOSS_MAP_NV :: 0x855F;
	
	// NV_texgen_reflection
	NORMAL_MAP_NV :: 0x8511;
	REFLECTION_MAP_NV :: 0x8512;
	
	// NV_texture_barrier
	
	// NV_texture_compression_vtc
	
	// NV_texture_env_combine4
	COMBINE4_NV :: 0x8503;
	SOURCE3_RGB_NV :: 0x8583;
	SOURCE3_ALPHA_NV :: 0x858B;
	OPERAND3_RGB_NV :: 0x8593;
	OPERAND3_ALPHA_NV :: 0x859B;
	
	// NV_texture_expand_normal
	TEXTURE_UNSIGNED_REMAP_MODE_NV :: 0x888F;
	
	// NV_texture_multisample
	TEXTURE_COVERAGE_SAMPLES_NV :: 0x9045;
	TEXTURE_COLOR_SAMPLES_NV :: 0x9046;
	
	// NV_texture_rectangle
	TEXTURE_RECTANGLE_NV :: 0x84F5;
	TEXTURE_BINDING_RECTANGLE_NV :: 0x84F6;
	PROXY_TEXTURE_RECTANGLE_NV :: 0x84F7;
	MAX_RECTANGLE_TEXTURE_SIZE_NV :: 0x84F8;
	
	// NV_texture_rectangle_compressed
	
	// NV_texture_shader
	OFFSET_TEXTURE_RECTANGLE_NV :: 0x864C;
	OFFSET_TEXTURE_RECTANGLE_SCALE_NV :: 0x864D;
	DOT_PRODUCT_TEXTURE_RECTANGLE_NV :: 0x864E;
	RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV :: 0x86D9;
	UNSIGNED_INT_S8_S8_8_8_NV :: 0x86DA;
	UNSIGNED_INT_8_8_S8_S8_REV_NV :: 0x86DB;
	DSDT_MAG_INTENSITY_NV :: 0x86DC;
	SHADER_CONSISTENT_NV :: 0x86DD;
	TEXTURE_SHADER_NV :: 0x86DE;
	SHADER_OPERATION_NV :: 0x86DF;
	CULL_MODES_NV :: 0x86E0;
	OFFSET_TEXTURE_MATRIX_NV :: 0x86E1;
	OFFSET_TEXTURE_SCALE_NV :: 0x86E2;
	OFFSET_TEXTURE_BIAS_NV :: 0x86E3;
	OFFSET_TEXTURE_2D_MATRIX_NV :: 0x86E1;
	OFFSET_TEXTURE_2D_SCALE_NV :: 0x86E2;
	OFFSET_TEXTURE_2D_BIAS_NV :: 0x86E3;
	PREVIOUS_TEXTURE_INPUT_NV :: 0x86E4;
	CONST_EYE_NV :: 0x86E5;
	PASS_THROUGH_NV :: 0x86E6;
	CULL_FRAGMENT_NV :: 0x86E7;
	OFFSET_TEXTURE_2D_NV :: 0x86E8;
	DEPENDENT_AR_TEXTURE_2D_NV :: 0x86E9;
	DEPENDENT_GB_TEXTURE_2D_NV :: 0x86EA;
	DOT_PRODUCT_NV :: 0x86EC;
	DOT_PRODUCT_DEPTH_REPLACE_NV :: 0x86ED;
	DOT_PRODUCT_TEXTURE_2D_NV :: 0x86EE;
	DOT_PRODUCT_TEXTURE_CUBE_MAP_NV :: 0x86F0;
	DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV :: 0x86F1;
	DOT_PRODUCT_REFLECT_CUBE_MAP_NV :: 0x86F2;
	DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV :: 0x86F3;
	HILO_NV :: 0x86F4;
	DSDT_NV :: 0x86F5;
	DSDT_MAG_NV :: 0x86F6;
	DSDT_MAG_VIB_NV :: 0x86F7;
	HILO16_NV :: 0x86F8;
	SIGNED_HILO_NV :: 0x86F9;
	SIGNED_HILO16_NV :: 0x86FA;
	SIGNED_RGBA_NV :: 0x86FB;
	SIGNED_RGBA8_NV :: 0x86FC;
	SIGNED_RGB_NV :: 0x86FE;
	SIGNED_RGB8_NV :: 0x86FF;
	SIGNED_LUMINANCE_NV :: 0x8701;
	SIGNED_LUMINANCE8_NV :: 0x8702;
	SIGNED_LUMINANCE_ALPHA_NV :: 0x8703;
	SIGNED_LUMINANCE8_ALPHA8_NV :: 0x8704;
	SIGNED_ALPHA_NV :: 0x8705;
	SIGNED_ALPHA8_NV :: 0x8706;
	SIGNED_INTENSITY_NV :: 0x8707;
	SIGNED_INTENSITY8_NV :: 0x8708;
	DSDT8_NV :: 0x8709;
	DSDT8_MAG8_NV :: 0x870A;
	DSDT8_MAG8_INTENSITY8_NV :: 0x870B;
	SIGNED_RGB_UNSIGNED_ALPHA_NV :: 0x870C;
	SIGNED_RGB8_UNSIGNED_ALPHA8_NV :: 0x870D;
	HI_SCALE_NV :: 0x870E;
	LO_SCALE_NV :: 0x870F;
	DS_SCALE_NV :: 0x8710;
	DT_SCALE_NV :: 0x8711;
	MAGNITUDE_SCALE_NV :: 0x8712;
	VIBRANCE_SCALE_NV :: 0x8713;
	HI_BIAS_NV :: 0x8714;
	LO_BIAS_NV :: 0x8715;
	DS_BIAS_NV :: 0x8716;
	DT_BIAS_NV :: 0x8717;
	MAGNITUDE_BIAS_NV :: 0x8718;
	VIBRANCE_BIAS_NV :: 0x8719;
	TEXTURE_BORDER_VALUES_NV :: 0x871A;
	TEXTURE_HI_SIZE_NV :: 0x871B;
	TEXTURE_LO_SIZE_NV :: 0x871C;
	TEXTURE_DS_SIZE_NV :: 0x871D;
	TEXTURE_DT_SIZE_NV :: 0x871E;
	TEXTURE_MAG_SIZE_NV :: 0x871F;
	
	// NV_texture_shader2
	DOT_PRODUCT_TEXTURE_3D_NV :: 0x86EF;
	
	// NV_texture_shader3
	OFFSET_PROJECTIVE_TEXTURE_2D_NV :: 0x8850;
	OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV :: 0x8851;
	OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV :: 0x8852;
	OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV :: 0x8853;
	OFFSET_HILO_TEXTURE_2D_NV :: 0x8854;
	OFFSET_HILO_TEXTURE_RECTANGLE_NV :: 0x8855;
	OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV :: 0x8856;
	OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV :: 0x8857;
	DEPENDENT_HILO_TEXTURE_2D_NV :: 0x8858;
	DEPENDENT_RGB_TEXTURE_3D_NV :: 0x8859;
	DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV :: 0x885A;
	DOT_PRODUCT_PASS_THROUGH_NV :: 0x885B;
	DOT_PRODUCT_TEXTURE_1D_NV :: 0x885C;
	DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV :: 0x885D;
	HILO8_NV :: 0x885E;
	SIGNED_HILO8_NV :: 0x885F;
	FORCE_BLUE_TO_ONE_NV :: 0x8860;
	
	// NV_transform_feedback
	BACK_PRIMARY_COLOR_NV :: 0x8C77;
	BACK_SECONDARY_COLOR_NV :: 0x8C78;
	TEXTURE_COORD_NV :: 0x8C79;
	CLIP_DISTANCE_NV :: 0x8C7A;
	VERTEX_ID_NV :: 0x8C7B;
	PRIMITIVE_ID_NV :: 0x8C7C;
	GENERIC_ATTRIB_NV :: 0x8C7D;
	TRANSFORM_FEEDBACK_ATTRIBS_NV :: 0x8C7E;
	TRANSFORM_FEEDBACK_BUFFER_MODE_NV :: 0x8C7F;
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV :: 0x8C80;
	ACTIVE_VARYINGS_NV :: 0x8C81;
	ACTIVE_VARYING_MAX_LENGTH_NV :: 0x8C82;
	TRANSFORM_FEEDBACK_VARYINGS_NV :: 0x8C83;
	TRANSFORM_FEEDBACK_BUFFER_START_NV :: 0x8C84;
	TRANSFORM_FEEDBACK_BUFFER_SIZE_NV :: 0x8C85;
	TRANSFORM_FEEDBACK_RECORD_NV :: 0x8C86;
	PRIMITIVES_GENERATED_NV :: 0x8C87;
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV :: 0x8C88;
	RASTERIZER_DISCARD_NV :: 0x8C89;
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV :: 0x8C8A;
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV :: 0x8C8B;
	INTERLEAVED_ATTRIBS_NV :: 0x8C8C;
	SEPARATE_ATTRIBS_NV :: 0x8C8D;
	TRANSFORM_FEEDBACK_BUFFER_NV :: 0x8C8E;
	TRANSFORM_FEEDBACK_BUFFER_BINDING_NV :: 0x8C8F;
	LAYER_NV :: 0x8DAA;
	NEXT_BUFFER_NV :: -2;
	SKIP_COMPONENTS4_NV :: -3;
	SKIP_COMPONENTS3_NV :: -4;
	SKIP_COMPONENTS2_NV :: -5;
	SKIP_COMPONENTS1_NV :: -6;
	
	// NV_transform_feedback2
	TRANSFORM_FEEDBACK_NV :: 0x8E22;
	TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV :: 0x8E23;
	TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV :: 0x8E24;
	TRANSFORM_FEEDBACK_BINDING_NV :: 0x8E25;
	
	// NV_uniform_buffer_unified_memory
	UNIFORM_BUFFER_UNIFIED_NV :: 0x936E;
	UNIFORM_BUFFER_ADDRESS_NV :: 0x936F;
	UNIFORM_BUFFER_LENGTH_NV :: 0x9370;
	
	// NV_vdpau_interop
	SURFACE_STATE_NV :: 0x86EB;
	SURFACE_REGISTERED_NV :: 0x86FD;
	SURFACE_MAPPED_NV :: 0x8700;
	WRITE_DISCARD_NV :: 0x88BE;
	
	// NV_vertex_array_range
	VERTEX_ARRAY_RANGE_NV :: 0x851D;
	VERTEX_ARRAY_RANGE_LENGTH_NV :: 0x851E;
	VERTEX_ARRAY_RANGE_VALID_NV :: 0x851F;
	MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV :: 0x8520;
	VERTEX_ARRAY_RANGE_POINTER_NV :: 0x8521;
	
	// NV_vertex_array_range2
	VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV :: 0x8533;
	
	// NV_vertex_attrib_integer_64bit
	// INT64_NV :: 0x140E;
	// UNSIGNED_INT64_NV :: 0x140F;
	
	// NV_vertex_buffer_unified_memory
	VERTEX_ATTRIB_ARRAY_UNIFIED_NV :: 0x8F1E;
	ELEMENT_ARRAY_UNIFIED_NV :: 0x8F1F;
	VERTEX_ATTRIB_ARRAY_ADDRESS_NV :: 0x8F20;
	VERTEX_ARRAY_ADDRESS_NV :: 0x8F21;
	NORMAL_ARRAY_ADDRESS_NV :: 0x8F22;
	COLOR_ARRAY_ADDRESS_NV :: 0x8F23;
	INDEX_ARRAY_ADDRESS_NV :: 0x8F24;
	TEXTURE_COORD_ARRAY_ADDRESS_NV :: 0x8F25;
	EDGE_FLAG_ARRAY_ADDRESS_NV :: 0x8F26;
	SECONDARY_COLOR_ARRAY_ADDRESS_NV :: 0x8F27;
	FOG_COORD_ARRAY_ADDRESS_NV :: 0x8F28;
	ELEMENT_ARRAY_ADDRESS_NV :: 0x8F29;
	VERTEX_ATTRIB_ARRAY_LENGTH_NV :: 0x8F2A;
	VERTEX_ARRAY_LENGTH_NV :: 0x8F2B;
	NORMAL_ARRAY_LENGTH_NV :: 0x8F2C;
	COLOR_ARRAY_LENGTH_NV :: 0x8F2D;
	INDEX_ARRAY_LENGTH_NV :: 0x8F2E;
	TEXTURE_COORD_ARRAY_LENGTH_NV :: 0x8F2F;
	EDGE_FLAG_ARRAY_LENGTH_NV :: 0x8F30;
	SECONDARY_COLOR_ARRAY_LENGTH_NV :: 0x8F31;
	FOG_COORD_ARRAY_LENGTH_NV :: 0x8F32;
	ELEMENT_ARRAY_LENGTH_NV :: 0x8F33;
	DRAW_INDIRECT_UNIFIED_NV :: 0x8F40;
	DRAW_INDIRECT_ADDRESS_NV :: 0x8F41;
	DRAW_INDIRECT_LENGTH_NV :: 0x8F42;
	
	// NV_vertex_program
	VERTEX_PROGRAM_NV :: 0x8620;
	VERTEX_STATE_PROGRAM_NV :: 0x8621;
	ATTRIB_ARRAY_SIZE_NV :: 0x8623;
	ATTRIB_ARRAY_STRIDE_NV :: 0x8624;
	ATTRIB_ARRAY_TYPE_NV :: 0x8625;
	CURRENT_ATTRIB_NV :: 0x8626;
	PROGRAM_LENGTH_NV :: 0x8627;
	PROGRAM_STRING_NV :: 0x8628;
	MODELVIEW_PROJECTION_NV :: 0x8629;
	IDENTITY_NV :: 0x862A;
	INVERSE_NV :: 0x862B;
	TRANSPOSE_NV :: 0x862C;
	INVERSE_TRANSPOSE_NV :: 0x862D;
	MAX_TRACK_MATRIX_STACK_DEPTH_NV :: 0x862E;
	MAX_TRACK_MATRICES_NV :: 0x862F;
	MATRIX0_NV :: 0x8630;
	MATRIX1_NV :: 0x8631;
	MATRIX2_NV :: 0x8632;
	MATRIX3_NV :: 0x8633;
	MATRIX4_NV :: 0x8634;
	MATRIX5_NV :: 0x8635;
	MATRIX6_NV :: 0x8636;
	MATRIX7_NV :: 0x8637;
	CURRENT_MATRIX_STACK_DEPTH_NV :: 0x8640;
	CURRENT_MATRIX_NV :: 0x8641;
	VERTEX_PROGRAM_POINT_SIZE_NV :: 0x8642;
	VERTEX_PROGRAM_TWO_SIDE_NV :: 0x8643;
	PROGRAM_PARAMETER_NV :: 0x8644;
	ATTRIB_ARRAY_POINTER_NV :: 0x8645;
	PROGRAM_TARGET_NV :: 0x8646;
	PROGRAM_RESIDENT_NV :: 0x8647;
	TRACK_MATRIX_NV :: 0x8648;
	TRACK_MATRIX_TRANSFORM_NV :: 0x8649;
	VERTEX_PROGRAM_BINDING_NV :: 0x864A;
	PROGRAM_ERROR_POSITION_NV :: 0x864B;
	VERTEX_ATTRIB_ARRAY0_NV :: 0x8650;
	VERTEX_ATTRIB_ARRAY1_NV :: 0x8651;
	VERTEX_ATTRIB_ARRAY2_NV :: 0x8652;
	VERTEX_ATTRIB_ARRAY3_NV :: 0x8653;
	VERTEX_ATTRIB_ARRAY4_NV :: 0x8654;
	VERTEX_ATTRIB_ARRAY5_NV :: 0x8655;
	VERTEX_ATTRIB_ARRAY6_NV :: 0x8656;
	VERTEX_ATTRIB_ARRAY7_NV :: 0x8657;
	VERTEX_ATTRIB_ARRAY8_NV :: 0x8658;
	VERTEX_ATTRIB_ARRAY9_NV :: 0x8659;
	VERTEX_ATTRIB_ARRAY10_NV :: 0x865A;
	VERTEX_ATTRIB_ARRAY11_NV :: 0x865B;
	VERTEX_ATTRIB_ARRAY12_NV :: 0x865C;
	VERTEX_ATTRIB_ARRAY13_NV :: 0x865D;
	VERTEX_ATTRIB_ARRAY14_NV :: 0x865E;
	VERTEX_ATTRIB_ARRAY15_NV :: 0x865F;
	MAP1_VERTEX_ATTRIB0_4_NV :: 0x8660;
	MAP1_VERTEX_ATTRIB1_4_NV :: 0x8661;
	MAP1_VERTEX_ATTRIB2_4_NV :: 0x8662;
	MAP1_VERTEX_ATTRIB3_4_NV :: 0x8663;
	MAP1_VERTEX_ATTRIB4_4_NV :: 0x8664;
	MAP1_VERTEX_ATTRIB5_4_NV :: 0x8665;
	MAP1_VERTEX_ATTRIB6_4_NV :: 0x8666;
	MAP1_VERTEX_ATTRIB7_4_NV :: 0x8667;
	MAP1_VERTEX_ATTRIB8_4_NV :: 0x8668;
	MAP1_VERTEX_ATTRIB9_4_NV :: 0x8669;
	MAP1_VERTEX_ATTRIB10_4_NV :: 0x866A;
	MAP1_VERTEX_ATTRIB11_4_NV :: 0x866B;
	MAP1_VERTEX_ATTRIB12_4_NV :: 0x866C;
	MAP1_VERTEX_ATTRIB13_4_NV :: 0x866D;
	MAP1_VERTEX_ATTRIB14_4_NV :: 0x866E;
	MAP1_VERTEX_ATTRIB15_4_NV :: 0x866F;
	MAP2_VERTEX_ATTRIB0_4_NV :: 0x8670;
	MAP2_VERTEX_ATTRIB1_4_NV :: 0x8671;
	MAP2_VERTEX_ATTRIB2_4_NV :: 0x8672;
	MAP2_VERTEX_ATTRIB3_4_NV :: 0x8673;
	MAP2_VERTEX_ATTRIB4_4_NV :: 0x8674;
	MAP2_VERTEX_ATTRIB5_4_NV :: 0x8675;
	MAP2_VERTEX_ATTRIB6_4_NV :: 0x8676;
	MAP2_VERTEX_ATTRIB7_4_NV :: 0x8677;
	MAP2_VERTEX_ATTRIB8_4_NV :: 0x8678;
	MAP2_VERTEX_ATTRIB9_4_NV :: 0x8679;
	MAP2_VERTEX_ATTRIB10_4_NV :: 0x867A;
	MAP2_VERTEX_ATTRIB11_4_NV :: 0x867B;
	MAP2_VERTEX_ATTRIB12_4_NV :: 0x867C;
	MAP2_VERTEX_ATTRIB13_4_NV :: 0x867D;
	MAP2_VERTEX_ATTRIB14_4_NV :: 0x867E;
	MAP2_VERTEX_ATTRIB15_4_NV :: 0x867F;
	
	// NV_vertex_program1_1
	
	// NV_vertex_program2
	
	// NV_vertex_program2_option
	// MAX_PROGRAM_EXEC_INSTRUCTIONS_NV :: 0x88F4;
	// MAX_PROGRAM_CALL_DEPTH_NV :: 0x88F5;
	
	// NV_vertex_program3
	// MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB :: 0x8B4C;
	
	// NV_vertex_program4
	VERTEX_ATTRIB_ARRAY_INTEGER_NV :: 0x88FD;
	
	// NV_video_capture
	VIDEO_BUFFER_NV :: 0x9020;
	VIDEO_BUFFER_BINDING_NV :: 0x9021;
	FIELD_UPPER_NV :: 0x9022;
	FIELD_LOWER_NV :: 0x9023;
	NUM_VIDEO_CAPTURE_STREAMS_NV :: 0x9024;
	NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV :: 0x9025;
	VIDEO_CAPTURE_TO_422_SUPPORTED_NV :: 0x9026;
	LAST_VIDEO_CAPTURE_STATUS_NV :: 0x9027;
	VIDEO_BUFFER_PITCH_NV :: 0x9028;
	VIDEO_COLOR_CONVERSION_MATRIX_NV :: 0x9029;
	VIDEO_COLOR_CONVERSION_MAX_NV :: 0x902A;
	VIDEO_COLOR_CONVERSION_MIN_NV :: 0x902B;
	VIDEO_COLOR_CONVERSION_OFFSET_NV :: 0x902C;
	VIDEO_BUFFER_INTERNAL_FORMAT_NV :: 0x902D;
	PARTIAL_SUCCESS_NV :: 0x902E;
	SUCCESS_NV :: 0x902F;
	FAILURE_NV :: 0x9030;
	YCBYCR8_422_NV :: 0x9031;
	YCBAYCR8A_4224_NV :: 0x9032;
	Z6Y10Z6CB10Z6Y10Z6CR10_422_NV :: 0x9033;
	Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV :: 0x9034;
	Z4Y12Z4CB12Z4Y12Z4CR12_422_NV :: 0x9035;
	Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV :: 0x9036;
	Z4Y12Z4CB12Z4CR12_444_NV :: 0x9037;
	VIDEO_CAPTURE_FRAME_WIDTH_NV :: 0x9038;
	VIDEO_CAPTURE_FRAME_HEIGHT_NV :: 0x9039;
	VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV :: 0x903A;
	VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV :: 0x903B;
	VIDEO_CAPTURE_SURFACE_ORIGIN_NV :: 0x903C;
	
	// NV_viewport_array2
	
	// NV_viewport_swizzle
	VIEWPORT_SWIZZLE_POSITIVE_X_NV :: 0x9350;
	VIEWPORT_SWIZZLE_NEGATIVE_X_NV :: 0x9351;
	VIEWPORT_SWIZZLE_POSITIVE_Y_NV :: 0x9352;
	VIEWPORT_SWIZZLE_NEGATIVE_Y_NV :: 0x9353;
	VIEWPORT_SWIZZLE_POSITIVE_Z_NV :: 0x9354;
	VIEWPORT_SWIZZLE_NEGATIVE_Z_NV :: 0x9355;
	VIEWPORT_SWIZZLE_POSITIVE_W_NV :: 0x9356;
	VIEWPORT_SWIZZLE_NEGATIVE_W_NV :: 0x9357;
	VIEWPORT_SWIZZLE_X_NV :: 0x9358;
	VIEWPORT_SWIZZLE_Y_NV :: 0x9359;
	VIEWPORT_SWIZZLE_Z_NV :: 0x935A;
	VIEWPORT_SWIZZLE_W_NV :: 0x935B;
	
	// OES_byte_coordinates
	// BYTE :: 0x1400;
	
	// OES_compressed_paletted_texture
	PALETTE4_RGB8_OES :: 0x8B90;
	PALETTE4_RGBA8_OES :: 0x8B91;
	PALETTE4_R5_G6_B5_OES :: 0x8B92;
	PALETTE4_RGBA4_OES :: 0x8B93;
	PALETTE4_RGB5_A1_OES :: 0x8B94;
	PALETTE8_RGB8_OES :: 0x8B95;
	PALETTE8_RGBA8_OES :: 0x8B96;
	PALETTE8_R5_G6_B5_OES :: 0x8B97;
	PALETTE8_RGBA4_OES :: 0x8B98;
	PALETTE8_RGB5_A1_OES :: 0x8B99;
	
	// OES_fixed_point
	FIXED_OES :: 0x140C;
	
	// OES_query_matrix
	
	// OES_read_format
	IMPLEMENTATION_COLOR_READ_TYPE_OES :: 0x8B9A;
	IMPLEMENTATION_COLOR_READ_FORMAT_OES :: 0x8B9B;
	
	// OES_single_precision
	
	// OML_interlace
	INTERLACE_OML :: 0x8980;
	INTERLACE_READ_OML :: 0x8981;
	
	// OML_resample
	PACK_RESAMPLE_OML :: 0x8984;
	UNPACK_RESAMPLE_OML :: 0x8985;
	RESAMPLE_REPLICATE_OML :: 0x8986;
	RESAMPLE_ZERO_FILL_OML :: 0x8987;
	RESAMPLE_AVERAGE_OML :: 0x8988;
	RESAMPLE_DECIMATE_OML :: 0x8989;
	
	// OML_subsample
	FORMAT_SUBSAMPLE_24_24_OML :: 0x8982;
	FORMAT_SUBSAMPLE_244_244_OML :: 0x8983;
	
	// OVR_multiview
	FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR :: 0x9630;
	FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR :: 0x9632;
	MAX_VIEWS_OVR :: 0x9631;
	FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR :: 0x9633;
	
	// OVR_multiview2
	
	// PGI_misc_hints
	PREFER_DOUBLEBUFFER_HINT_PGI :: 0x1A1F8;
	CONSERVE_MEMORY_HINT_PGI :: 0x1A1FD;
	RECLAIM_MEMORY_HINT_PGI :: 0x1A1FE;
	NATIVE_GRAPHICS_HANDLE_PGI :: 0x1A202;
	NATIVE_GRAPHICS_BEGIN_HINT_PGI :: 0x1A203;
	NATIVE_GRAPHICS_END_HINT_PGI :: 0x1A204;
	ALWAYS_FAST_HINT_PGI :: 0x1A20C;
	ALWAYS_SOFT_HINT_PGI :: 0x1A20D;
	ALLOW_DRAW_OBJ_HINT_PGI :: 0x1A20E;
	ALLOW_DRAW_WIN_HINT_PGI :: 0x1A20F;
	ALLOW_DRAW_FRG_HINT_PGI :: 0x1A210;
	ALLOW_DRAW_MEM_HINT_PGI :: 0x1A211;
	STRICT_DEPTHFUNC_HINT_PGI :: 0x1A216;
	STRICT_LIGHTING_HINT_PGI :: 0x1A217;
	STRICT_SCISSOR_HINT_PGI :: 0x1A218;
	FULL_STIPPLE_HINT_PGI :: 0x1A219;
	CLIP_NEAR_HINT_PGI :: 0x1A220;
	CLIP_FAR_HINT_PGI :: 0x1A221;
	WIDE_LINE_HINT_PGI :: 0x1A222;
	BACK_NORMALS_HINT_PGI :: 0x1A223;
	
	// PGI_vertex_hints
	VERTEX_DATA_HINT_PGI :: 0x1A22A;
	VERTEX_CONSISTENT_HINT_PGI :: 0x1A22B;
	MATERIAL_SIDE_HINT_PGI :: 0x1A22C;
	MAX_VERTEX_HINT_PGI :: 0x1A22D;
	COLOR3_BIT_PGI :: 0x00010000;
	COLOR4_BIT_PGI :: 0x00020000;
	EDGEFLAG_BIT_PGI :: 0x00040000;
	INDEX_BIT_PGI :: 0x00080000;
	MAT_AMBIENT_BIT_PGI :: 0x00100000;
	MAT_AMBIENT_AND_DIFFUSE_BIT_PGI :: 0x00200000;
	MAT_DIFFUSE_BIT_PGI :: 0x00400000;
	MAT_EMISSION_BIT_PGI :: 0x00800000;
	MAT_COLOR_INDEXES_BIT_PGI :: 0x01000000;
	MAT_SHININESS_BIT_PGI :: 0x02000000;
	MAT_SPECULAR_BIT_PGI :: 0x04000000;
	NORMAL_BIT_PGI :: 0x08000000;
	TEXCOORD1_BIT_PGI :: 0x10000000;
	TEXCOORD2_BIT_PGI :: 0x20000000;
	TEXCOORD3_BIT_PGI :: 0x40000000;
	TEXCOORD4_BIT_PGI :: 0x80000000;
	VERTEX23_BIT_PGI :: 0x00000004;
	VERTEX4_BIT_PGI :: 0x00000008;
	
	// REND_screen_coordinates
	SCREEN_COORDINATES_REND :: 0x8490;
	INVERTED_SCREEN_W_REND :: 0x8491;
	
	// S3_s3tc
	RGB_S3TC :: 0x83A0;
	RGB4_S3TC :: 0x83A1;
	RGBA_S3TC :: 0x83A2;
	RGBA4_S3TC :: 0x83A3;
	RGBA_DXT5_S3TC :: 0x83A4;
	RGBA4_DXT5_S3TC :: 0x83A5;
	
	// SGIS_detail_texture
	DETAIL_TEXTURE_2D_SGIS :: 0x8095;
	DETAIL_TEXTURE_2D_BINDING_SGIS :: 0x8096;
	LINEAR_DETAIL_SGIS :: 0x8097;
	LINEAR_DETAIL_ALPHA_SGIS :: 0x8098;
	LINEAR_DETAIL_COLOR_SGIS :: 0x8099;
	DETAIL_TEXTURE_LEVEL_SGIS :: 0x809A;
	DETAIL_TEXTURE_MODE_SGIS :: 0x809B;
	DETAIL_TEXTURE_FUNC_POINTS_SGIS :: 0x809C;
	
	// SGIS_fog_function
	FOG_FUNC_SGIS :: 0x812A;
	FOG_FUNC_POINTS_SGIS :: 0x812B;
	MAX_FOG_FUNC_POINTS_SGIS :: 0x812C;
	
	// SGIS_generate_mipmap
	GENERATE_MIPMAP_SGIS :: 0x8191;
	GENERATE_MIPMAP_HINT_SGIS :: 0x8192;
	
	// SGIS_multisample
	MULTISAMPLE_SGIS :: 0x809D;
	SAMPLE_ALPHA_TO_MASK_SGIS :: 0x809E;
	SAMPLE_ALPHA_TO_ONE_SGIS :: 0x809F;
	SAMPLE_MASK_SGIS :: 0x80A0;
	GL_1PASS_SGIS :: 0x80A1;
	GL_2PASS_0_SGIS :: 0x80A2;
	GL_2PASS_1_SGIS :: 0x80A3;
	GL_4PASS_0_SGIS :: 0x80A4;
	GL_4PASS_1_SGIS :: 0x80A5;
	GL_4PASS_2_SGIS :: 0x80A6;
	GL_4PASS_3_SGIS :: 0x80A7;
	SAMPLE_BUFFERS_SGIS :: 0x80A8;
	SAMPLES_SGIS :: 0x80A9;
	SAMPLE_MASK_VALUE_SGIS :: 0x80AA;
	SAMPLE_MASK_INVERT_SGIS :: 0x80AB;
	SAMPLE_PATTERN_SGIS :: 0x80AC;
	
	// SGIS_pixel_texture
	PIXEL_TEXTURE_SGIS :: 0x8353;
	PIXEL_FRAGMENT_RGB_SOURCE_SGIS :: 0x8354;
	PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS :: 0x8355;
	PIXEL_GROUP_COLOR_SGIS :: 0x8356;
	
	// SGIS_point_line_texgen
	EYE_DISTANCE_TO_POINT_SGIS :: 0x81F0;
	OBJECT_DISTANCE_TO_POINT_SGIS :: 0x81F1;
	EYE_DISTANCE_TO_LINE_SGIS :: 0x81F2;
	OBJECT_DISTANCE_TO_LINE_SGIS :: 0x81F3;
	EYE_POINT_SGIS :: 0x81F4;
	OBJECT_POINT_SGIS :: 0x81F5;
	EYE_LINE_SGIS :: 0x81F6;
	OBJECT_LINE_SGIS :: 0x81F7;
	
	// SGIS_point_parameters
	POINT_SIZE_MIN_SGIS :: 0x8126;
	POINT_SIZE_MAX_SGIS :: 0x8127;
	POINT_FADE_THRESHOLD_SIZE_SGIS :: 0x8128;
	DISTANCE_ATTENUATION_SGIS :: 0x8129;
	
	// SGIS_sharpen_texture
	LINEAR_SHARPEN_SGIS :: 0x80AD;
	LINEAR_SHARPEN_ALPHA_SGIS :: 0x80AE;
	LINEAR_SHARPEN_COLOR_SGIS :: 0x80AF;
	SHARPEN_TEXTURE_FUNC_POINTS_SGIS :: 0x80B0;
	
	// SGIS_texture4D
	PACK_SKIP_VOLUMES_SGIS :: 0x8130;
	PACK_IMAGE_DEPTH_SGIS :: 0x8131;
	UNPACK_SKIP_VOLUMES_SGIS :: 0x8132;
	UNPACK_IMAGE_DEPTH_SGIS :: 0x8133;
	TEXTURE_4D_SGIS :: 0x8134;
	PROXY_TEXTURE_4D_SGIS :: 0x8135;
	TEXTURE_4DSIZE_SGIS :: 0x8136;
	TEXTURE_WRAP_Q_SGIS :: 0x8137;
	MAX_4D_TEXTURE_SIZE_SGIS :: 0x8138;
	TEXTURE_4D_BINDING_SGIS :: 0x814F;
	
	// SGIS_texture_border_clamp
	CLAMP_TO_BORDER_SGIS :: 0x812D;
	
	// SGIS_texture_color_mask
	TEXTURE_COLOR_WRITEMASK_SGIS :: 0x81EF;
	
	// SGIS_texture_edge_clamp
	CLAMP_TO_EDGE_SGIS :: 0x812F;
	
	// SGIS_texture_filter4
	FILTER4_SGIS :: 0x8146;
	TEXTURE_FILTER4_SIZE_SGIS :: 0x8147;
	
	// SGIS_texture_lod
	TEXTURE_MIN_LOD_SGIS :: 0x813A;
	TEXTURE_MAX_LOD_SGIS :: 0x813B;
	TEXTURE_BASE_LEVEL_SGIS :: 0x813C;
	TEXTURE_MAX_LEVEL_SGIS :: 0x813D;
	
	// SGIS_texture_select
	DUAL_ALPHA4_SGIS :: 0x8110;
	DUAL_ALPHA8_SGIS :: 0x8111;
	DUAL_ALPHA12_SGIS :: 0x8112;
	DUAL_ALPHA16_SGIS :: 0x8113;
	DUAL_LUMINANCE4_SGIS :: 0x8114;
	DUAL_LUMINANCE8_SGIS :: 0x8115;
	DUAL_LUMINANCE12_SGIS :: 0x8116;
	DUAL_LUMINANCE16_SGIS :: 0x8117;
	DUAL_INTENSITY4_SGIS :: 0x8118;
	DUAL_INTENSITY8_SGIS :: 0x8119;
	DUAL_INTENSITY12_SGIS :: 0x811A;
	DUAL_INTENSITY16_SGIS :: 0x811B;
	DUAL_LUMINANCE_ALPHA4_SGIS :: 0x811C;
	DUAL_LUMINANCE_ALPHA8_SGIS :: 0x811D;
	QUAD_ALPHA4_SGIS :: 0x811E;
	QUAD_ALPHA8_SGIS :: 0x811F;
	QUAD_LUMINANCE4_SGIS :: 0x8120;
	QUAD_LUMINANCE8_SGIS :: 0x8121;
	QUAD_INTENSITY4_SGIS :: 0x8122;
	QUAD_INTENSITY8_SGIS :: 0x8123;
	DUAL_TEXTURE_SELECT_SGIS :: 0x8124;
	QUAD_TEXTURE_SELECT_SGIS :: 0x8125;
	
	// SGIX_async
	ASYNC_MARKER_SGIX :: 0x8329;
	
	// SGIX_async_histogram
	ASYNC_HISTOGRAM_SGIX :: 0x832C;
	MAX_ASYNC_HISTOGRAM_SGIX :: 0x832D;
	
	// SGIX_async_pixel
	ASYNC_TEX_IMAGE_SGIX :: 0x835C;
	ASYNC_DRAW_PIXELS_SGIX :: 0x835D;
	ASYNC_READ_PIXELS_SGIX :: 0x835E;
	MAX_ASYNC_TEX_IMAGE_SGIX :: 0x835F;
	MAX_ASYNC_DRAW_PIXELS_SGIX :: 0x8360;
	MAX_ASYNC_READ_PIXELS_SGIX :: 0x8361;
	
	// SGIX_blend_alpha_minmax
	ALPHA_MIN_SGIX :: 0x8320;
	ALPHA_MAX_SGIX :: 0x8321;
	
	// SGIX_calligraphic_fragment
	CALLIGRAPHIC_FRAGMENT_SGIX :: 0x8183;
	
	// SGIX_clipmap
	LINEAR_CLIPMAP_LINEAR_SGIX :: 0x8170;
	TEXTURE_CLIPMAP_CENTER_SGIX :: 0x8171;
	TEXTURE_CLIPMAP_FRAME_SGIX :: 0x8172;
	TEXTURE_CLIPMAP_OFFSET_SGIX :: 0x8173;
	TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX :: 0x8174;
	TEXTURE_CLIPMAP_LOD_OFFSET_SGIX :: 0x8175;
	TEXTURE_CLIPMAP_DEPTH_SGIX :: 0x8176;
	MAX_CLIPMAP_DEPTH_SGIX :: 0x8177;
	MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX :: 0x8178;
	NEAREST_CLIPMAP_NEAREST_SGIX :: 0x844D;
	NEAREST_CLIPMAP_LINEAR_SGIX :: 0x844E;
	LINEAR_CLIPMAP_NEAREST_SGIX :: 0x844F;
	
	// SGIX_convolution_accuracy
	CONVOLUTION_HINT_SGIX :: 0x8316;
	
	// SGIX_depth_pass_instrument
	
	// SGIX_depth_texture
	DEPTH_COMPONENT16_SGIX :: 0x81A5;
	DEPTH_COMPONENT24_SGIX :: 0x81A6;
	DEPTH_COMPONENT32_SGIX :: 0x81A7;
	
	// SGIX_flush_raster
	
	// SGIX_fog_offset
	FOG_OFFSET_SGIX :: 0x8198;
	FOG_OFFSET_VALUE_SGIX :: 0x8199;
	
	// SGIX_fragment_lighting
	FRAGMENT_LIGHTING_SGIX :: 0x8400;
	FRAGMENT_COLOR_MATERIAL_SGIX :: 0x8401;
	FRAGMENT_COLOR_MATERIAL_FACE_SGIX :: 0x8402;
	FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX :: 0x8403;
	MAX_FRAGMENT_LIGHTS_SGIX :: 0x8404;
	MAX_ACTIVE_LIGHTS_SGIX :: 0x8405;
	CURRENT_RASTER_NORMAL_SGIX :: 0x8406;
	LIGHT_ENV_MODE_SGIX :: 0x8407;
	FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX :: 0x8408;
	FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX :: 0x8409;
	FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX :: 0x840A;
	FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX :: 0x840B;
	FRAGMENT_LIGHT0_SGIX :: 0x840C;
	FRAGMENT_LIGHT1_SGIX :: 0x840D;
	FRAGMENT_LIGHT2_SGIX :: 0x840E;
	FRAGMENT_LIGHT3_SGIX :: 0x840F;
	FRAGMENT_LIGHT4_SGIX :: 0x8410;
	FRAGMENT_LIGHT5_SGIX :: 0x8411;
	FRAGMENT_LIGHT6_SGIX :: 0x8412;
	FRAGMENT_LIGHT7_SGIX :: 0x8413;
	
	// SGIX_framezoom
	FRAMEZOOM_SGIX :: 0x818B;
	FRAMEZOOM_FACTOR_SGIX :: 0x818C;
	MAX_FRAMEZOOM_FACTOR_SGIX :: 0x818D;
	
	// SGIX_igloo_interface
	
	// SGIX_instruments
	INSTRUMENT_BUFFER_POINTER_SGIX :: 0x8180;
	INSTRUMENT_MEASUREMENTS_SGIX :: 0x8181;
	
	// SGIX_interlace
	INTERLACE_SGIX :: 0x8094;
	
	// SGIX_ir_instrument1
	IR_INSTRUMENT1_SGIX :: 0x817F;
	
	// SGIX_list_priority
	LIST_PRIORITY_SGIX :: 0x8182;
	
	// SGIX_pixel_texture
	PIXEL_TEX_GEN_SGIX :: 0x8139;
	PIXEL_TEX_GEN_MODE_SGIX :: 0x832B;
	
	// SGIX_pixel_tiles
	PIXEL_TILE_BEST_ALIGNMENT_SGIX :: 0x813E;
	PIXEL_TILE_CACHE_INCREMENT_SGIX :: 0x813F;
	PIXEL_TILE_WIDTH_SGIX :: 0x8140;
	PIXEL_TILE_HEIGHT_SGIX :: 0x8141;
	PIXEL_TILE_GRID_WIDTH_SGIX :: 0x8142;
	PIXEL_TILE_GRID_HEIGHT_SGIX :: 0x8143;
	PIXEL_TILE_GRID_DEPTH_SGIX :: 0x8144;
	PIXEL_TILE_CACHE_SIZE_SGIX :: 0x8145;
	
	// SGIX_polynomial_ffd
	TEXTURE_DEFORMATION_BIT_SGIX :: 0x00000001;
	GEOMETRY_DEFORMATION_BIT_SGIX :: 0x00000002;
	GEOMETRY_DEFORMATION_SGIX :: 0x8194;
	TEXTURE_DEFORMATION_SGIX :: 0x8195;
	DEFORMATIONS_MASK_SGIX :: 0x8196;
	MAX_DEFORMATION_ORDER_SGIX :: 0x8197;
	
	// SGIX_reference_plane
	REFERENCE_PLANE_SGIX :: 0x817D;
	REFERENCE_PLANE_EQUATION_SGIX :: 0x817E;
	
	// SGIX_resample
	PACK_RESAMPLE_SGIX :: 0x842E;
	UNPACK_RESAMPLE_SGIX :: 0x842F;
	RESAMPLE_REPLICATE_SGIX :: 0x8433;
	RESAMPLE_ZERO_FILL_SGIX :: 0x8434;
	RESAMPLE_DECIMATE_SGIX :: 0x8430;
	
	// SGIX_scalebias_hint
	SCALEBIAS_HINT_SGIX :: 0x8322;
	
	// SGIX_shadow
	TEXTURE_COMPARE_SGIX :: 0x819A;
	TEXTURE_COMPARE_OPERATOR_SGIX :: 0x819B;
	TEXTURE_LEQUAL_R_SGIX :: 0x819C;
	TEXTURE_GEQUAL_R_SGIX :: 0x819D;
	
	// SGIX_shadow_ambient
	SHADOW_AMBIENT_SGIX :: 0x80BF;
	
	// SGIX_sprite
	SPRITE_SGIX :: 0x8148;
	SPRITE_MODE_SGIX :: 0x8149;
	SPRITE_AXIS_SGIX :: 0x814A;
	SPRITE_TRANSLATION_SGIX :: 0x814B;
	SPRITE_AXIAL_SGIX :: 0x814C;
	SPRITE_OBJECT_ALIGNED_SGIX :: 0x814D;
	SPRITE_EYE_ALIGNED_SGIX :: 0x814E;
	
	// SGIX_subsample
	PACK_SUBSAMPLE_RATE_SGIX :: 0x85A0;
	UNPACK_SUBSAMPLE_RATE_SGIX :: 0x85A1;
	PIXEL_SUBSAMPLE_4444_SGIX :: 0x85A2;
	PIXEL_SUBSAMPLE_2424_SGIX :: 0x85A3;
	PIXEL_SUBSAMPLE_4242_SGIX :: 0x85A4;
	
	// SGIX_tag_sample_buffer
	
	// SGIX_texture_add_env
	TEXTURE_ENV_BIAS_SGIX :: 0x80BE;
	
	// SGIX_texture_coordinate_clamp
	TEXTURE_MAX_CLAMP_S_SGIX :: 0x8369;
	TEXTURE_MAX_CLAMP_T_SGIX :: 0x836A;
	TEXTURE_MAX_CLAMP_R_SGIX :: 0x836B;
	
	// SGIX_texture_lod_bias
	TEXTURE_LOD_BIAS_S_SGIX :: 0x818E;
	TEXTURE_LOD_BIAS_T_SGIX :: 0x818F;
	TEXTURE_LOD_BIAS_R_SGIX :: 0x8190;
	
	// SGIX_texture_multi_buffer
	TEXTURE_MULTI_BUFFER_HINT_SGIX :: 0x812E;
	
	// SGIX_texture_scale_bias
	POST_TEXTURE_FILTER_BIAS_SGIX :: 0x8179;
	POST_TEXTURE_FILTER_SCALE_SGIX :: 0x817A;
	POST_TEXTURE_FILTER_BIAS_RANGE_SGIX :: 0x817B;
	POST_TEXTURE_FILTER_SCALE_RANGE_SGIX :: 0x817C;
	
	// SGIX_vertex_preclip
	VERTEX_PRECLIP_SGIX :: 0x83EE;
	VERTEX_PRECLIP_HINT_SGIX :: 0x83EF;
	
	// SGIX_ycrcb
	YCRCB_422_SGIX :: 0x81BB;
	YCRCB_444_SGIX :: 0x81BC;
	
	// SGIX_ycrcb_subsample
	
	// SGIX_ycrcba
	YCRCB_SGIX :: 0x8318;
	YCRCBA_SGIX :: 0x8319;
	
	// SGI_color_matrix
	COLOR_MATRIX_SGI :: 0x80B1;
	COLOR_MATRIX_STACK_DEPTH_SGI :: 0x80B2;
	MAX_COLOR_MATRIX_STACK_DEPTH_SGI :: 0x80B3;
	POST_COLOR_MATRIX_RED_SCALE_SGI :: 0x80B4;
	POST_COLOR_MATRIX_GREEN_SCALE_SGI :: 0x80B5;
	POST_COLOR_MATRIX_BLUE_SCALE_SGI :: 0x80B6;
	POST_COLOR_MATRIX_ALPHA_SCALE_SGI :: 0x80B7;
	POST_COLOR_MATRIX_RED_BIAS_SGI :: 0x80B8;
	POST_COLOR_MATRIX_GREEN_BIAS_SGI :: 0x80B9;
	POST_COLOR_MATRIX_BLUE_BIAS_SGI :: 0x80BA;
	POST_COLOR_MATRIX_ALPHA_BIAS_SGI :: 0x80BB;
	
	// SGI_color_table
	COLOR_TABLE_SGI :: 0x80D0;
	POST_CONVOLUTION_COLOR_TABLE_SGI :: 0x80D1;
	POST_COLOR_MATRIX_COLOR_TABLE_SGI :: 0x80D2;
	PROXY_COLOR_TABLE_SGI :: 0x80D3;
	PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI :: 0x80D4;
	PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI :: 0x80D5;
	COLOR_TABLE_SCALE_SGI :: 0x80D6;
	COLOR_TABLE_BIAS_SGI :: 0x80D7;
	COLOR_TABLE_FORMAT_SGI :: 0x80D8;
	COLOR_TABLE_WIDTH_SGI :: 0x80D9;
	COLOR_TABLE_RED_SIZE_SGI :: 0x80DA;
	COLOR_TABLE_GREEN_SIZE_SGI :: 0x80DB;
	COLOR_TABLE_BLUE_SIZE_SGI :: 0x80DC;
	COLOR_TABLE_ALPHA_SIZE_SGI :: 0x80DD;
	COLOR_TABLE_LUMINANCE_SIZE_SGI :: 0x80DE;
	COLOR_TABLE_INTENSITY_SIZE_SGI :: 0x80DF;
	
	// SGI_texture_color_table
	TEXTURE_COLOR_TABLE_SGI :: 0x80BC;
	PROXY_TEXTURE_COLOR_TABLE_SGI :: 0x80BD;
	
	// SUNX_constant_data
	UNPACK_CONSTANT_DATA_SUNX :: 0x81D5;
	TEXTURE_CONSTANT_DATA_SUNX :: 0x81D6;
	
	// SUN_convolution_border_modes
	WRAP_BORDER_SUN :: 0x81D4;
	
	// SUN_global_alpha
	GLOBAL_ALPHA_SUN :: 0x81D9;
	GLOBAL_ALPHA_FACTOR_SUN :: 0x81DA;
	
	// SUN_mesh_array
	QUAD_MESH_SUN :: 0x8614;
	TRIANGLE_MESH_SUN :: 0x8615;
	
	// SUN_slice_accum
	SLICE_ACCUM_SUN :: 0x85CC;
	
	// SUN_triangle_list
	RESTART_SUN :: 0x0001;
	REPLACE_MIDDLE_SUN :: 0x0002;
	REPLACE_OLDEST_SUN :: 0x0003;
	TRIANGLE_LIST_SUN :: 0x81D7;
	REPLACEMENT_CODE_SUN :: 0x81D8;
	REPLACEMENT_CODE_ARRAY_SUN :: 0x85C0;
	REPLACEMENT_CODE_ARRAY_TYPE_SUN :: 0x85C1;
	REPLACEMENT_CODE_ARRAY_STRIDE_SUN :: 0x85C2;
	REPLACEMENT_CODE_ARRAY_POINTER_SUN :: 0x85C3;
	R1UI_V3F_SUN :: 0x85C4;
	R1UI_C4UB_V3F_SUN :: 0x85C5;
	R1UI_C3F_V3F_SUN :: 0x85C6;
	R1UI_N3F_V3F_SUN :: 0x85C7;
	R1UI_C4F_N3F_V3F_SUN :: 0x85C8;
	R1UI_T2F_V3F_SUN :: 0x85C9;
	R1UI_T2F_N3F_V3F_SUN :: 0x85CA;
	R1UI_T2F_C4F_N3F_V3F_SUN :: 0x85CB;
	
	// SUN_vertex
	
	// WIN_phong_shading
	PHONG_WIN :: 0x80EA;
	PHONG_HINT_WIN :: 0x80EB;
	
	// WIN_specular_fog
	FOG_SPECULAR_TEXTURE_WIN :: 0x80EC;
	
	// Extension functions:
	
	// 3DFX_multisample
	
	// 3DFX_tbuffer
	TbufferMask3DFX : (mask: GLuint) #foreign;
	
	// 3DFX_texture_compression_FXT1
	
	// AMD_blend_minmax_factor
	
	// AMD_conservative_depth
	
	// AMD_debug_output
	DebugMessageEnableAMD : (category: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #foreign;
	DebugMessageInsertAMD : (category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: *GLchar) #foreign;
	DebugMessageCallbackAMD : (callback: GLDEBUGPROCAMD, userParam: *void) #foreign;
	GetDebugMessageLogAMD : (count: GLuint, bufsize: GLsizei, categories: *GLenum, severities: *GLuint, ids: *GLuint, lengths: *GLsizei, message: *GLchar) -> GLuint #foreign;
	
	// AMD_depth_clamp_separate
	
	// AMD_draw_buffers_blend
	BlendFuncIndexedAMD : (buf: GLuint, src: GLenum, dst: GLenum) #foreign;
	BlendFuncSeparateIndexedAMD : (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) #foreign;
	BlendEquationIndexedAMD : (buf: GLuint, mode: GLenum) #foreign;
	BlendEquationSeparateIndexedAMD : (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) #foreign;
	
	// AMD_framebuffer_sample_positions
	FramebufferSamplePositionsfvAMD : (target: GLenum, numsamples: GLuint, pixelindex: GLuint, values: *GLfloat) #foreign;
	NamedFramebufferSamplePositionsfvAMD : (framebuffer: GLuint, numsamples: GLuint, pixelindex: GLuint, values: *GLfloat) #foreign;
	GetFramebufferParameterfvAMD : (target: GLenum, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: *GLfloat) #foreign;
	GetNamedFramebufferParameterfvAMD : (framebuffer: GLuint, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: *GLfloat) #foreign;
	
	// AMD_gcn_shader
	
	// AMD_gpu_shader_half_float
	
	// AMD_gpu_shader_int16
	
	// AMD_gpu_shader_int64
	Uniform1i64NV : (location: GLint, x: GLint64EXT) #foreign;
	Uniform2i64NV : (location: GLint, x: GLint64EXT, y: GLint64EXT) #foreign;
	Uniform3i64NV : (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) #foreign;
	Uniform4i64NV : (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) #foreign;
	Uniform1i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	Uniform2i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	Uniform3i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	Uniform4i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	Uniform1ui64NV : (location: GLint, x: GLuint64EXT) #foreign;
	Uniform2ui64NV : (location: GLint, x: GLuint64EXT, y: GLuint64EXT) #foreign;
	Uniform3ui64NV : (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) #foreign;
	Uniform4ui64NV : (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) #foreign;
	Uniform1ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	Uniform2ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	Uniform3ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	Uniform4ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	GetUniformi64vNV : (program: GLuint, location: GLint, params: *GLint64EXT) #foreign;
	GetUniformui64vNV : (program: GLuint, location: GLint, params: *GLuint64EXT) #foreign;
	ProgramUniform1i64NV : (program: GLuint, location: GLint, x: GLint64EXT) #foreign;
	ProgramUniform2i64NV : (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) #foreign;
	ProgramUniform3i64NV : (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) #foreign;
	ProgramUniform4i64NV : (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) #foreign;
	ProgramUniform1i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	ProgramUniform2i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	ProgramUniform3i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	ProgramUniform4i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	ProgramUniform1ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT) #foreign;
	ProgramUniform2ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) #foreign;
	ProgramUniform3ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) #foreign;
	ProgramUniform4ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) #foreign;
	ProgramUniform1ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	ProgramUniform2ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	ProgramUniform3ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	ProgramUniform4ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	
	// AMD_interleaved_elements
	VertexAttribParameteriAMD : (index: GLuint, pname: GLenum, param: GLint) #foreign;
	
	// AMD_multi_draw_indirect
	MultiDrawArraysIndirectAMD : (mode: GLenum, indirect: *void, primcount: GLsizei, stride: GLsizei) #foreign;
	MultiDrawElementsIndirectAMD : (mode: GLenum, type: GLenum, indirect: *void, primcount: GLsizei, stride: GLsizei) #foreign;
	
	// AMD_name_gen_delete
	GenNamesAMD : (identifier: GLenum, num: GLuint, names: *GLuint) #foreign;
	DeleteNamesAMD : (identifier: GLenum, num: GLuint, names: *GLuint) #foreign;
	IsNameAMD : (identifier: GLenum, name: GLuint) -> GLboolean #foreign;
	
	// AMD_occlusion_query_event
	QueryObjectParameteruiAMD : (target: GLenum, id: GLuint, pname: GLenum, param: GLuint) #foreign;
	
	// AMD_performance_monitor
	GetPerfMonitorGroupsAMD : (numGroups: *GLint, groupsSize: GLsizei, groups: *GLuint) #foreign;
	GetPerfMonitorCountersAMD : (group: GLuint, numCounters: *GLint, maxActiveCounters: *GLint, counterSize: GLsizei, counters: *GLuint) #foreign;
	GetPerfMonitorGroupStringAMD : (group: GLuint, bufSize: GLsizei, length: *GLsizei, groupString: *GLchar) #foreign;
	GetPerfMonitorCounterStringAMD : (group: GLuint, counter: GLuint, bufSize: GLsizei, length: *GLsizei, counterString: *GLchar) #foreign;
	GetPerfMonitorCounterInfoAMD : (group: GLuint, counter: GLuint, pname: GLenum, data: *void) #foreign;
	GenPerfMonitorsAMD : (n: GLsizei, monitors: *GLuint) #foreign;
	DeletePerfMonitorsAMD : (n: GLsizei, monitors: *GLuint) #foreign;
	SelectPerfMonitorCountersAMD : (monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: *GLuint) #foreign;
	BeginPerfMonitorAMD : (monitor: GLuint) #foreign;
	EndPerfMonitorAMD : (monitor: GLuint) #foreign;
	GetPerfMonitorCounterDataAMD : (monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: *GLuint, bytesWritten: *GLint) #foreign;
	
	// AMD_pinned_memory
	
	// AMD_query_buffer_object
	
	// AMD_sample_positions
	SetMultisamplefvAMD : (pname: GLenum, index: GLuint, val: *GLfloat) #foreign;
	
	// AMD_seamless_cubemap_per_texture
	
	// AMD_shader_atomic_counter_ops
	
	// AMD_shader_ballot
	
	// AMD_shader_explicit_vertex_parameter
	
	// AMD_shader_gpu_shader_half_float_fetch
	
	// AMD_shader_image_load_store_lod
	
	// AMD_shader_stencil_export
	
	// AMD_shader_trinary_minmax
	
	// AMD_sparse_texture
	TexStorageSparseAMD : (target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) #foreign;
	TextureStorageSparseAMD : (texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) #foreign;
	
	// AMD_stencil_operation_extended
	StencilOpValueAMD : (face: GLenum, value: GLuint) #foreign;
	
	// AMD_texture_gather_bias_lod
	
	// AMD_texture_texture4
	
	// AMD_transform_feedback3_lines_triangles
	
	// AMD_transform_feedback4
	
	// AMD_vertex_shader_layer
	
	// AMD_vertex_shader_tessellator
	TessellationFactorAMD : (factor: GLfloat) #foreign;
	TessellationModeAMD : (mode: GLenum) #foreign;
	
	// AMD_vertex_shader_viewport_index
	
	// APPLE_aux_depth_stencil
	
	// APPLE_client_storage
	
	// APPLE_element_array
	ElementPointerAPPLE : (type: GLenum, pointer: *void) #foreign;
	DrawElementArrayAPPLE : (mode: GLenum, first: GLint, count: GLsizei) #foreign;
	DrawRangeElementArrayAPPLE : (mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei) #foreign;
	MultiDrawElementArrayAPPLE : (mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) #foreign;
	MultiDrawRangeElementArrayAPPLE : (mode: GLenum, start: GLuint, end: GLuint, first: *GLint, count: *GLsizei, primcount: GLsizei) #foreign;
	
	// APPLE_fence
	GenFencesAPPLE : (n: GLsizei, fences: *GLuint) #foreign;
	DeleteFencesAPPLE : (n: GLsizei, fences: *GLuint) #foreign;
	SetFenceAPPLE : (fence: GLuint) #foreign;
	IsFenceAPPLE : (fence: GLuint) -> GLboolean #foreign;
	TestFenceAPPLE : (fence: GLuint) -> GLboolean #foreign;
	FinishFenceAPPLE : (fence: GLuint) #foreign;
	TestObjectAPPLE : (object: GLenum, name: GLuint) -> GLboolean #foreign;
	FinishObjectAPPLE : (object: GLenum, name: GLint) #foreign;
	
	// APPLE_float_pixels
	
	// APPLE_flush_buffer_range
	BufferParameteriAPPLE : (target: GLenum, pname: GLenum, param: GLint) #foreign;
	FlushMappedBufferRangeAPPLE : (target: GLenum, offset: GLintptr, size: GLsizeiptr) #foreign;
	
	// APPLE_object_purgeable
	ObjectPurgeableAPPLE : (objectType: GLenum, name: GLuint, option: GLenum) -> GLenum #foreign;
	ObjectUnpurgeableAPPLE : (objectType: GLenum, name: GLuint, option: GLenum) -> GLenum #foreign;
	GetObjectParameterivAPPLE : (objectType: GLenum, name: GLuint, pname: GLenum, params: *GLint) #foreign;
	
	// APPLE_rgb_422
	
	// APPLE_row_bytes
	
	// APPLE_specular_vector
	
	// APPLE_texture_range
	TextureRangeAPPLE : (target: GLenum, length: GLsizei, pointer: *void) #foreign;
	GetTexParameterPointervAPPLE : (target: GLenum, pname: GLenum, params: **void) #foreign;
	
	// APPLE_transform_hint
	
	// APPLE_vertex_array_object
	BindVertexArrayAPPLE : (array: GLuint) #foreign;
	DeleteVertexArraysAPPLE : (n: GLsizei, arrays: *GLuint) #foreign;
	GenVertexArraysAPPLE : (n: GLsizei, arrays: *GLuint) #foreign;
	IsVertexArrayAPPLE : (array: GLuint) -> GLboolean #foreign;
	
	// APPLE_vertex_array_range
	VertexArrayRangeAPPLE : (length: GLsizei, pointer: *void) #foreign;
	FlushVertexArrayRangeAPPLE : (length: GLsizei, pointer: *void) #foreign;
	VertexArrayParameteriAPPLE : (pname: GLenum, param: GLint) #foreign;
	
	// APPLE_vertex_program_evaluators
	EnableVertexAttribAPPLE : (index: GLuint, pname: GLenum) #foreign;
	DisableVertexAttribAPPLE : (index: GLuint, pname: GLenum) #foreign;
	IsVertexAttribEnabledAPPLE : (index: GLuint, pname: GLenum) -> GLboolean #foreign;
	MapVertexAttrib1dAPPLE : (index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) #foreign;
	MapVertexAttrib1fAPPLE : (index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) #foreign;
	MapVertexAttrib2dAPPLE : (index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) #foreign;
	MapVertexAttrib2fAPPLE : (index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) #foreign;
	
	// APPLE_ycbcr_422
	
	// ARB_ES2_compatibility
	// ReleaseShaderCompiler : () #foreign;
	// ShaderBinary : (count: GLsizei, shaders: *GLuint, binaryformat: GLenum, binary: *void, length: GLsizei) #foreign;
	// GetShaderPrecisionFormat : (shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) #foreign;
	// DepthRangef : (n: GLfloat, f: GLfloat) #foreign;
	// ClearDepthf : (d: GLfloat) #foreign;
	
	// ARB_ES3_1_compatibility
	// MemoryBarrierByRegion : (barriers: GLbitfield) #foreign;
	
	// ARB_ES3_2_compatibility
	PrimitiveBoundingBoxARB : (minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) #foreign;
	
	// ARB_ES3_compatibility
	
	// ARB_arrays_of_arrays
	
	// ARB_base_instance
	// DrawArraysInstancedBaseInstance : (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) #foreign;
	// DrawElementsInstancedBaseInstance : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, baseinstance: GLuint) #foreign;
	// DrawElementsInstancedBaseVertexBaseInstance : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) #foreign;
	
	// ARB_bindless_texture
	GetTextureHandleARB : (texture: GLuint) -> GLuint64 #foreign;
	GetTextureSamplerHandleARB : (texture: GLuint, sampler: GLuint) -> GLuint64 #foreign;
	MakeTextureHandleResidentARB : (handle: GLuint64) #foreign;
	MakeTextureHandleNonResidentARB : (handle: GLuint64) #foreign;
	GetImageHandleARB : (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 #foreign;
	MakeImageHandleResidentARB : (handle: GLuint64, access: GLenum) #foreign;
	MakeImageHandleNonResidentARB : (handle: GLuint64) #foreign;
	UniformHandleui64ARB : (location: GLint, value: GLuint64) #foreign;
	UniformHandleui64vARB : (location: GLint, count: GLsizei, value: *GLuint64) #foreign;
	ProgramUniformHandleui64ARB : (program: GLuint, location: GLint, value: GLuint64) #foreign;
	ProgramUniformHandleui64vARB : (program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) #foreign;
	IsTextureHandleResidentARB : (handle: GLuint64) -> GLboolean #foreign;
	IsImageHandleResidentARB : (handle: GLuint64) -> GLboolean #foreign;
	VertexAttribL1ui64ARB : (index: GLuint, x: GLuint64EXT) #foreign;
	VertexAttribL1ui64vARB : (index: GLuint, v: *GLuint64EXT) #foreign;
	GetVertexAttribLui64vARB : (index: GLuint, pname: GLenum, params: *GLuint64EXT) #foreign;
	
	// ARB_blend_func_extended
	// BindFragDataLocationIndexed : (program: GLuint, colorNumber: GLuint, index: GLuint, name: *GLchar) #foreign;
	// GetFragDataIndex : (program: GLuint, name: *GLchar) -> GLint #foreign;
	
	// ARB_buffer_storage
	// BufferStorage : (target: GLenum, size: GLsizeiptr, data: *void, flags: GLbitfield) #foreign;
	
	// ARB_cl_event
	// CreateSyncFromCLeventARB : (context: *struct _cl_context, event: *struct _cl_event, flags: GLbitfield) -> GLsync #foreign;
	
	// ARB_clear_buffer_object
	// ClearBufferData : (target: GLenum, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) #foreign;
	// ClearBufferSubData : (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) #foreign;
	
	// ARB_clear_texture
	// ClearTexImage : (texture: GLuint, level: GLint, format: GLenum, type: GLenum, data: *void) #foreign;
	// ClearTexSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, data: *void) #foreign;
	
	// ARB_clip_control
	// ClipControl : (origin: GLenum, depth: GLenum) #foreign;
	
	// ARB_color_buffer_float
	ClampColorARB : (target: GLenum, clamp: GLenum) #foreign;
	
	// ARB_compatibility
	
	// ARB_compressed_texture_pixel_storage
	
	// ARB_compute_shader
	// DispatchCompute : (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) #foreign;
	// DispatchComputeIndirect : (indirect: GLintptr) #foreign;
	
	// ARB_compute_variable_group_size
	DispatchComputeGroupSizeARB : (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) #foreign;
	
	// ARB_conditional_render_inverted
	
	// ARB_conservative_depth
	
	// ARB_copy_buffer
	// CopyBufferSubData : (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #foreign;
	
	// ARB_copy_image
	// CopyImageSubData : (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) #foreign;
	
	// ARB_cull_distance
	
	// ARB_debug_output
	DebugMessageControlARB : (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #foreign;
	DebugMessageInsertARB : (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) #foreign;
	DebugMessageCallbackARB : (callback: GLDEBUGPROCARB, userParam: *void) #foreign;
	GetDebugMessageLogARB : (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #foreign;
	
	// ARB_depth_buffer_float
	
	// ARB_depth_clamp
	
	// ARB_depth_texture
	
	// ARB_derivative_control
	
	// ARB_direct_state_access
	// CreateTransformFeedbacks : (n: GLsizei, ids: *GLuint) #foreign;
	// TransformFeedbackBufferBase : (xfb: GLuint, index: GLuint, buffer: GLuint) #foreign;
	// TransformFeedbackBufferRange : (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
	// GetTransformFeedbackiv : (xfb: GLuint, pname: GLenum, param: *GLint) #foreign;
	// GetTransformFeedbacki_v : (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint) #foreign;
	// GetTransformFeedbacki64_v : (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint64) #foreign;
	// CreateBuffers : (n: GLsizei, buffers: *GLuint) #foreign;
	// NamedBufferStorage : (buffer: GLuint, size: GLsizeiptr, data: *void, flags: GLbitfield) #foreign;
	// NamedBufferData : (buffer: GLuint, size: GLsizeiptr, data: *void, usage: GLenum) #foreign;
	// NamedBufferSubData : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
	// CopyNamedBufferSubData : (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #foreign;
	// ClearNamedBufferData : (buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) #foreign;
	// ClearNamedBufferSubData : (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) #foreign;
	// MapNamedBuffer : (buffer: GLuint, access: GLenum) #foreign;
	// MapNamedBufferRange : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) #foreign;
	// UnmapNamedBuffer : (buffer: GLuint) -> GLboolean #foreign;
	// FlushMappedNamedBufferRange : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) #foreign;
	// GetNamedBufferParameteriv : (buffer: GLuint, pname: GLenum, params: *GLint) #foreign;
	// GetNamedBufferParameteri64v : (buffer: GLuint, pname: GLenum, params: *GLint64) #foreign;
	// GetNamedBufferPointerv : (buffer: GLuint, pname: GLenum, params: **void) #foreign;
	// GetNamedBufferSubData : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
	// CreateFramebuffers : (n: GLsizei, framebuffers: *GLuint) #foreign;
	// NamedFramebufferRenderbuffer : (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #foreign;
	// NamedFramebufferParameteri : (framebuffer: GLuint, pname: GLenum, param: GLint) #foreign;
	// NamedFramebufferTexture : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) #foreign;
	// NamedFramebufferTextureLayer : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #foreign;
	// NamedFramebufferDrawBuffer : (framebuffer: GLuint, buf: GLenum) #foreign;
	// NamedFramebufferDrawBuffers : (framebuffer: GLuint, n: GLsizei, bufs: *GLenum) #foreign;
	// NamedFramebufferReadBuffer : (framebuffer: GLuint, src: GLenum) #foreign;
	// InvalidateNamedFramebufferData : (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum) #foreign;
	// InvalidateNamedFramebufferSubData : (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	// ClearNamedFramebufferiv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLint) #foreign;
	// ClearNamedFramebufferuiv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLuint) #foreign;
	// ClearNamedFramebufferfv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLfloat) #foreign;
	// ClearNamedFramebufferfi : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) #foreign;
	// BlitNamedFramebuffer : (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #foreign;
	// CheckNamedFramebufferStatus : (framebuffer: GLuint, target: GLenum) -> GLenum #foreign;
	// GetNamedFramebufferParameteriv : (framebuffer: GLuint, pname: GLenum, param: *GLint) #foreign;
	// GetNamedFramebufferAttachmentParameteriv : (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) #foreign;
	// CreateRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #foreign;
	// NamedRenderbufferStorage : (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	// NamedRenderbufferStorageMultisample : (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	// GetNamedRenderbufferParameteriv : (renderbuffer: GLuint, pname: GLenum, params: *GLint) #foreign;
	// CreateTextures : (target: GLenum, n: GLsizei, textures: *GLuint) #foreign;
	// TextureBuffer : (texture: GLuint, internalformat: GLenum, buffer: GLuint) #foreign;
	// TextureBufferRange : (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
	// TextureStorage1D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) #foreign;
	// TextureStorage2D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	// TextureStorage3D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) #foreign;
	// TextureStorage2DMultisample : (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	// TextureStorage3DMultisample : (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	// TextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	// TextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	// TextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	// CompressedTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
	// CompressedTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
	// CompressedTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
	// CopyTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #foreign;
	// CopyTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	// CopyTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	// TextureParameterf : (texture: GLuint, pname: GLenum, param: GLfloat) #foreign;
	// TextureParameterfv : (texture: GLuint, pname: GLenum, param: *GLfloat) #foreign;
	// TextureParameteri : (texture: GLuint, pname: GLenum, param: GLint) #foreign;
	// TextureParameterIiv : (texture: GLuint, pname: GLenum, params: *GLint) #foreign;
	// TextureParameterIuiv : (texture: GLuint, pname: GLenum, params: *GLuint) #foreign;
	// TextureParameteriv : (texture: GLuint, pname: GLenum, param: *GLint) #foreign;
	// GenerateTextureMipmap : (texture: GLuint) #foreign;
	// BindTextureUnit : (unit: GLuint, texture: GLuint) #foreign;
	// GetTextureImage : (texture: GLuint, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #foreign;
	// GetCompressedTextureImage : (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: *void) #foreign;
	// GetTextureLevelParameterfv : (texture: GLuint, level: GLint, pname: GLenum, params: *GLfloat) #foreign;
	// GetTextureLevelParameteriv : (texture: GLuint, level: GLint, pname: GLenum, params: *GLint) #foreign;
	// GetTextureParameterfv : (texture: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	// GetTextureParameterIiv : (texture: GLuint, pname: GLenum, params: *GLint) #foreign;
	// GetTextureParameterIuiv : (texture: GLuint, pname: GLenum, params: *GLuint) #foreign;
	// GetTextureParameteriv : (texture: GLuint, pname: GLenum, params: *GLint) #foreign;
	// CreateVertexArrays : (n: GLsizei, arrays: *GLuint) #foreign;
	// DisableVertexArrayAttrib : (vaobj: GLuint, index: GLuint) #foreign;
	// EnableVertexArrayAttrib : (vaobj: GLuint, index: GLuint) #foreign;
	// VertexArrayElementBuffer : (vaobj: GLuint, buffer: GLuint) #foreign;
	// VertexArrayVertexBuffer : (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) #foreign;
	// VertexArrayVertexBuffers : (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) #foreign;
	// VertexArrayAttribBinding : (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) #foreign;
	// VertexArrayAttribFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) #foreign;
	// VertexArrayAttribIFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
	// VertexArrayAttribLFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
	// VertexArrayBindingDivisor : (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) #foreign;
	// GetVertexArrayiv : (vaobj: GLuint, pname: GLenum, param: *GLint) #foreign;
	// GetVertexArrayIndexediv : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) #foreign;
	// GetVertexArrayIndexed64iv : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint64) #foreign;
	// CreateSamplers : (n: GLsizei, samplers: *GLuint) #foreign;
	// CreateProgramPipelines : (n: GLsizei, pipelines: *GLuint) #foreign;
	// CreateQueries : (target: GLenum, n: GLsizei, ids: *GLuint) #foreign;
	// GetQueryBufferObjecti64v : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
	// GetQueryBufferObjectiv : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
	// GetQueryBufferObjectui64v : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
	// GetQueryBufferObjectuiv : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
	
	// ARB_draw_buffers
	DrawBuffersARB : (n: GLsizei, bufs: *GLenum) #foreign;
	
	// ARB_draw_buffers_blend
	BlendEquationiARB : (buf: GLuint, mode: GLenum) #foreign;
	BlendEquationSeparateiARB : (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) #foreign;
	BlendFunciARB : (buf: GLuint, src: GLenum, dst: GLenum) #foreign;
	BlendFuncSeparateiARB : (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) #foreign;
	
	// ARB_draw_elements_base_vertex
	// DrawElementsBaseVertex : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) #foreign;
	// DrawRangeElementsBaseVertex : (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) #foreign;
	// DrawElementsInstancedBaseVertex : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint) #foreign;
	// MultiDrawElementsBaseVertex : (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, drawcount: GLsizei, basevertex: *GLint) #foreign;
	
	// ARB_draw_indirect
	// DrawArraysIndirect : (mode: GLenum, indirect: *void) #foreign;
	// DrawElementsIndirect : (mode: GLenum, type: GLenum, indirect: *void) #foreign;
	
	// ARB_draw_instanced
	DrawArraysInstancedARB : (mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) #foreign;
	DrawElementsInstancedARB : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, primcount: GLsizei) #foreign;
	
	// ARB_enhanced_layouts
	
	// ARB_explicit_attrib_location
	
	// ARB_explicit_uniform_location
	
	// ARB_fragment_coord_conventions
	
	// ARB_fragment_layer_viewport
	
	// ARB_fragment_program
	ProgramStringARB : (target: GLenum, format: GLenum, len: GLsizei, str: *void) #foreign;
	BindProgramARB : (target: GLenum, program: GLuint) #foreign;
	DeleteProgramsARB : (n: GLsizei, programs: *GLuint) #foreign;
	GenProgramsARB : (n: GLsizei, programs: *GLuint) #foreign;
	ProgramEnvParameter4dARB : (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	ProgramEnvParameter4dvARB : (target: GLenum, index: GLuint, params: *GLdouble) #foreign;
	ProgramEnvParameter4fARB : (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	ProgramEnvParameter4fvARB : (target: GLenum, index: GLuint, params: *GLfloat) #foreign;
	ProgramLocalParameter4dARB : (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	ProgramLocalParameter4dvARB : (target: GLenum, index: GLuint, params: *GLdouble) #foreign;
	ProgramLocalParameter4fARB : (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	ProgramLocalParameter4fvARB : (target: GLenum, index: GLuint, params: *GLfloat) #foreign;
	GetProgramEnvParameterdvARB : (target: GLenum, index: GLuint, params: *GLdouble) #foreign;
	GetProgramEnvParameterfvARB : (target: GLenum, index: GLuint, params: *GLfloat) #foreign;
	GetProgramLocalParameterdvARB : (target: GLenum, index: GLuint, params: *GLdouble) #foreign;
	GetProgramLocalParameterfvARB : (target: GLenum, index: GLuint, params: *GLfloat) #foreign;
	GetProgramivARB : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetProgramStringARB : (target: GLenum, pname: GLenum, str: *void) #foreign;
	IsProgramARB : (program: GLuint) -> GLboolean #foreign;
	
	// ARB_fragment_program_shadow
	
	// ARB_fragment_shader
	
	// ARB_fragment_shader_interlock
	
	// ARB_framebuffer_no_attachments
	// FramebufferParameteri : (target: GLenum, pname: GLenum, param: GLint) #foreign;
	// GetFramebufferParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	
	// ARB_framebuffer_object
	// IsRenderbuffer : (renderbuffer: GLuint) -> GLboolean #foreign;
	// BindRenderbuffer : (target: GLenum, renderbuffer: GLuint) #foreign;
	// DeleteRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #foreign;
	// GenRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #foreign;
	// RenderbufferStorage : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	// GetRenderbufferParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	// IsFramebuffer : (framebuffer: GLuint) -> GLboolean #foreign;
	// BindFramebuffer : (target: GLenum, framebuffer: GLuint) #foreign;
	// DeleteFramebuffers : (n: GLsizei, framebuffers: *GLuint) #foreign;
	// GenFramebuffers : (n: GLsizei, framebuffers: *GLuint) #foreign;
	// CheckFramebufferStatus : (target: GLenum) -> GLenum #foreign;
	// FramebufferTexture1D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #foreign;
	// FramebufferTexture2D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #foreign;
	// FramebufferTexture3D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) #foreign;
	// FramebufferRenderbuffer : (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #foreign;
	// GetFramebufferAttachmentParameteriv : (target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) #foreign;
	// GenerateMipmap : (target: GLenum) #foreign;
	// BlitFramebuffer : (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #foreign;
	// RenderbufferStorageMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	// FramebufferTextureLayer : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #foreign;
	
	// ARB_framebuffer_sRGB
	
	// ARB_geometry_shader4
	ProgramParameteriARB : (program: GLuint, pname: GLenum, value: GLint) #foreign;
	FramebufferTextureARB : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) #foreign;
	FramebufferTextureLayerARB : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #foreign;
	FramebufferTextureFaceARB : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) #foreign;
	
	// ARB_get_program_binary
	// GetProgramBinary : (program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *void) #foreign;
	// ProgramBinary : (program: GLuint, binaryFormat: GLenum, binary: *void, length: GLsizei) #foreign;
	// ProgramParameteri : (program: GLuint, pname: GLenum, value: GLint) #foreign;
	
	// ARB_get_texture_sub_image
	// GetTextureSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #foreign;
	// GetCompressedTextureSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: *void) #foreign;
	
	// ARB_gl_spirv
	SpecializeShaderARB : (shader: GLuint, pEntryPoint: *GLchar, numSpecializationConstants: GLuint, pConstantIndex: *GLuint, pConstantValue: *GLuint) #foreign;
	
	// ARB_gpu_shader5
	
	// ARB_gpu_shader_fp64
	// Uniform1d : (location: GLint, x: GLdouble) #foreign;
	// Uniform2d : (location: GLint, x: GLdouble, y: GLdouble) #foreign;
	// Uniform3d : (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	// Uniform4d : (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	// Uniform1dv : (location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	// Uniform2dv : (location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	// Uniform3dv : (location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	// Uniform4dv : (location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	// UniformMatrix2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// UniformMatrix3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// UniformMatrix4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// UniformMatrix2x3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// UniformMatrix2x4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// UniformMatrix3x2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// UniformMatrix3x4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// UniformMatrix4x2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// UniformMatrix4x3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// GetUniformdv : (program: GLuint, location: GLint, params: *GLdouble) #foreign;
	
	// ARB_gpu_shader_int64
	Uniform1i64ARB : (location: GLint, x: GLint64) #foreign;
	Uniform2i64ARB : (location: GLint, x: GLint64, y: GLint64) #foreign;
	Uniform3i64ARB : (location: GLint, x: GLint64, y: GLint64, z: GLint64) #foreign;
	Uniform4i64ARB : (location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) #foreign;
	Uniform1i64vARB : (location: GLint, count: GLsizei, value: *GLint64) #foreign;
	Uniform2i64vARB : (location: GLint, count: GLsizei, value: *GLint64) #foreign;
	Uniform3i64vARB : (location: GLint, count: GLsizei, value: *GLint64) #foreign;
	Uniform4i64vARB : (location: GLint, count: GLsizei, value: *GLint64) #foreign;
	Uniform1ui64ARB : (location: GLint, x: GLuint64) #foreign;
	Uniform2ui64ARB : (location: GLint, x: GLuint64, y: GLuint64) #foreign;
	Uniform3ui64ARB : (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) #foreign;
	Uniform4ui64ARB : (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) #foreign;
	Uniform1ui64vARB : (location: GLint, count: GLsizei, value: *GLuint64) #foreign;
	Uniform2ui64vARB : (location: GLint, count: GLsizei, value: *GLuint64) #foreign;
	Uniform3ui64vARB : (location: GLint, count: GLsizei, value: *GLuint64) #foreign;
	Uniform4ui64vARB : (location: GLint, count: GLsizei, value: *GLuint64) #foreign;
	GetUniformi64vARB : (program: GLuint, location: GLint, params: *GLint64) #foreign;
	GetUniformui64vARB : (program: GLuint, location: GLint, params: *GLuint64) #foreign;
	GetnUniformi64vARB : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint64) #foreign;
	GetnUniformui64vARB : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint64) #foreign;
	ProgramUniform1i64ARB : (program: GLuint, location: GLint, x: GLint64) #foreign;
	ProgramUniform2i64ARB : (program: GLuint, location: GLint, x: GLint64, y: GLint64) #foreign;
	ProgramUniform3i64ARB : (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64) #foreign;
	ProgramUniform4i64ARB : (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) #foreign;
	ProgramUniform1i64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64) #foreign;
	ProgramUniform2i64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64) #foreign;
	ProgramUniform3i64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64) #foreign;
	ProgramUniform4i64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64) #foreign;
	ProgramUniform1ui64ARB : (program: GLuint, location: GLint, x: GLuint64) #foreign;
	ProgramUniform2ui64ARB : (program: GLuint, location: GLint, x: GLuint64, y: GLuint64) #foreign;
	ProgramUniform3ui64ARB : (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) #foreign;
	ProgramUniform4ui64ARB : (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) #foreign;
	ProgramUniform1ui64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64) #foreign;
	ProgramUniform2ui64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64) #foreign;
	ProgramUniform3ui64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64) #foreign;
	ProgramUniform4ui64vARB : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64) #foreign;
	
	// ARB_half_float_pixel
	
	// ARB_half_float_vertex
	
	// ARB_imaging
	// BlendColor : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign;
	// BlendEquation : (mode: GLenum) #foreign;
	ColorTable : (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: *void) #foreign;
	ColorTableParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	ColorTableParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	CopyColorTable : (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) #foreign;
	GetColorTable : (target: GLenum, format: GLenum, type: GLenum, table: *void) #foreign;
	GetColorTableParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetColorTableParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	ColorSubTable : (target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type: GLenum, data: *void) #foreign;
	CopyColorSubTable : (target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) #foreign;
	ConvolutionFilter1D : (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, image: *void) #foreign;
	ConvolutionFilter2D : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, image: *void) #foreign;
	ConvolutionParameterf : (target: GLenum, pname: GLenum, params: GLfloat) #foreign;
	ConvolutionParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	ConvolutionParameteri : (target: GLenum, pname: GLenum, params: GLint) #foreign;
	ConvolutionParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	CopyConvolutionFilter1D : (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) #foreign;
	CopyConvolutionFilter2D : (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	GetConvolutionFilter : (target: GLenum, format: GLenum, type: GLenum, image: *void) #foreign;
	GetConvolutionParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetConvolutionParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetSeparableFilter : (target: GLenum, format: GLenum, type: GLenum, row: *void, column: *void, span: *void) #foreign;
	SeparableFilter2D : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, row: *void, column: *void) #foreign;
	GetHistogram : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: *void) #foreign;
	GetHistogramParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetHistogramParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetMinmax : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: *void) #foreign;
	GetMinmaxParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetMinmaxParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	Histogram : (target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) #foreign;
	Minmax : (target: GLenum, internalformat: GLenum, sink: GLboolean) #foreign;
	ResetHistogram : (target: GLenum) #foreign;
	ResetMinmax : (target: GLenum) #foreign;
	
	// ARB_indirect_parameters
	MultiDrawArraysIndirectCountARB : (mode: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) #foreign;
	MultiDrawElementsIndirectCountARB : (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) #foreign;
	
	// ARB_instanced_arrays
	VertexAttribDivisorARB : (index: GLuint, divisor: GLuint) #foreign;
	
	// ARB_internalformat_query
	// GetInternalformativ : (target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint) #foreign;
	
	// ARB_internalformat_query2
	// GetInternalformati64v : (target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint64) #foreign;
	
	// ARB_invalidate_subdata
	// InvalidateTexSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) #foreign;
	// InvalidateTexImage : (texture: GLuint, level: GLint) #foreign;
	// InvalidateBufferSubData : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) #foreign;
	// InvalidateBufferData : (buffer: GLuint) #foreign;
	// InvalidateFramebuffer : (target: GLenum, numAttachments: GLsizei, attachments: *GLenum) #foreign;
	// InvalidateSubFramebuffer : (target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	
	// ARB_map_buffer_alignment
	
	// ARB_map_buffer_range
	// MapBufferRange : (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) #foreign;
	// FlushMappedBufferRange : (target: GLenum, offset: GLintptr, length: GLsizeiptr) #foreign;
	
	// ARB_matrix_palette
	CurrentPaletteMatrixARB : (index: GLint) #foreign;
	MatrixIndexubvARB : (size: GLint, indices: *GLubyte) #foreign;
	MatrixIndexusvARB : (size: GLint, indices: *GLushort) #foreign;
	MatrixIndexuivARB : (size: GLint, indices: *GLuint) #foreign;
	MatrixIndexPointerARB : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	
	// ARB_multi_bind
	// BindBuffersBase : (target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint) #foreign;
	// BindBuffersRange : (target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, sizes: *GLsizeiptr) #foreign;
	// BindTextures : (first: GLuint, count: GLsizei, textures: *GLuint) #foreign;
	// BindSamplers : (first: GLuint, count: GLsizei, samplers: *GLuint) #foreign;
	// BindImageTextures : (first: GLuint, count: GLsizei, textures: *GLuint) #foreign;
	// BindVertexBuffers : (first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) #foreign;
	
	// ARB_multi_draw_indirect
	// MultiDrawArraysIndirect : (mode: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) #foreign;
	// MultiDrawElementsIndirect : (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) #foreign;
	
	// ARB_multisample
	SampleCoverageARB : (value: GLfloat, invert: GLboolean) #foreign;
	
	// ARB_multitexture
	ActiveTextureARB : (texture: GLenum) #foreign;
	ClientActiveTextureARB : (texture: GLenum) #foreign;
	MultiTexCoord1dARB : (target: GLenum, s: GLdouble) #foreign;
	MultiTexCoord1dvARB : (target: GLenum, v: *GLdouble) #foreign;
	MultiTexCoord1fARB : (target: GLenum, s: GLfloat) #foreign;
	MultiTexCoord1fvARB : (target: GLenum, v: *GLfloat) #foreign;
	MultiTexCoord1iARB : (target: GLenum, s: GLint) #foreign;
	MultiTexCoord1ivARB : (target: GLenum, v: *GLint) #foreign;
	MultiTexCoord1sARB : (target: GLenum, s: GLshort) #foreign;
	MultiTexCoord1svARB : (target: GLenum, v: *GLshort) #foreign;
	MultiTexCoord2dARB : (target: GLenum, s: GLdouble, t: GLdouble) #foreign;
	MultiTexCoord2dvARB : (target: GLenum, v: *GLdouble) #foreign;
	MultiTexCoord2fARB : (target: GLenum, s: GLfloat, t: GLfloat) #foreign;
	MultiTexCoord2fvARB : (target: GLenum, v: *GLfloat) #foreign;
	MultiTexCoord2iARB : (target: GLenum, s: GLint, t: GLint) #foreign;
	MultiTexCoord2ivARB : (target: GLenum, v: *GLint) #foreign;
	MultiTexCoord2sARB : (target: GLenum, s: GLshort, t: GLshort) #foreign;
	MultiTexCoord2svARB : (target: GLenum, v: *GLshort) #foreign;
	MultiTexCoord3dARB : (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) #foreign;
	MultiTexCoord3dvARB : (target: GLenum, v: *GLdouble) #foreign;
	MultiTexCoord3fARB : (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) #foreign;
	MultiTexCoord3fvARB : (target: GLenum, v: *GLfloat) #foreign;
	MultiTexCoord3iARB : (target: GLenum, s: GLint, t: GLint, r: GLint) #foreign;
	MultiTexCoord3ivARB : (target: GLenum, v: *GLint) #foreign;
	MultiTexCoord3sARB : (target: GLenum, s: GLshort, t: GLshort, r: GLshort) #foreign;
	MultiTexCoord3svARB : (target: GLenum, v: *GLshort) #foreign;
	MultiTexCoord4dARB : (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) #foreign;
	MultiTexCoord4dvARB : (target: GLenum, v: *GLdouble) #foreign;
	MultiTexCoord4fARB : (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) #foreign;
	MultiTexCoord4fvARB : (target: GLenum, v: *GLfloat) #foreign;
	MultiTexCoord4iARB : (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) #foreign;
	MultiTexCoord4ivARB : (target: GLenum, v: *GLint) #foreign;
	MultiTexCoord4sARB : (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) #foreign;
	MultiTexCoord4svARB : (target: GLenum, v: *GLshort) #foreign;
	
	// ARB_occlusion_query
	GenQueriesARB : (n: GLsizei, ids: *GLuint) #foreign;
	DeleteQueriesARB : (n: GLsizei, ids: *GLuint) #foreign;
	IsQueryARB : (id: GLuint) -> GLboolean #foreign;
	BeginQueryARB : (target: GLenum, id: GLuint) #foreign;
	EndQueryARB : (target: GLenum) #foreign;
	GetQueryivARB : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetQueryObjectivARB : (id: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetQueryObjectuivARB : (id: GLuint, pname: GLenum, params: *GLuint) #foreign;
	
	// ARB_occlusion_query2
	
	// ARB_parallel_shader_compile
	MaxShaderCompilerThreadsARB : (count: GLuint) #foreign;
	
	// ARB_pipeline_statistics_query
	
	// ARB_pixel_buffer_object
	
	// ARB_point_parameters
	PointParameterfARB : (pname: GLenum, param: GLfloat) #foreign;
	PointParameterfvARB : (pname: GLenum, params: *GLfloat) #foreign;
	
	// ARB_point_sprite
	
	// ARB_polygon_offset_clamp
	// PolygonOffsetClamp : (factor: GLfloat, units: GLfloat, clamp: GLfloat) #foreign;
	
	// ARB_post_depth_coverage
	
	// ARB_program_interface_query
	// GetProgramInterfaceiv : (program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) #foreign;
	// GetProgramResourceIndex : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint #foreign;
	// GetProgramResourceName : (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) #foreign;
	// GetProgramResourceiv : (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) #foreign;
	// GetProgramResourceLocation : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #foreign;
	// GetProgramResourceLocationIndex : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #foreign;
	
	// ARB_provoking_vertex
	// ProvokingVertex : (mode: GLenum) #foreign;
	
	// ARB_query_buffer_object
	
	// ARB_robust_buffer_access_behavior
	
	// ARB_robustness
	GetGraphicsResetStatusARB : () -> GLenum #foreign;
	GetnTexImageARB : (target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, img: *void) #foreign;
	ReadnPixelsARB : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) #foreign;
	GetnCompressedTexImageARB : (target: GLenum, lod: GLint, bufSize: GLsizei, img: *void) #foreign;
	GetnUniformfvARB : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) #foreign;
	GetnUniformivARB : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) #foreign;
	GetnUniformuivARB : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) #foreign;
	GetnUniformdvARB : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) #foreign;
	GetnMapdvARB : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLdouble) #foreign;
	GetnMapfvARB : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLfloat) #foreign;
	GetnMapivARB : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLint) #foreign;
	GetnPixelMapfvARB : (map: GLenum, bufSize: GLsizei, values: *GLfloat) #foreign;
	GetnPixelMapuivARB : (map: GLenum, bufSize: GLsizei, values: *GLuint) #foreign;
	GetnPixelMapusvARB : (map: GLenum, bufSize: GLsizei, values: *GLushort) #foreign;
	GetnPolygonStippleARB : (bufSize: GLsizei, pattern: *GLubyte) #foreign;
	GetnColorTableARB : (target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, table: *void) #foreign;
	GetnConvolutionFilterARB : (target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, image: *void) #foreign;
	GetnSeparableFilterARB : (target: GLenum, format: GLenum, type: GLenum, rowBufSize: GLsizei, row: *void, columnBufSize: GLsizei, column: *void, span: *void) #foreign;
	GetnHistogramARB : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: *void) #foreign;
	GetnMinmaxARB : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: *void) #foreign;
	
	// ARB_robustness_isolation
	
	// ARB_sample_locations
	FramebufferSampleLocationsfvARB : (target: GLenum, start: GLuint, count: GLsizei, v: *GLfloat) #foreign;
	NamedFramebufferSampleLocationsfvARB : (framebuffer: GLuint, start: GLuint, count: GLsizei, v: *GLfloat) #foreign;
	EvaluateDepthValuesARB : () #foreign;
	
	// ARB_sample_shading
	MinSampleShadingARB : (value: GLfloat) #foreign;
	
	// ARB_sampler_objects
	// GenSamplers : (count: GLsizei, samplers: *GLuint) #foreign;
	// DeleteSamplers : (count: GLsizei, samplers: *GLuint) #foreign;
	// IsSampler : (sampler: GLuint) -> GLboolean #foreign;
	// BindSampler : (unit: GLuint, sampler: GLuint) #foreign;
	// SamplerParameteri : (sampler: GLuint, pname: GLenum, param: GLint) #foreign;
	// SamplerParameteriv : (sampler: GLuint, pname: GLenum, param: *GLint) #foreign;
	// SamplerParameterf : (sampler: GLuint, pname: GLenum, param: GLfloat) #foreign;
	// SamplerParameterfv : (sampler: GLuint, pname: GLenum, param: *GLfloat) #foreign;
	// SamplerParameterIiv : (sampler: GLuint, pname: GLenum, param: *GLint) #foreign;
	// SamplerParameterIuiv : (sampler: GLuint, pname: GLenum, param: *GLuint) #foreign;
	// GetSamplerParameteriv : (sampler: GLuint, pname: GLenum, params: *GLint) #foreign;
	// GetSamplerParameterIiv : (sampler: GLuint, pname: GLenum, params: *GLint) #foreign;
	// GetSamplerParameterfv : (sampler: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	// GetSamplerParameterIuiv : (sampler: GLuint, pname: GLenum, params: *GLuint) #foreign;
	
	// ARB_seamless_cube_map
	
	// ARB_seamless_cubemap_per_texture
	
	// ARB_separate_shader_objects
	// UseProgramStages : (pipeline: GLuint, stages: GLbitfield, program: GLuint) #foreign;
	// ActiveShaderProgram : (pipeline: GLuint, program: GLuint) #foreign;
	// CreateShaderProgramv : (type: GLenum, count: GLsizei, strings: **GLchar) -> GLuint #foreign;
	// BindProgramPipeline : (pipeline: GLuint) #foreign;
	// DeleteProgramPipelines : (n: GLsizei, pipelines: *GLuint) #foreign;
	// GenProgramPipelines : (n: GLsizei, pipelines: *GLuint) #foreign;
	// IsProgramPipeline : (pipeline: GLuint) -> GLboolean #foreign;
	// GetProgramPipelineiv : (pipeline: GLuint, pname: GLenum, params: *GLint) #foreign;
	// ProgramParameteri : (program: GLuint, pname: GLenum, value: GLint) #foreign;
	// ProgramUniform1i : (program: GLuint, location: GLint, v0: GLint) #foreign;
	// ProgramUniform1iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	// ProgramUniform1f : (program: GLuint, location: GLint, v0: GLfloat) #foreign;
	// ProgramUniform1fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	// ProgramUniform1d : (program: GLuint, location: GLint, v0: GLdouble) #foreign;
	// ProgramUniform1dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	// ProgramUniform1ui : (program: GLuint, location: GLint, v0: GLuint) #foreign;
	// ProgramUniform1uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	// ProgramUniform2i : (program: GLuint, location: GLint, v0: GLint, v1: GLint) #foreign;
	// ProgramUniform2iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	// ProgramUniform2f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) #foreign;
	// ProgramUniform2fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	// ProgramUniform2d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) #foreign;
	// ProgramUniform2dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	// ProgramUniform2ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) #foreign;
	// ProgramUniform2uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	// ProgramUniform3i : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) #foreign;
	// ProgramUniform3iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	// ProgramUniform3f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #foreign;
	// ProgramUniform3fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	// ProgramUniform3d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) #foreign;
	// ProgramUniform3dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	// ProgramUniform3ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #foreign;
	// ProgramUniform3uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	// ProgramUniform4i : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #foreign;
	// ProgramUniform4iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	// ProgramUniform4f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #foreign;
	// ProgramUniform4fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	// ProgramUniform4d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) #foreign;
	// ProgramUniform4dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	// ProgramUniform4ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #foreign;
	// ProgramUniform4uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	// ProgramUniformMatrix2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// ProgramUniformMatrix3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// ProgramUniformMatrix4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// ProgramUniformMatrix2x3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix3x2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix2x4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix4x2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix3x4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix4x3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix2x3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// ProgramUniformMatrix3x2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// ProgramUniformMatrix2x4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// ProgramUniformMatrix4x2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// ProgramUniformMatrix3x4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// ProgramUniformMatrix4x3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	// ValidateProgramPipeline : (pipeline: GLuint) #foreign;
	// GetProgramPipelineInfoLog : (pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #foreign;
	
	// ARB_shader_atomic_counter_ops
	
	// ARB_shader_atomic_counters
	// GetActiveAtomicCounterBufferiv : (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *GLint) #foreign;
	
	// ARB_shader_ballot
	
	// ARB_shader_bit_encoding
	
	// ARB_shader_clock
	
	// ARB_shader_draw_parameters
	
	// ARB_shader_group_vote
	
	// ARB_shader_image_load_store
	// BindImageTexture : (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) #foreign;
	// MemoryBarrier : (barriers: GLbitfield) #foreign;
	
	// ARB_shader_image_size
	
	// ARB_shader_objects
	DeleteObjectARB : (obj: GLhandleARB) #foreign;
	GetHandleARB : (pname: GLenum) -> GLhandleARB #foreign;
	DetachObjectARB : (containerObj: GLhandleARB, attachedObj: GLhandleARB) #foreign;
	CreateShaderObjectARB : (shaderType: GLenum) -> GLhandleARB #foreign;
	ShaderSourceARB : (shaderObj: GLhandleARB, count: GLsizei, str: **GLcharARB, length: *GLint) #foreign;
	CompileShaderARB : (shaderObj: GLhandleARB) #foreign;
	CreateProgramObjectARB : () -> GLhandleARB #foreign;
	AttachObjectARB : (containerObj: GLhandleARB, obj: GLhandleARB) #foreign;
	LinkProgramARB : (programObj: GLhandleARB) #foreign;
	UseProgramObjectARB : (programObj: GLhandleARB) #foreign;
	ValidateProgramARB : (programObj: GLhandleARB) #foreign;
	Uniform1fARB : (location: GLint, v0: GLfloat) #foreign;
	Uniform2fARB : (location: GLint, v0: GLfloat, v1: GLfloat) #foreign;
	Uniform3fARB : (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #foreign;
	Uniform4fARB : (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #foreign;
	Uniform1iARB : (location: GLint, v0: GLint) #foreign;
	Uniform2iARB : (location: GLint, v0: GLint, v1: GLint) #foreign;
	Uniform3iARB : (location: GLint, v0: GLint, v1: GLint, v2: GLint) #foreign;
	Uniform4iARB : (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #foreign;
	Uniform1fvARB : (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	Uniform2fvARB : (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	Uniform3fvARB : (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	Uniform4fvARB : (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	Uniform1ivARB : (location: GLint, count: GLsizei, value: *GLint) #foreign;
	Uniform2ivARB : (location: GLint, count: GLsizei, value: *GLint) #foreign;
	Uniform3ivARB : (location: GLint, count: GLsizei, value: *GLint) #foreign;
	Uniform4ivARB : (location: GLint, count: GLsizei, value: *GLint) #foreign;
	UniformMatrix2fvARB : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	UniformMatrix3fvARB : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	UniformMatrix4fvARB : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	GetObjectParameterfvARB : (obj: GLhandleARB, pname: GLenum, params: *GLfloat) #foreign;
	GetObjectParameterivARB : (obj: GLhandleARB, pname: GLenum, params: *GLint) #foreign;
	GetInfoLogARB : (obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, infoLog: *GLcharARB) #foreign;
	GetAttachedObjectsARB : (containerObj: GLhandleARB, maxCount: GLsizei, count: *GLsizei, obj: *GLhandleARB) #foreign;
	GetUniformLocationARB : (programObj: GLhandleARB, name: *GLcharARB) -> GLint #foreign;
	GetActiveUniformARB : (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLcharARB) #foreign;
	GetUniformfvARB : (programObj: GLhandleARB, location: GLint, params: *GLfloat) #foreign;
	GetUniformivARB : (programObj: GLhandleARB, location: GLint, params: *GLint) #foreign;
	GetShaderSourceARB : (obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, source: *GLcharARB) #foreign;
	
	// ARB_shader_precision
	
	// ARB_shader_stencil_export
	
	// ARB_shader_storage_buffer_object
	// ShaderStorageBlockBinding : (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) #foreign;
	
	// ARB_shader_subroutine
	// GetSubroutineUniformLocation : (program: GLuint, shadertype: GLenum, name: *GLchar) -> GLint #foreign;
	// GetSubroutineIndex : (program: GLuint, shadertype: GLenum, name: *GLchar) -> GLuint #foreign;
	// GetActiveSubroutineUniformiv : (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *GLint) #foreign;
	// GetActiveSubroutineUniformName : (program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) #foreign;
	// GetActiveSubroutineName : (program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) #foreign;
	// UniformSubroutinesuiv : (shadertype: GLenum, count: GLsizei, indices: *GLuint) #foreign;
	// GetUniformSubroutineuiv : (shadertype: GLenum, location: GLint, params: *GLuint) #foreign;
	// GetProgramStageiv : (program: GLuint, shadertype: GLenum, pname: GLenum, values: *GLint) #foreign;
	
	// ARB_shader_texture_image_samples
	
	// ARB_shader_texture_lod
	
	// ARB_shader_viewport_layer_array
	
	// ARB_shading_language_100
	
	// ARB_shading_language_420pack
	
	// ARB_shading_language_include
	NamedStringARB : (type: GLenum, namelen: GLint, name: *GLchar, stringlen: GLint, str: *GLchar) #foreign;
	DeleteNamedStringARB : (namelen: GLint, name: *GLchar) #foreign;
	CompileShaderIncludeARB : (shader: GLuint, count: GLsizei, path: **GLchar, length: *GLint) #foreign;
	IsNamedStringARB : (namelen: GLint, name: *GLchar) -> GLboolean #foreign;
	GetNamedStringARB : (namelen: GLint, name: *GLchar, bufSize: GLsizei, stringlen: *GLint, str: *GLchar) #foreign;
	GetNamedStringivARB : (namelen: GLint, name: *GLchar, pname: GLenum, params: *GLint) #foreign;
	
	// ARB_shading_language_packing
	
	// ARB_shadow
	
	// ARB_shadow_ambient
	
	// ARB_sparse_buffer
	BufferPageCommitmentARB : (target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) #foreign;
	NamedBufferPageCommitmentEXT : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) #foreign;
	NamedBufferPageCommitmentARB : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) #foreign;
	
	// ARB_sparse_texture
	TexPageCommitmentARB : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) #foreign;
	
	// ARB_sparse_texture2
	
	// ARB_sparse_texture_clamp
	
	// ARB_spirv_extensions
	
	// ARB_stencil_texturing
	
	// ARB_sync
	// FenceSync : (condition: GLenum, flags: GLbitfield) -> GLsync #foreign;
	// IsSync : (sync: GLsync) -> GLboolean #foreign;
	// DeleteSync : (sync: GLsync) #foreign;
	// ClientWaitSync : (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum #foreign;
	// WaitSync : (sync: GLsync, flags: GLbitfield, timeout: GLuint64) #foreign;
	// GetInteger64v : (pname: GLenum, data: *GLint64) #foreign;
	// GetSynciv : (sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) #foreign;
	
	// ARB_tessellation_shader
	// PatchParameteri : (pname: GLenum, value: GLint) #foreign;
	// PatchParameterfv : (pname: GLenum, values: *GLfloat) #foreign;
	
	// ARB_texture_barrier
	// TextureBarrier : () #foreign;
	
	// ARB_texture_border_clamp
	
	// ARB_texture_buffer_object
	TexBufferARB : (target: GLenum, internalformat: GLenum, buffer: GLuint) #foreign;
	
	// ARB_texture_buffer_object_rgb32
	
	// ARB_texture_buffer_range
	// TexBufferRange : (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
	
	// ARB_texture_compression
	CompressedTexImage3DARB : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #foreign;
	CompressedTexImage2DARB : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #foreign;
	CompressedTexImage1DARB : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #foreign;
	CompressedTexSubImage3DARB : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
	CompressedTexSubImage2DARB : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
	CompressedTexSubImage1DARB : (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
	GetCompressedTexImageARB : (target: GLenum, level: GLint, img: *void) #foreign;
	
	// ARB_texture_compression_bptc
	
	// ARB_texture_compression_rgtc
	
	// ARB_texture_cube_map
	
	// ARB_texture_cube_map_array
	
	// ARB_texture_env_add
	
	// ARB_texture_env_combine
	
	// ARB_texture_env_crossbar
	
	// ARB_texture_env_dot3
	
	// ARB_texture_filter_anisotropic
	
	// ARB_texture_filter_minmax
	
	// ARB_texture_float
	
	// ARB_texture_gather
	
	// ARB_texture_mirror_clamp_to_edge
	
	// ARB_texture_mirrored_repeat
	
	// ARB_texture_multisample
	// TexImage2DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	// TexImage3DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	// GetMultisamplefv : (pname: GLenum, index: GLuint, val: *GLfloat) #foreign;
	// SampleMaski : (maskNumber: GLuint, mask: GLbitfield) #foreign;
	
	// ARB_texture_non_power_of_two
	
	// ARB_texture_query_levels
	
	// ARB_texture_query_lod
	
	// ARB_texture_rectangle
	
	// ARB_texture_rg
	
	// ARB_texture_rgb10_a2ui
	
	// ARB_texture_stencil8
	
	// ARB_texture_storage
	// TexStorage1D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) #foreign;
	// TexStorage2D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	// TexStorage3D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) #foreign;
	
	// ARB_texture_storage_multisample
	// TexStorage2DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	// TexStorage3DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	
	// ARB_texture_swizzle
	
	// ARB_texture_view
	// TextureView : (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) #foreign;
	
	// ARB_timer_query
	// QueryCounter : (id: GLuint, target: GLenum) #foreign;
	// GetQueryObjecti64v : (id: GLuint, pname: GLenum, params: *GLint64) #foreign;
	// GetQueryObjectui64v : (id: GLuint, pname: GLenum, params: *GLuint64) #foreign;
	
	// ARB_transform_feedback2
	// BindTransformFeedback : (target: GLenum, id: GLuint) #foreign;
	// DeleteTransformFeedbacks : (n: GLsizei, ids: *GLuint) #foreign;
	// GenTransformFeedbacks : (n: GLsizei, ids: *GLuint) #foreign;
	// IsTransformFeedback : (id: GLuint) -> GLboolean #foreign;
	// PauseTransformFeedback : () #foreign;
	// ResumeTransformFeedback : () #foreign;
	// DrawTransformFeedback : (mode: GLenum, id: GLuint) #foreign;
	
	// ARB_transform_feedback3
	// DrawTransformFeedbackStream : (mode: GLenum, id: GLuint, stream: GLuint) #foreign;
	// BeginQueryIndexed : (target: GLenum, index: GLuint, id: GLuint) #foreign;
	// EndQueryIndexed : (target: GLenum, index: GLuint) #foreign;
	// GetQueryIndexediv : (target: GLenum, index: GLuint, pname: GLenum, params: *GLint) #foreign;
	
	// ARB_transform_feedback_instanced
	// DrawTransformFeedbackInstanced : (mode: GLenum, id: GLuint, instancecount: GLsizei) #foreign;
	// DrawTransformFeedbackStreamInstanced : (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) #foreign;
	
	// ARB_transform_feedback_overflow_query
	
	// ARB_transpose_matrix
	LoadTransposeMatrixfARB : (m: *GLfloat) #foreign;
	LoadTransposeMatrixdARB : (m: *GLdouble) #foreign;
	MultTransposeMatrixfARB : (m: *GLfloat) #foreign;
	MultTransposeMatrixdARB : (m: *GLdouble) #foreign;
	
	// ARB_uniform_buffer_object
	// GetUniformIndices : (program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) #foreign;
	// GetActiveUniformsiv : (program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) #foreign;
	// GetActiveUniformName : (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformName: *GLchar) #foreign;
	// GetUniformBlockIndex : (program: GLuint, uniformBlockName: *GLchar) -> GLuint #foreign;
	// GetActiveUniformBlockiv : (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) #foreign;
	// GetActiveUniformBlockName : (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) #foreign;
	// UniformBlockBinding : (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) #foreign;
	// BindBufferRange : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
	// BindBufferBase : (target: GLenum, index: GLuint, buffer: GLuint) #foreign;
	// GetIntegeri_v : (target: GLenum, index: GLuint, data: *GLint) #foreign;
	
	// ARB_vertex_array_bgra
	
	// ARB_vertex_array_object
	// BindVertexArray : (array: GLuint) #foreign;
	// DeleteVertexArrays : (n: GLsizei, arrays: *GLuint) #foreign;
	// GenVertexArrays : (n: GLsizei, arrays: *GLuint) #foreign;
	// IsVertexArray : (array: GLuint) -> GLboolean #foreign;
	
	// ARB_vertex_attrib_64bit
	// VertexAttribL1d : (index: GLuint, x: GLdouble) #foreign;
	// VertexAttribL2d : (index: GLuint, x: GLdouble, y: GLdouble) #foreign;
	// VertexAttribL3d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	// VertexAttribL4d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	// VertexAttribL1dv : (index: GLuint, v: *GLdouble) #foreign;
	// VertexAttribL2dv : (index: GLuint, v: *GLdouble) #foreign;
	// VertexAttribL3dv : (index: GLuint, v: *GLdouble) #foreign;
	// VertexAttribL4dv : (index: GLuint, v: *GLdouble) #foreign;
	// VertexAttribLPointer : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	// GetVertexAttribLdv : (index: GLuint, pname: GLenum, params: *GLdouble) #foreign;
	
	// ARB_vertex_attrib_binding
	// BindVertexBuffer : (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) #foreign;
	// VertexAttribFormat : (attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) #foreign;
	// VertexAttribIFormat : (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
	// VertexAttribLFormat : (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
	// VertexAttribBinding : (attribindex: GLuint, bindingindex: GLuint) #foreign;
	// VertexBindingDivisor : (bindingindex: GLuint, divisor: GLuint) #foreign;
	
	// ARB_vertex_blend
	WeightbvARB : (size: GLint, weights: *GLbyte) #foreign;
	WeightsvARB : (size: GLint, weights: *GLshort) #foreign;
	WeightivARB : (size: GLint, weights: *GLint) #foreign;
	WeightfvARB : (size: GLint, weights: *GLfloat) #foreign;
	WeightdvARB : (size: GLint, weights: *GLdouble) #foreign;
	WeightubvARB : (size: GLint, weights: *GLubyte) #foreign;
	WeightusvARB : (size: GLint, weights: *GLushort) #foreign;
	WeightuivARB : (size: GLint, weights: *GLuint) #foreign;
	WeightPointerARB : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	VertexBlendARB : (count: GLint) #foreign;
	
	// ARB_vertex_buffer_object
	BindBufferARB : (target: GLenum, buffer: GLuint) #foreign;
	DeleteBuffersARB : (n: GLsizei, buffers: *GLuint) #foreign;
	GenBuffersARB : (n: GLsizei, buffers: *GLuint) #foreign;
	IsBufferARB : (buffer: GLuint) -> GLboolean #foreign;
	BufferDataARB : (target: GLenum, size: GLsizeiptrARB, data: *void, usage: GLenum) #foreign;
	BufferSubDataARB : (target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *void) #foreign;
	GetBufferSubDataARB : (target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *void) #foreign;
	MapBufferARB : (target: GLenum, access: GLenum) #foreign;
	UnmapBufferARB : (target: GLenum) -> GLboolean #foreign;
	GetBufferParameterivARB : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetBufferPointervARB : (target: GLenum, pname: GLenum, params: **void) #foreign;
	
	// ARB_vertex_program
	VertexAttrib1dARB : (index: GLuint, x: GLdouble) #foreign;
	VertexAttrib1dvARB : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttrib1fARB : (index: GLuint, x: GLfloat) #foreign;
	VertexAttrib1fvARB : (index: GLuint, v: *GLfloat) #foreign;
	VertexAttrib1sARB : (index: GLuint, x: GLshort) #foreign;
	VertexAttrib1svARB : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib2dARB : (index: GLuint, x: GLdouble, y: GLdouble) #foreign;
	VertexAttrib2dvARB : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttrib2fARB : (index: GLuint, x: GLfloat, y: GLfloat) #foreign;
	VertexAttrib2fvARB : (index: GLuint, v: *GLfloat) #foreign;
	VertexAttrib2sARB : (index: GLuint, x: GLshort, y: GLshort) #foreign;
	VertexAttrib2svARB : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib3dARB : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	VertexAttrib3dvARB : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttrib3fARB : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	VertexAttrib3fvARB : (index: GLuint, v: *GLfloat) #foreign;
	VertexAttrib3sARB : (index: GLuint, x: GLshort, y: GLshort, z: GLshort) #foreign;
	VertexAttrib3svARB : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib4NbvARB : (index: GLuint, v: *GLbyte) #foreign;
	VertexAttrib4NivARB : (index: GLuint, v: *GLint) #foreign;
	VertexAttrib4NsvARB : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib4NubARB : (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) #foreign;
	VertexAttrib4NubvARB : (index: GLuint, v: *GLubyte) #foreign;
	VertexAttrib4NuivARB : (index: GLuint, v: *GLuint) #foreign;
	VertexAttrib4NusvARB : (index: GLuint, v: *GLushort) #foreign;
	VertexAttrib4bvARB : (index: GLuint, v: *GLbyte) #foreign;
	VertexAttrib4dARB : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	VertexAttrib4dvARB : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttrib4fARB : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	VertexAttrib4fvARB : (index: GLuint, v: *GLfloat) #foreign;
	VertexAttrib4ivARB : (index: GLuint, v: *GLint) #foreign;
	VertexAttrib4sARB : (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) #foreign;
	VertexAttrib4svARB : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib4ubvARB : (index: GLuint, v: *GLubyte) #foreign;
	VertexAttrib4uivARB : (index: GLuint, v: *GLuint) #foreign;
	VertexAttrib4usvARB : (index: GLuint, v: *GLushort) #foreign;
	VertexAttribPointerARB : (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *void) #foreign;
	EnableVertexAttribArrayARB : (index: GLuint) #foreign;
	DisableVertexAttribArrayARB : (index: GLuint) #foreign;
	// ProgramStringARB : (target: GLenum, format: GLenum, len: GLsizei, str: *void) #foreign;
	// BindProgramARB : (target: GLenum, program: GLuint) #foreign;
	// DeleteProgramsARB : (n: GLsizei, programs: *GLuint) #foreign;
	// GenProgramsARB : (n: GLsizei, programs: *GLuint) #foreign;
	// ProgramEnvParameter4dARB : (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	// ProgramEnvParameter4dvARB : (target: GLenum, index: GLuint, params: *GLdouble) #foreign;
	// ProgramEnvParameter4fARB : (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	// ProgramEnvParameter4fvARB : (target: GLenum, index: GLuint, params: *GLfloat) #foreign;
	// ProgramLocalParameter4dARB : (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	// ProgramLocalParameter4dvARB : (target: GLenum, index: GLuint, params: *GLdouble) #foreign;
	// ProgramLocalParameter4fARB : (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	// ProgramLocalParameter4fvARB : (target: GLenum, index: GLuint, params: *GLfloat) #foreign;
	// GetProgramEnvParameterdvARB : (target: GLenum, index: GLuint, params: *GLdouble) #foreign;
	// GetProgramEnvParameterfvARB : (target: GLenum, index: GLuint, params: *GLfloat) #foreign;
	// GetProgramLocalParameterdvARB : (target: GLenum, index: GLuint, params: *GLdouble) #foreign;
	// GetProgramLocalParameterfvARB : (target: GLenum, index: GLuint, params: *GLfloat) #foreign;
	// GetProgramivARB : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	// GetProgramStringARB : (target: GLenum, pname: GLenum, str: *void) #foreign;
	GetVertexAttribdvARB : (index: GLuint, pname: GLenum, params: *GLdouble) #foreign;
	GetVertexAttribfvARB : (index: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	GetVertexAttribivARB : (index: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetVertexAttribPointervARB : (index: GLuint, pname: GLenum, pointer: **void) #foreign;
	// IsProgramARB : (program: GLuint) -> GLboolean #foreign;
	
	// ARB_vertex_shader
	// VertexAttrib1fARB : (index: GLuint, x: GLfloat) #foreign;
	// VertexAttrib1sARB : (index: GLuint, x: GLshort) #foreign;
	// VertexAttrib1dARB : (index: GLuint, x: GLdouble) #foreign;
	// VertexAttrib2fARB : (index: GLuint, x: GLfloat, y: GLfloat) #foreign;
	// VertexAttrib2sARB : (index: GLuint, x: GLshort, y: GLshort) #foreign;
	// VertexAttrib2dARB : (index: GLuint, x: GLdouble, y: GLdouble) #foreign;
	// VertexAttrib3fARB : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	// VertexAttrib3sARB : (index: GLuint, x: GLshort, y: GLshort, z: GLshort) #foreign;
	// VertexAttrib3dARB : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	// VertexAttrib4fARB : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	// VertexAttrib4sARB : (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) #foreign;
	// VertexAttrib4dARB : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	// VertexAttrib4NubARB : (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) #foreign;
	// VertexAttrib1fvARB : (index: GLuint, v: *GLfloat) #foreign;
	// VertexAttrib1svARB : (index: GLuint, v: *GLshort) #foreign;
	// VertexAttrib1dvARB : (index: GLuint, v: *GLdouble) #foreign;
	// VertexAttrib2fvARB : (index: GLuint, v: *GLfloat) #foreign;
	// VertexAttrib2svARB : (index: GLuint, v: *GLshort) #foreign;
	// VertexAttrib2dvARB : (index: GLuint, v: *GLdouble) #foreign;
	// VertexAttrib3fvARB : (index: GLuint, v: *GLfloat) #foreign;
	// VertexAttrib3svARB : (index: GLuint, v: *GLshort) #foreign;
	// VertexAttrib3dvARB : (index: GLuint, v: *GLdouble) #foreign;
	// VertexAttrib4fvARB : (index: GLuint, v: *GLfloat) #foreign;
	// VertexAttrib4svARB : (index: GLuint, v: *GLshort) #foreign;
	// VertexAttrib4dvARB : (index: GLuint, v: *GLdouble) #foreign;
	// VertexAttrib4ivARB : (index: GLuint, v: *GLint) #foreign;
	// VertexAttrib4bvARB : (index: GLuint, v: *GLbyte) #foreign;
	// VertexAttrib4ubvARB : (index: GLuint, v: *GLubyte) #foreign;
	// VertexAttrib4usvARB : (index: GLuint, v: *GLushort) #foreign;
	// VertexAttrib4uivARB : (index: GLuint, v: *GLuint) #foreign;
	// VertexAttrib4NbvARB : (index: GLuint, v: *GLbyte) #foreign;
	// VertexAttrib4NsvARB : (index: GLuint, v: *GLshort) #foreign;
	// VertexAttrib4NivARB : (index: GLuint, v: *GLint) #foreign;
	// VertexAttrib4NubvARB : (index: GLuint, v: *GLubyte) #foreign;
	// VertexAttrib4NusvARB : (index: GLuint, v: *GLushort) #foreign;
	// VertexAttrib4NuivARB : (index: GLuint, v: *GLuint) #foreign;
	// VertexAttribPointerARB : (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *void) #foreign;
	// EnableVertexAttribArrayARB : (index: GLuint) #foreign;
	// DisableVertexAttribArrayARB : (index: GLuint) #foreign;
	BindAttribLocationARB : (programObj: GLhandleARB, index: GLuint, name: *GLcharARB) #foreign;
	GetActiveAttribARB : (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLcharARB) #foreign;
	GetAttribLocationARB : (programObj: GLhandleARB, name: *GLcharARB) -> GLint #foreign;
	// GetVertexAttribdvARB : (index: GLuint, pname: GLenum, params: *GLdouble) #foreign;
	// GetVertexAttribfvARB : (index: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	// GetVertexAttribivARB : (index: GLuint, pname: GLenum, params: *GLint) #foreign;
	// GetVertexAttribPointervARB : (index: GLuint, pname: GLenum, pointer: **void) #foreign;
	
	// ARB_vertex_type_10f_11f_11f_rev
	
	// ARB_vertex_type_2_10_10_10_rev
	// VertexAttribP1ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #foreign;
	// VertexAttribP1uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #foreign;
	// VertexAttribP2ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #foreign;
	// VertexAttribP2uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #foreign;
	// VertexAttribP3ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #foreign;
	// VertexAttribP3uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #foreign;
	// VertexAttribP4ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #foreign;
	// VertexAttribP4uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #foreign;
	// VertexP2ui : (type: GLenum, value: GLuint) #foreign;
	// VertexP2uiv : (type: GLenum, value: *GLuint) #foreign;
	// VertexP3ui : (type: GLenum, value: GLuint) #foreign;
	// VertexP3uiv : (type: GLenum, value: *GLuint) #foreign;
	// VertexP4ui : (type: GLenum, value: GLuint) #foreign;
	// VertexP4uiv : (type: GLenum, value: *GLuint) #foreign;
	// TexCoordP1ui : (type: GLenum, coords: GLuint) #foreign;
	// TexCoordP1uiv : (type: GLenum, coords: *GLuint) #foreign;
	// TexCoordP2ui : (type: GLenum, coords: GLuint) #foreign;
	// TexCoordP2uiv : (type: GLenum, coords: *GLuint) #foreign;
	// TexCoordP3ui : (type: GLenum, coords: GLuint) #foreign;
	// TexCoordP3uiv : (type: GLenum, coords: *GLuint) #foreign;
	// TexCoordP4ui : (type: GLenum, coords: GLuint) #foreign;
	// TexCoordP4uiv : (type: GLenum, coords: *GLuint) #foreign;
	// MultiTexCoordP1ui : (texture: GLenum, type: GLenum, coords: GLuint) #foreign;
	// MultiTexCoordP1uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #foreign;
	// MultiTexCoordP2ui : (texture: GLenum, type: GLenum, coords: GLuint) #foreign;
	// MultiTexCoordP2uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #foreign;
	// MultiTexCoordP3ui : (texture: GLenum, type: GLenum, coords: GLuint) #foreign;
	// MultiTexCoordP3uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #foreign;
	// MultiTexCoordP4ui : (texture: GLenum, type: GLenum, coords: GLuint) #foreign;
	// MultiTexCoordP4uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #foreign;
	// NormalP3ui : (type: GLenum, coords: GLuint) #foreign;
	// NormalP3uiv : (type: GLenum, coords: *GLuint) #foreign;
	// ColorP3ui : (type: GLenum, color: GLuint) #foreign;
	// ColorP3uiv : (type: GLenum, color: *GLuint) #foreign;
	// ColorP4ui : (type: GLenum, color: GLuint) #foreign;
	// ColorP4uiv : (type: GLenum, color: *GLuint) #foreign;
	// SecondaryColorP3ui : (type: GLenum, color: GLuint) #foreign;
	// SecondaryColorP3uiv : (type: GLenum, color: *GLuint) #foreign;
	
	// ARB_viewport_array
	// ViewportArrayv : (first: GLuint, count: GLsizei, v: *GLfloat) #foreign;
	// ViewportIndexedf : (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) #foreign;
	// ViewportIndexedfv : (index: GLuint, v: *GLfloat) #foreign;
	// ScissorArrayv : (first: GLuint, count: GLsizei, v: *GLint) #foreign;
	// ScissorIndexed : (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) #foreign;
	// ScissorIndexedv : (index: GLuint, v: *GLint) #foreign;
	// DepthRangeArrayv : (first: GLuint, count: GLsizei, v: *GLdouble) #foreign;
	// DepthRangeIndexed : (index: GLuint, n: GLdouble, f: GLdouble) #foreign;
	// GetFloati_v : (target: GLenum, index: GLuint, data: *GLfloat) #foreign;
	// GetDoublei_v : (target: GLenum, index: GLuint, data: *GLdouble) #foreign;
	
	// ARB_window_pos
	WindowPos2dARB : (x: GLdouble, y: GLdouble) #foreign;
	WindowPos2dvARB : (v: *GLdouble) #foreign;
	WindowPos2fARB : (x: GLfloat, y: GLfloat) #foreign;
	WindowPos2fvARB : (v: *GLfloat) #foreign;
	WindowPos2iARB : (x: GLint, y: GLint) #foreign;
	WindowPos2ivARB : (v: *GLint) #foreign;
	WindowPos2sARB : (x: GLshort, y: GLshort) #foreign;
	WindowPos2svARB : (v: *GLshort) #foreign;
	WindowPos3dARB : (x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	WindowPos3dvARB : (v: *GLdouble) #foreign;
	WindowPos3fARB : (x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	WindowPos3fvARB : (v: *GLfloat) #foreign;
	WindowPos3iARB : (x: GLint, y: GLint, z: GLint) #foreign;
	WindowPos3ivARB : (v: *GLint) #foreign;
	WindowPos3sARB : (x: GLshort, y: GLshort, z: GLshort) #foreign;
	WindowPos3svARB : (v: *GLshort) #foreign;
	
	// ATI_draw_buffers
	DrawBuffersATI : (n: GLsizei, bufs: *GLenum) #foreign;
	
	// ATI_element_array
	ElementPointerATI : (type: GLenum, pointer: *void) #foreign;
	DrawElementArrayATI : (mode: GLenum, count: GLsizei) #foreign;
	DrawRangeElementArrayATI : (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei) #foreign;
	
	// ATI_envmap_bumpmap
	TexBumpParameterivATI : (pname: GLenum, param: *GLint) #foreign;
	TexBumpParameterfvATI : (pname: GLenum, param: *GLfloat) #foreign;
	GetTexBumpParameterivATI : (pname: GLenum, param: *GLint) #foreign;
	GetTexBumpParameterfvATI : (pname: GLenum, param: *GLfloat) #foreign;
	
	// ATI_fragment_shader
	GenFragmentShadersATI : (range: GLuint) -> GLuint #foreign;
	BindFragmentShaderATI : (id: GLuint) #foreign;
	DeleteFragmentShaderATI : (id: GLuint) #foreign;
	BeginFragmentShaderATI : () #foreign;
	EndFragmentShaderATI : () #foreign;
	PassTexCoordATI : (dst: GLuint, coord: GLuint, swizzle: GLenum) #foreign;
	SampleMapATI : (dst: GLuint, interp: GLuint, swizzle: GLenum) #foreign;
	ColorFragmentOp1ATI : (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) #foreign;
	ColorFragmentOp2ATI : (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) #foreign;
	ColorFragmentOp3ATI : (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) #foreign;
	AlphaFragmentOp1ATI : (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) #foreign;
	AlphaFragmentOp2ATI : (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) #foreign;
	AlphaFragmentOp3ATI : (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) #foreign;
	SetFragmentShaderConstantATI : (dst: GLuint, value: *GLfloat) #foreign;
	
	// ATI_map_object_buffer
	MapObjectBufferATI : (buffer: GLuint) #foreign;
	UnmapObjectBufferATI : (buffer: GLuint) #foreign;
	
	// ATI_meminfo
	
	// ATI_pixel_format_float
	
	// ATI_pn_triangles
	PNTrianglesiATI : (pname: GLenum, param: GLint) #foreign;
	PNTrianglesfATI : (pname: GLenum, param: GLfloat) #foreign;
	
	// ATI_separate_stencil
	StencilOpSeparateATI : (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) #foreign;
	StencilFuncSeparateATI : (frontfunc: GLenum, backfunc: GLenum, ref: GLint, mask: GLuint) #foreign;
	
	// ATI_text_fragment_shader
	
	// ATI_texture_env_combine3
	
	// ATI_texture_float
	
	// ATI_texture_mirror_once
	
	// ATI_vertex_array_object
	NewObjectBufferATI : (size: GLsizei, pointer: *void, usage: GLenum) -> GLuint #foreign;
	IsObjectBufferATI : (buffer: GLuint) -> GLboolean #foreign;
	UpdateObjectBufferATI : (buffer: GLuint, offset: GLuint, size: GLsizei, pointer: *void, preserve: GLenum) #foreign;
	GetObjectBufferfvATI : (buffer: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	GetObjectBufferivATI : (buffer: GLuint, pname: GLenum, params: *GLint) #foreign;
	FreeObjectBufferATI : (buffer: GLuint) #foreign;
	ArrayObjectATI : (array: GLenum, size: GLint, type: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) #foreign;
	GetArrayObjectfvATI : (array: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetArrayObjectivATI : (array: GLenum, pname: GLenum, params: *GLint) #foreign;
	VariantArrayObjectATI : (id: GLuint, type: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) #foreign;
	GetVariantArrayObjectfvATI : (id: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	GetVariantArrayObjectivATI : (id: GLuint, pname: GLenum, params: *GLint) #foreign;
	
	// ATI_vertex_attrib_array_object
	VertexAttribArrayObjectATI : (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint) #foreign;
	GetVertexAttribArrayObjectfvATI : (index: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	GetVertexAttribArrayObjectivATI : (index: GLuint, pname: GLenum, params: *GLint) #foreign;
	
	// ATI_vertex_streams
	VertexStream1sATI : (stream: GLenum, x: GLshort) #foreign;
	VertexStream1svATI : (stream: GLenum, coords: *GLshort) #foreign;
	VertexStream1iATI : (stream: GLenum, x: GLint) #foreign;
	VertexStream1ivATI : (stream: GLenum, coords: *GLint) #foreign;
	VertexStream1fATI : (stream: GLenum, x: GLfloat) #foreign;
	VertexStream1fvATI : (stream: GLenum, coords: *GLfloat) #foreign;
	VertexStream1dATI : (stream: GLenum, x: GLdouble) #foreign;
	VertexStream1dvATI : (stream: GLenum, coords: *GLdouble) #foreign;
	VertexStream2sATI : (stream: GLenum, x: GLshort, y: GLshort) #foreign;
	VertexStream2svATI : (stream: GLenum, coords: *GLshort) #foreign;
	VertexStream2iATI : (stream: GLenum, x: GLint, y: GLint) #foreign;
	VertexStream2ivATI : (stream: GLenum, coords: *GLint) #foreign;
	VertexStream2fATI : (stream: GLenum, x: GLfloat, y: GLfloat) #foreign;
	VertexStream2fvATI : (stream: GLenum, coords: *GLfloat) #foreign;
	VertexStream2dATI : (stream: GLenum, x: GLdouble, y: GLdouble) #foreign;
	VertexStream2dvATI : (stream: GLenum, coords: *GLdouble) #foreign;
	VertexStream3sATI : (stream: GLenum, x: GLshort, y: GLshort, z: GLshort) #foreign;
	VertexStream3svATI : (stream: GLenum, coords: *GLshort) #foreign;
	VertexStream3iATI : (stream: GLenum, x: GLint, y: GLint, z: GLint) #foreign;
	VertexStream3ivATI : (stream: GLenum, coords: *GLint) #foreign;
	VertexStream3fATI : (stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	VertexStream3fvATI : (stream: GLenum, coords: *GLfloat) #foreign;
	VertexStream3dATI : (stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	VertexStream3dvATI : (stream: GLenum, coords: *GLdouble) #foreign;
	VertexStream4sATI : (stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) #foreign;
	VertexStream4svATI : (stream: GLenum, coords: *GLshort) #foreign;
	VertexStream4iATI : (stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) #foreign;
	VertexStream4ivATI : (stream: GLenum, coords: *GLint) #foreign;
	VertexStream4fATI : (stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	VertexStream4fvATI : (stream: GLenum, coords: *GLfloat) #foreign;
	VertexStream4dATI : (stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	VertexStream4dvATI : (stream: GLenum, coords: *GLdouble) #foreign;
	NormalStream3bATI : (stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) #foreign;
	NormalStream3bvATI : (stream: GLenum, coords: *GLbyte) #foreign;
	NormalStream3sATI : (stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) #foreign;
	NormalStream3svATI : (stream: GLenum, coords: *GLshort) #foreign;
	NormalStream3iATI : (stream: GLenum, nx: GLint, ny: GLint, nz: GLint) #foreign;
	NormalStream3ivATI : (stream: GLenum, coords: *GLint) #foreign;
	NormalStream3fATI : (stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) #foreign;
	NormalStream3fvATI : (stream: GLenum, coords: *GLfloat) #foreign;
	NormalStream3dATI : (stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) #foreign;
	NormalStream3dvATI : (stream: GLenum, coords: *GLdouble) #foreign;
	ClientActiveVertexStreamATI : (stream: GLenum) #foreign;
	VertexBlendEnviATI : (pname: GLenum, param: GLint) #foreign;
	VertexBlendEnvfATI : (pname: GLenum, param: GLfloat) #foreign;
	
	// EXT_422_pixels
	
	// EXT_abgr
	
	// EXT_bgra
	
	// EXT_bindable_uniform
	UniformBufferEXT : (program: GLuint, location: GLint, buffer: GLuint) #foreign;
	GetUniformBufferSizeEXT : (program: GLuint, location: GLint) -> GLint #foreign;
	GetUniformOffsetEXT : (program: GLuint, location: GLint) -> GLintptr #foreign;
	
	// EXT_blend_color
	BlendColorEXT : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign;
	
	// EXT_blend_equation_separate
	BlendEquationSeparateEXT : (modeRGB: GLenum, modeAlpha: GLenum) #foreign;
	
	// EXT_blend_func_separate
	BlendFuncSeparateEXT : (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) #foreign;
	
	// EXT_blend_logic_op
	
	// EXT_blend_minmax
	BlendEquationEXT : (mode: GLenum) #foreign;
	
	// EXT_blend_subtract
	
	// EXT_clip_volume_hint
	
	// EXT_cmyka
	
	// EXT_color_subtable
	ColorSubTableEXT : (target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type: GLenum, data: *void) #foreign;
	CopyColorSubTableEXT : (target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) #foreign;
	
	// EXT_compiled_vertex_array
	LockArraysEXT : (first: GLint, count: GLsizei) #foreign;
	UnlockArraysEXT : () #foreign;
	
	// EXT_convolution
	ConvolutionFilter1DEXT : (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, image: *void) #foreign;
	ConvolutionFilter2DEXT : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, image: *void) #foreign;
	ConvolutionParameterfEXT : (target: GLenum, pname: GLenum, params: GLfloat) #foreign;
	ConvolutionParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	ConvolutionParameteriEXT : (target: GLenum, pname: GLenum, params: GLint) #foreign;
	ConvolutionParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	CopyConvolutionFilter1DEXT : (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) #foreign;
	CopyConvolutionFilter2DEXT : (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	GetConvolutionFilterEXT : (target: GLenum, format: GLenum, type: GLenum, image: *void) #foreign;
	GetConvolutionParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetConvolutionParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetSeparableFilterEXT : (target: GLenum, format: GLenum, type: GLenum, row: *void, column: *void, span: *void) #foreign;
	SeparableFilter2DEXT : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, row: *void, column: *void) #foreign;
	
	// EXT_coordinate_frame
	Tangent3bEXT : (tx: GLbyte, ty: GLbyte, tz: GLbyte) #foreign;
	Tangent3bvEXT : (v: *GLbyte) #foreign;
	Tangent3dEXT : (tx: GLdouble, ty: GLdouble, tz: GLdouble) #foreign;
	Tangent3dvEXT : (v: *GLdouble) #foreign;
	Tangent3fEXT : (tx: GLfloat, ty: GLfloat, tz: GLfloat) #foreign;
	Tangent3fvEXT : (v: *GLfloat) #foreign;
	Tangent3iEXT : (tx: GLint, ty: GLint, tz: GLint) #foreign;
	Tangent3ivEXT : (v: *GLint) #foreign;
	Tangent3sEXT : (tx: GLshort, ty: GLshort, tz: GLshort) #foreign;
	Tangent3svEXT : (v: *GLshort) #foreign;
	Binormal3bEXT : (bx: GLbyte, by: GLbyte, bz: GLbyte) #foreign;
	Binormal3bvEXT : (v: *GLbyte) #foreign;
	Binormal3dEXT : (bx: GLdouble, by: GLdouble, bz: GLdouble) #foreign;
	Binormal3dvEXT : (v: *GLdouble) #foreign;
	Binormal3fEXT : (bx: GLfloat, by: GLfloat, bz: GLfloat) #foreign;
	Binormal3fvEXT : (v: *GLfloat) #foreign;
	Binormal3iEXT : (bx: GLint, by: GLint, bz: GLint) #foreign;
	Binormal3ivEXT : (v: *GLint) #foreign;
	Binormal3sEXT : (bx: GLshort, by: GLshort, bz: GLshort) #foreign;
	Binormal3svEXT : (v: *GLshort) #foreign;
	TangentPointerEXT : (type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	BinormalPointerEXT : (type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	
	// EXT_copy_texture
	CopyTexImage1DEXT : (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) #foreign;
	CopyTexImage2DEXT : (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) #foreign;
	CopyTexSubImage1DEXT : (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #foreign;
	CopyTexSubImage2DEXT : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	CopyTexSubImage3DEXT : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	
	// EXT_cull_vertex
	CullParameterdvEXT : (pname: GLenum, params: *GLdouble) #foreign;
	CullParameterfvEXT : (pname: GLenum, params: *GLfloat) #foreign;
	
	// EXT_debug_label
	LabelObjectEXT : (type: GLenum, object: GLuint, length: GLsizei, label: *GLchar) #foreign;
	GetObjectLabelEXT : (type: GLenum, object: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;
	
	// EXT_debug_marker
	InsertEventMarkerEXT : (length: GLsizei, marker: *GLchar) #foreign;
	PushGroupMarkerEXT : (length: GLsizei, marker: *GLchar) #foreign;
	PopGroupMarkerEXT : () #foreign;
	
	// EXT_depth_bounds_test
	DepthBoundsEXT : (zmin: GLclampd, zmax: GLclampd) #foreign;
	
	// EXT_direct_state_access
	MatrixLoadfEXT : (mode: GLenum, m: *GLfloat) #foreign;
	MatrixLoaddEXT : (mode: GLenum, m: *GLdouble) #foreign;
	MatrixMultfEXT : (mode: GLenum, m: *GLfloat) #foreign;
	MatrixMultdEXT : (mode: GLenum, m: *GLdouble) #foreign;
	MatrixLoadIdentityEXT : (mode: GLenum) #foreign;
	MatrixRotatefEXT : (mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	MatrixRotatedEXT : (mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	MatrixScalefEXT : (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	MatrixScaledEXT : (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	MatrixTranslatefEXT : (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	MatrixTranslatedEXT : (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	MatrixFrustumEXT : (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #foreign;
	MatrixOrthoEXT : (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #foreign;
	MatrixPopEXT : (mode: GLenum) #foreign;
	MatrixPushEXT : (mode: GLenum) #foreign;
	ClientAttribDefaultEXT : (mask: GLbitfield) #foreign;
	PushClientAttribDefaultEXT : (mask: GLbitfield) #foreign;
	TextureParameterfEXT : (texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) #foreign;
	TextureParameterfvEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	TextureParameteriEXT : (texture: GLuint, target: GLenum, pname: GLenum, param: GLint) #foreign;
	TextureParameterivEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) #foreign;
	TextureImage1DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	TextureImage2DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	TextureSubImage1DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	TextureSubImage2DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	CopyTextureImage1DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) #foreign;
	CopyTextureImage2DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) #foreign;
	CopyTextureSubImage1DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #foreign;
	CopyTextureSubImage2DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	GetTextureImageEXT : (texture: GLuint, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	GetTextureParameterfvEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetTextureParameterivEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetTextureLevelParameterfvEXT : (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) #foreign;
	GetTextureLevelParameterivEXT : (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLint) #foreign;
	TextureImage3DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	TextureSubImage3DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	CopyTextureSubImage3DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	BindMultiTextureEXT : (texunit: GLenum, target: GLenum, texture: GLuint) #foreign;
	MultiTexCoordPointerEXT : (texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	MultiTexEnvfEXT : (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) #foreign;
	MultiTexEnvfvEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	MultiTexEnviEXT : (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) #foreign;
	MultiTexEnvivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) #foreign;
	MultiTexGendEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) #foreign;
	MultiTexGendvEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) #foreign;
	MultiTexGenfEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) #foreign;
	MultiTexGenfvEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	MultiTexGeniEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) #foreign;
	MultiTexGenivEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetMultiTexEnvfvEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetMultiTexEnvivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetMultiTexGendvEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) #foreign;
	GetMultiTexGenfvEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetMultiTexGenivEXT : (texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) #foreign;
	MultiTexParameteriEXT : (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) #foreign;
	MultiTexParameterivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) #foreign;
	MultiTexParameterfEXT : (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) #foreign;
	MultiTexParameterfvEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	MultiTexImage1DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	MultiTexImage2DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	MultiTexSubImage1DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	MultiTexSubImage2DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	CopyMultiTexImage1DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) #foreign;
	CopyMultiTexImage2DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) #foreign;
	CopyMultiTexSubImage1DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #foreign;
	CopyMultiTexSubImage2DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	GetMultiTexImageEXT : (texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	GetMultiTexParameterfvEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetMultiTexParameterivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetMultiTexLevelParameterfvEXT : (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) #foreign;
	GetMultiTexLevelParameterivEXT : (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLint) #foreign;
	MultiTexImage3DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	MultiTexSubImage3DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	CopyMultiTexSubImage3DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
	EnableClientStateIndexedEXT : (array: GLenum, index: GLuint) #foreign;
	DisableClientStateIndexedEXT : (array: GLenum, index: GLuint) #foreign;
	GetFloatIndexedvEXT : (target: GLenum, index: GLuint, data: *GLfloat) #foreign;
	GetDoubleIndexedvEXT : (target: GLenum, index: GLuint, data: *GLdouble) #foreign;
	GetPointerIndexedvEXT : (target: GLenum, index: GLuint, data: **void) #foreign;
	EnableIndexedEXT : (target: GLenum, index: GLuint) #foreign;
	DisableIndexedEXT : (target: GLenum, index: GLuint) #foreign;
	IsEnabledIndexedEXT : (target: GLenum, index: GLuint) -> GLboolean #foreign;
	GetIntegerIndexedvEXT : (target: GLenum, index: GLuint, data: *GLint) #foreign;
	GetBooleanIndexedvEXT : (target: GLenum, index: GLuint, data: *GLboolean) #foreign;
	CompressedTextureImage3DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) #foreign;
	CompressedTextureImage2DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) #foreign;
	CompressedTextureImage1DEXT : (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) #foreign;
	CompressedTextureSubImage3DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) #foreign;
	CompressedTextureSubImage2DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) #foreign;
	CompressedTextureSubImage1DEXT : (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) #foreign;
	GetCompressedTextureImageEXT : (texture: GLuint, target: GLenum, lod: GLint, img: *void) #foreign;
	CompressedMultiTexImage3DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) #foreign;
	CompressedMultiTexImage2DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) #foreign;
	CompressedMultiTexImage1DEXT : (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *void) #foreign;
	CompressedMultiTexSubImage3DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) #foreign;
	CompressedMultiTexSubImage2DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) #foreign;
	CompressedMultiTexSubImage1DEXT : (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *void) #foreign;
	GetCompressedMultiTexImageEXT : (texunit: GLenum, target: GLenum, lod: GLint, img: *void) #foreign;
	MatrixLoadTransposefEXT : (mode: GLenum, m: *GLfloat) #foreign;
	MatrixLoadTransposedEXT : (mode: GLenum, m: *GLdouble) #foreign;
	MatrixMultTransposefEXT : (mode: GLenum, m: *GLfloat) #foreign;
	MatrixMultTransposedEXT : (mode: GLenum, m: *GLdouble) #foreign;
	NamedBufferDataEXT : (buffer: GLuint, size: GLsizeiptr, data: *void, usage: GLenum) #foreign;
	NamedBufferSubDataEXT : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
	MapNamedBufferEXT : (buffer: GLuint, access: GLenum) #foreign;
	UnmapNamedBufferEXT : (buffer: GLuint) -> GLboolean #foreign;
	GetNamedBufferParameterivEXT : (buffer: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetNamedBufferPointervEXT : (buffer: GLuint, pname: GLenum, params: **void) #foreign;
	GetNamedBufferSubDataEXT : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
	ProgramUniform1fEXT : (program: GLuint, location: GLint, v0: GLfloat) #foreign;
	ProgramUniform2fEXT : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) #foreign;
	ProgramUniform3fEXT : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #foreign;
	ProgramUniform4fEXT : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #foreign;
	ProgramUniform1iEXT : (program: GLuint, location: GLint, v0: GLint) #foreign;
	ProgramUniform2iEXT : (program: GLuint, location: GLint, v0: GLint, v1: GLint) #foreign;
	ProgramUniform3iEXT : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) #foreign;
	ProgramUniform4iEXT : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #foreign;
	ProgramUniform1fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	ProgramUniform2fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	ProgramUniform3fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	ProgramUniform4fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	ProgramUniform1ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	ProgramUniform2ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	ProgramUniform3ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	ProgramUniform4ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	ProgramUniformMatrix2fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix3fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix2x3fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix3x2fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix2x4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix4x2fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix3x4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	ProgramUniformMatrix4x3fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	TextureBufferEXT : (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) #foreign;
	MultiTexBufferEXT : (texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) #foreign;
	TextureParameterIivEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) #foreign;
	TextureParameterIuivEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) #foreign;
	GetTextureParameterIivEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetTextureParameterIuivEXT : (texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) #foreign;
	MultiTexParameterIivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) #foreign;
	MultiTexParameterIuivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) #foreign;
	GetMultiTexParameterIivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetMultiTexParameterIuivEXT : (texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) #foreign;
	ProgramUniform1uiEXT : (program: GLuint, location: GLint, v0: GLuint) #foreign;
	ProgramUniform2uiEXT : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) #foreign;
	ProgramUniform3uiEXT : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #foreign;
	ProgramUniform4uiEXT : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #foreign;
	ProgramUniform1uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	ProgramUniform2uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	ProgramUniform3uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	ProgramUniform4uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	NamedProgramLocalParameters4fvEXT : (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) #foreign;
	NamedProgramLocalParameterI4iEXT : (program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) #foreign;
	NamedProgramLocalParameterI4ivEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLint) #foreign;
	NamedProgramLocalParametersI4ivEXT : (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLint) #foreign;
	NamedProgramLocalParameterI4uiEXT : (program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) #foreign;
	NamedProgramLocalParameterI4uivEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLuint) #foreign;
	NamedProgramLocalParametersI4uivEXT : (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) #foreign;
	GetNamedProgramLocalParameterIivEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLint) #foreign;
	GetNamedProgramLocalParameterIuivEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLuint) #foreign;
	EnableClientStateiEXT : (array: GLenum, index: GLuint) #foreign;
	DisableClientStateiEXT : (array: GLenum, index: GLuint) #foreign;
	GetFloati_vEXT : (pname: GLenum, index: GLuint, params: *GLfloat) #foreign;
	GetDoublei_vEXT : (pname: GLenum, index: GLuint, params: *GLdouble) #foreign;
	GetPointeri_vEXT : (pname: GLenum, index: GLuint, params: **void) #foreign;
	NamedProgramStringEXT : (program: GLuint, target: GLenum, format: GLenum, len: GLsizei, str: *void) #foreign;
	NamedProgramLocalParameter4dEXT : (program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	NamedProgramLocalParameter4dvEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) #foreign;
	NamedProgramLocalParameter4fEXT : (program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	NamedProgramLocalParameter4fvEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) #foreign;
	GetNamedProgramLocalParameterdvEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) #foreign;
	GetNamedProgramLocalParameterfvEXT : (program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) #foreign;
	GetNamedProgramivEXT : (program: GLuint, target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetNamedProgramStringEXT : (program: GLuint, target: GLenum, pname: GLenum, str: *void) #foreign;
	NamedRenderbufferStorageEXT : (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	GetNamedRenderbufferParameterivEXT : (renderbuffer: GLuint, pname: GLenum, params: *GLint) #foreign;
	NamedRenderbufferStorageMultisampleEXT : (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	NamedRenderbufferStorageMultisampleCoverageEXT : (renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	CheckNamedFramebufferStatusEXT : (framebuffer: GLuint, target: GLenum) -> GLenum #foreign;
	NamedFramebufferTexture1DEXT : (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #foreign;
	NamedFramebufferTexture2DEXT : (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #foreign;
	NamedFramebufferTexture3DEXT : (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) #foreign;
	NamedFramebufferRenderbufferEXT : (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #foreign;
	GetNamedFramebufferAttachmentParameterivEXT : (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) #foreign;
	GenerateTextureMipmapEXT : (texture: GLuint, target: GLenum) #foreign;
	GenerateMultiTexMipmapEXT : (texunit: GLenum, target: GLenum) #foreign;
	FramebufferDrawBufferEXT : (framebuffer: GLuint, mode: GLenum) #foreign;
	FramebufferDrawBuffersEXT : (framebuffer: GLuint, n: GLsizei, bufs: *GLenum) #foreign;
	FramebufferReadBufferEXT : (framebuffer: GLuint, mode: GLenum) #foreign;
	GetFramebufferParameterivEXT : (framebuffer: GLuint, pname: GLenum, params: *GLint) #foreign;
	NamedCopyBufferSubDataEXT : (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #foreign;
	NamedFramebufferTextureEXT : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) #foreign;
	NamedFramebufferTextureLayerEXT : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #foreign;
	NamedFramebufferTextureFaceEXT : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) #foreign;
	TextureRenderbufferEXT : (texture: GLuint, target: GLenum, renderbuffer: GLuint) #foreign;
	MultiTexRenderbufferEXT : (texunit: GLenum, target: GLenum, renderbuffer: GLuint) #foreign;
	VertexArrayVertexOffsetEXT : (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #foreign;
	VertexArrayColorOffsetEXT : (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #foreign;
	VertexArrayEdgeFlagOffsetEXT : (vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) #foreign;
	VertexArrayIndexOffsetEXT : (vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr) #foreign;
	VertexArrayNormalOffsetEXT : (vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr) #foreign;
	VertexArrayTexCoordOffsetEXT : (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #foreign;
	VertexArrayMultiTexCoordOffsetEXT : (vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #foreign;
	VertexArrayFogCoordOffsetEXT : (vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr) #foreign;
	VertexArraySecondaryColorOffsetEXT : (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #foreign;
	VertexArrayVertexAttribOffsetEXT : (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) #foreign;
	VertexArrayVertexAttribIOffsetEXT : (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #foreign;
	EnableVertexArrayEXT : (vaobj: GLuint, array: GLenum) #foreign;
	DisableVertexArrayEXT : (vaobj: GLuint, array: GLenum) #foreign;
	EnableVertexArrayAttribEXT : (vaobj: GLuint, index: GLuint) #foreign;
	DisableVertexArrayAttribEXT : (vaobj: GLuint, index: GLuint) #foreign;
	GetVertexArrayIntegervEXT : (vaobj: GLuint, pname: GLenum, param: *GLint) #foreign;
	GetVertexArrayPointervEXT : (vaobj: GLuint, pname: GLenum, param: **void) #foreign;
	GetVertexArrayIntegeri_vEXT : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) #foreign;
	GetVertexArrayPointeri_vEXT : (vaobj: GLuint, index: GLuint, pname: GLenum, param: **void) #foreign;
	MapNamedBufferRangeEXT : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) #foreign;
	FlushMappedNamedBufferRangeEXT : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) #foreign;
	NamedBufferStorageEXT : (buffer: GLuint, size: GLsizeiptr, data: *void, flags: GLbitfield) #foreign;
	ClearNamedBufferDataEXT : (buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) #foreign;
	ClearNamedBufferSubDataEXT : (buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) #foreign;
	NamedFramebufferParameteriEXT : (framebuffer: GLuint, pname: GLenum, param: GLint) #foreign;
	GetNamedFramebufferParameterivEXT : (framebuffer: GLuint, pname: GLenum, params: *GLint) #foreign;
	ProgramUniform1dEXT : (program: GLuint, location: GLint, x: GLdouble) #foreign;
	ProgramUniform2dEXT : (program: GLuint, location: GLint, x: GLdouble, y: GLdouble) #foreign;
	ProgramUniform3dEXT : (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	ProgramUniform4dEXT : (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	ProgramUniform1dvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	ProgramUniform2dvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	ProgramUniform3dvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	ProgramUniform4dvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
	ProgramUniformMatrix2dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix3dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix4dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix2x3dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix2x4dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix3x2dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix3x4dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix4x2dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	ProgramUniformMatrix4x3dvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
	TextureBufferRangeEXT : (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
	TextureStorage1DEXT : (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) #foreign;
	TextureStorage2DEXT : (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	TextureStorage3DEXT : (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) #foreign;
	TextureStorage2DMultisampleEXT : (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	TextureStorage3DMultisampleEXT : (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #foreign;
	VertexArrayBindVertexBufferEXT : (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) #foreign;
	VertexArrayVertexAttribFormatEXT : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) #foreign;
	VertexArrayVertexAttribIFormatEXT : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
	VertexArrayVertexAttribLFormatEXT : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
	VertexArrayVertexAttribBindingEXT : (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) #foreign;
	VertexArrayVertexBindingDivisorEXT : (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) #foreign;
	VertexArrayVertexAttribLOffsetEXT : (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) #foreign;
	TexturePageCommitmentEXT : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) #foreign;
	VertexArrayVertexAttribDivisorEXT : (vaobj: GLuint, index: GLuint, divisor: GLuint) #foreign;
	
	// EXT_draw_buffers2
	ColorMaskIndexedEXT : (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) #foreign;
	// GetBooleanIndexedvEXT : (target: GLenum, index: GLuint, data: *GLboolean) #foreign;
	// GetIntegerIndexedvEXT : (target: GLenum, index: GLuint, data: *GLint) #foreign;
	// EnableIndexedEXT : (target: GLenum, index: GLuint) #foreign;
	// DisableIndexedEXT : (target: GLenum, index: GLuint) #foreign;
	// IsEnabledIndexedEXT : (target: GLenum, index: GLuint) -> GLboolean #foreign;
	
	// EXT_draw_instanced
	DrawArraysInstancedEXT : (mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) #foreign;
	DrawElementsInstancedEXT : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, primcount: GLsizei) #foreign;
	
	// EXT_draw_range_elements
	DrawRangeElementsEXT : (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void) #foreign;
	
	// EXT_external_buffer
	// BufferStorageExternalEXT : (target: GLenum, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) #foreign;
	// NamedBufferStorageExternalEXT : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) #foreign;
	
	// EXT_fog_coord
	FogCoordfEXT : (coord: GLfloat) #foreign;
	FogCoordfvEXT : (coord: *GLfloat) #foreign;
	FogCoorddEXT : (coord: GLdouble) #foreign;
	FogCoorddvEXT : (coord: *GLdouble) #foreign;
	FogCoordPointerEXT : (type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	
	// EXT_framebuffer_blit
	BlitFramebufferEXT : (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #foreign;
	
	// EXT_framebuffer_multisample
	RenderbufferStorageMultisampleEXT : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	
	// EXT_framebuffer_multisample_blit_scaled
	
	// EXT_framebuffer_object
	IsRenderbufferEXT : (renderbuffer: GLuint) -> GLboolean #foreign;
	BindRenderbufferEXT : (target: GLenum, renderbuffer: GLuint) #foreign;
	DeleteRenderbuffersEXT : (n: GLsizei, renderbuffers: *GLuint) #foreign;
	GenRenderbuffersEXT : (n: GLsizei, renderbuffers: *GLuint) #foreign;
	RenderbufferStorageEXT : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	GetRenderbufferParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	IsFramebufferEXT : (framebuffer: GLuint) -> GLboolean #foreign;
	BindFramebufferEXT : (target: GLenum, framebuffer: GLuint) #foreign;
	DeleteFramebuffersEXT : (n: GLsizei, framebuffers: *GLuint) #foreign;
	GenFramebuffersEXT : (n: GLsizei, framebuffers: *GLuint) #foreign;
	CheckFramebufferStatusEXT : (target: GLenum) -> GLenum #foreign;
	FramebufferTexture1DEXT : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #foreign;
	FramebufferTexture2DEXT : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #foreign;
	FramebufferTexture3DEXT : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) #foreign;
	FramebufferRenderbufferEXT : (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #foreign;
	GetFramebufferAttachmentParameterivEXT : (target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) #foreign;
	GenerateMipmapEXT : (target: GLenum) #foreign;
	
	// EXT_framebuffer_sRGB
	
	// EXT_geometry_shader4
	ProgramParameteriEXT : (program: GLuint, pname: GLenum, value: GLint) #foreign;
	
	// EXT_gpu_program_parameters
	ProgramEnvParameters4fvEXT : (target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) #foreign;
	ProgramLocalParameters4fvEXT : (target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) #foreign;
	
	// EXT_gpu_shader4
	GetUniformuivEXT : (program: GLuint, location: GLint, params: *GLuint) #foreign;
	BindFragDataLocationEXT : (program: GLuint, color: GLuint, name: *GLchar) #foreign;
	GetFragDataLocationEXT : (program: GLuint, name: *GLchar) -> GLint #foreign;
	Uniform1uiEXT : (location: GLint, v0: GLuint) #foreign;
	Uniform2uiEXT : (location: GLint, v0: GLuint, v1: GLuint) #foreign;
	Uniform3uiEXT : (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #foreign;
	Uniform4uiEXT : (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #foreign;
	Uniform1uivEXT : (location: GLint, count: GLsizei, value: *GLuint) #foreign;
	Uniform2uivEXT : (location: GLint, count: GLsizei, value: *GLuint) #foreign;
	Uniform3uivEXT : (location: GLint, count: GLsizei, value: *GLuint) #foreign;
	Uniform4uivEXT : (location: GLint, count: GLsizei, value: *GLuint) #foreign;
	
	// EXT_histogram
	GetHistogramEXT : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: *void) #foreign;
	GetHistogramParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetHistogramParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetMinmaxEXT : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: *void) #foreign;
	GetMinmaxParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetMinmaxParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	HistogramEXT : (target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) #foreign;
	MinmaxEXT : (target: GLenum, internalformat: GLenum, sink: GLboolean) #foreign;
	ResetHistogramEXT : (target: GLenum) #foreign;
	ResetMinmaxEXT : (target: GLenum) #foreign;
	
	// EXT_index_array_formats
	
	// EXT_index_func
	IndexFuncEXT : (func: GLenum, ref: GLclampf) #foreign;
	
	// EXT_index_material
	IndexMaterialEXT : (face: GLenum, mode: GLenum) #foreign;
	
	// EXT_index_texture
	
	// EXT_light_texture
	ApplyTextureEXT : (mode: GLenum) #foreign;
	TextureLightEXT : (pname: GLenum) #foreign;
	TextureMaterialEXT : (face: GLenum, mode: GLenum) #foreign;
	
	// EXT_memory_object
	GetUnsignedBytevEXT : (pname: GLenum, data: *GLubyte) #foreign;
	GetUnsignedBytei_vEXT : (target: GLenum, index: GLuint, data: *GLubyte) #foreign;
	DeleteMemoryObjectsEXT : (n: GLsizei, memoryObjects: *GLuint) #foreign;
	IsMemoryObjectEXT : (memoryObject: GLuint) -> GLboolean #foreign;
	CreateMemoryObjectsEXT : (n: GLsizei, memoryObjects: *GLuint) #foreign;
	MemoryObjectParameterivEXT : (memoryObject: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetMemoryObjectParameterivEXT : (memoryObject: GLuint, pname: GLenum, params: *GLint) #foreign;
	TexStorageMem2DEXT : (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) #foreign;
	TexStorageMem2DMultisampleEXT : (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) #foreign;
	TexStorageMem3DEXT : (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) #foreign;
	TexStorageMem3DMultisampleEXT : (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) #foreign;
	BufferStorageMemEXT : (target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64) #foreign;
	TextureStorageMem2DEXT : (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) #foreign;
	TextureStorageMem2DMultisampleEXT : (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) #foreign;
	TextureStorageMem3DEXT : (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) #foreign;
	TextureStorageMem3DMultisampleEXT : (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) #foreign;
	NamedBufferStorageMemEXT : (buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64) #foreign;
	TexStorageMem1DEXT : (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) #foreign;
	TextureStorageMem1DEXT : (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) #foreign;
	
	// EXT_memory_object_fd
	ImportMemoryFdEXT : (memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint) #foreign;
	
	// EXT_memory_object_win32
	ImportMemoryWin32HandleEXT : (memory: GLuint, size: GLuint64, handleType: GLenum, handle: *void) #foreign;
	ImportMemoryWin32NameEXT : (memory: GLuint, size: GLuint64, handleType: GLenum, name: *void) #foreign;
	
	// EXT_misc_attribute
	
	// EXT_multi_draw_arrays
	MultiDrawArraysEXT : (mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) #foreign;
	MultiDrawElementsEXT : (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, primcount: GLsizei) #foreign;
	
	// EXT_multisample
	SampleMaskEXT : (value: GLclampf, invert: GLboolean) #foreign;
	SamplePatternEXT : (pattern: GLenum) #foreign;
	
	// EXT_packed_depth_stencil
	
	// EXT_packed_float
	
	// EXT_packed_pixels
	
	// EXT_paletted_texture
	ColorTableEXT : (target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: *void) #foreign;
	GetColorTableEXT : (target: GLenum, format: GLenum, type: GLenum, data: *void) #foreign;
	GetColorTableParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetColorTableParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	
	// EXT_pixel_buffer_object
	
	// EXT_pixel_transform
	PixelTransformParameteriEXT : (target: GLenum, pname: GLenum, param: GLint) #foreign;
	PixelTransformParameterfEXT : (target: GLenum, pname: GLenum, param: GLfloat) #foreign;
	PixelTransformParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	PixelTransformParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetPixelTransformParameterivEXT : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetPixelTransformParameterfvEXT : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	
	// EXT_pixel_transform_color_table
	
	// EXT_point_parameters
	PointParameterfEXT : (pname: GLenum, param: GLfloat) #foreign;
	PointParameterfvEXT : (pname: GLenum, params: *GLfloat) #foreign;
	
	// EXT_polygon_offset
	PolygonOffsetEXT : (factor: GLfloat, bias: GLfloat) #foreign;
	
	// EXT_polygon_offset_clamp
	PolygonOffsetClampEXT : (factor: GLfloat, units: GLfloat, clamp: GLfloat) #foreign;
	
	// EXT_post_depth_coverage
	
	// EXT_provoking_vertex
	ProvokingVertexEXT : (mode: GLenum) #foreign;
	
	// EXT_raster_multisample
	RasterSamplesEXT : (samples: GLuint, fixedsamplelocations: GLboolean) #foreign;
	
	// EXT_rescale_normal
	
	// EXT_secondary_color
	SecondaryColor3bEXT : (red: GLbyte, green: GLbyte, blue: GLbyte) #foreign;
	SecondaryColor3bvEXT : (v: *GLbyte) #foreign;
	SecondaryColor3dEXT : (red: GLdouble, green: GLdouble, blue: GLdouble) #foreign;
	SecondaryColor3dvEXT : (v: *GLdouble) #foreign;
	SecondaryColor3fEXT : (red: GLfloat, green: GLfloat, blue: GLfloat) #foreign;
	SecondaryColor3fvEXT : (v: *GLfloat) #foreign;
	SecondaryColor3iEXT : (red: GLint, green: GLint, blue: GLint) #foreign;
	SecondaryColor3ivEXT : (v: *GLint) #foreign;
	SecondaryColor3sEXT : (red: GLshort, green: GLshort, blue: GLshort) #foreign;
	SecondaryColor3svEXT : (v: *GLshort) #foreign;
	SecondaryColor3ubEXT : (red: GLubyte, green: GLubyte, blue: GLubyte) #foreign;
	SecondaryColor3ubvEXT : (v: *GLubyte) #foreign;
	SecondaryColor3uiEXT : (red: GLuint, green: GLuint, blue: GLuint) #foreign;
	SecondaryColor3uivEXT : (v: *GLuint) #foreign;
	SecondaryColor3usEXT : (red: GLushort, green: GLushort, blue: GLushort) #foreign;
	SecondaryColor3usvEXT : (v: *GLushort) #foreign;
	SecondaryColorPointerEXT : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	
	// EXT_semaphore
	// GetUnsignedBytevEXT : (pname: GLenum, data: *GLubyte) #foreign;
	// GetUnsignedBytei_vEXT : (target: GLenum, index: GLuint, data: *GLubyte) #foreign;
	GenSemaphoresEXT : (n: GLsizei, semaphores: *GLuint) #foreign;
	DeleteSemaphoresEXT : (n: GLsizei, semaphores: *GLuint) #foreign;
	IsSemaphoreEXT : (semaphore: GLuint) -> GLboolean #foreign;
	SemaphoreParameterui64vEXT : (semaphore: GLuint, pname: GLenum, params: *GLuint64) #foreign;
	GetSemaphoreParameterui64vEXT : (semaphore: GLuint, pname: GLenum, params: *GLuint64) #foreign;
	WaitSemaphoreEXT : (semaphore: GLuint, numBufferBarriers: GLuint, buffers: *GLuint, numTextureBarriers: GLuint, textures: *GLuint, srcLayouts: *GLenum) #foreign;
	SignalSemaphoreEXT : (semaphore: GLuint, numBufferBarriers: GLuint, buffers: *GLuint, numTextureBarriers: GLuint, textures: *GLuint, dstLayouts: *GLenum) #foreign;
	
	// EXT_semaphore_fd
	ImportSemaphoreFdEXT : (semaphore: GLuint, handleType: GLenum, fd: GLint) #foreign;
	
	// EXT_semaphore_win32
	ImportSemaphoreWin32HandleEXT : (semaphore: GLuint, handleType: GLenum, handle: *void) #foreign;
	ImportSemaphoreWin32NameEXT : (semaphore: GLuint, handleType: GLenum, name: *void) #foreign;
	
	// EXT_separate_shader_objects
	UseShaderProgramEXT : (type: GLenum, program: GLuint) #foreign;
	ActiveProgramEXT : (program: GLuint) #foreign;
	CreateShaderProgramEXT : (type: GLenum, str: *GLchar) -> GLuint #foreign;
	ActiveShaderProgramEXT : (pipeline: GLuint, program: GLuint) #foreign;
	BindProgramPipelineEXT : (pipeline: GLuint) #foreign;
	CreateShaderProgramvEXT : (type: GLenum, count: GLsizei, strings: **GLchar) -> GLuint #foreign;
	DeleteProgramPipelinesEXT : (n: GLsizei, pipelines: *GLuint) #foreign;
	GenProgramPipelinesEXT : (n: GLsizei, pipelines: *GLuint) #foreign;
	GetProgramPipelineInfoLogEXT : (pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #foreign;
	GetProgramPipelineivEXT : (pipeline: GLuint, pname: GLenum, params: *GLint) #foreign;
	IsProgramPipelineEXT : (pipeline: GLuint) -> GLboolean #foreign;
	// ProgramParameteriEXT : (program: GLuint, pname: GLenum, value: GLint) #foreign;
	// ProgramUniform1fEXT : (program: GLuint, location: GLint, v0: GLfloat) #foreign;
	// ProgramUniform1fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	// ProgramUniform1iEXT : (program: GLuint, location: GLint, v0: GLint) #foreign;
	// ProgramUniform1ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	// ProgramUniform2fEXT : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) #foreign;
	// ProgramUniform2fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	// ProgramUniform2iEXT : (program: GLuint, location: GLint, v0: GLint, v1: GLint) #foreign;
	// ProgramUniform2ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	// ProgramUniform3fEXT : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #foreign;
	// ProgramUniform3fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	// ProgramUniform3iEXT : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) #foreign;
	// ProgramUniform3ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	// ProgramUniform4fEXT : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #foreign;
	// ProgramUniform4fvEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
	// ProgramUniform4iEXT : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #foreign;
	// ProgramUniform4ivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
	// ProgramUniformMatrix2fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix3fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	UseProgramStagesEXT : (pipeline: GLuint, stages: GLbitfield, program: GLuint) #foreign;
	ValidateProgramPipelineEXT : (pipeline: GLuint) #foreign;
	// ProgramUniform1uiEXT : (program: GLuint, location: GLint, v0: GLuint) #foreign;
	// ProgramUniform2uiEXT : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) #foreign;
	// ProgramUniform3uiEXT : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #foreign;
	// ProgramUniform4uiEXT : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #foreign;
	// ProgramUniform1uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	// ProgramUniform2uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	// ProgramUniform3uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	// ProgramUniform4uivEXT : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
	// ProgramUniformMatrix4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix2x3fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix3x2fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix2x4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix4x2fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix3x4fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	// ProgramUniformMatrix4x3fvEXT : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
	
	// EXT_separate_specular_color
	
	// EXT_shader_framebuffer_fetch
	
	// EXT_shader_framebuffer_fetch_non_coherent
	FramebufferFetchBarrierEXT : () #foreign;
	
	// EXT_shader_image_load_formatted
	
	// EXT_shader_image_load_store
	BindImageTextureEXT : (index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) #foreign;
	MemoryBarrierEXT : (barriers: GLbitfield) #foreign;
	
	// EXT_shader_integer_mix
	
	// EXT_shadow_funcs
	
	// EXT_shared_texture_palette
	
	// EXT_sparse_texture2
	
	// EXT_stencil_clear_tag
	StencilClearTagEXT : (stencilTagBits: GLsizei, stencilClearTag: GLuint) #foreign;
	
	// EXT_stencil_two_side
	ActiveStencilFaceEXT : (face: GLenum) #foreign;
	
	// EXT_stencil_wrap
	
	// EXT_subtexture
	TexSubImage1DEXT : (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	TexSubImage2DEXT : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	
	// EXT_texture
	
	// EXT_texture3D
	TexImage3DEXT : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	TexSubImage3DEXT : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	
	// EXT_texture_array
	FramebufferTextureLayerEXT : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #foreign;
	
	// EXT_texture_buffer_object
	TexBufferEXT : (target: GLenum, internalformat: GLenum, buffer: GLuint) #foreign;
	
	// EXT_texture_compression_latc
	
	// EXT_texture_compression_rgtc
	
	// EXT_texture_compression_s3tc
	
	// EXT_texture_cube_map
	
	// EXT_texture_env_add
	
	// EXT_texture_env_combine
	
	// EXT_texture_env_dot3
	
	// EXT_texture_filter_anisotropic
	
	// EXT_texture_filter_minmax
	
	// EXT_texture_integer
	TexParameterIivEXT : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	TexParameterIuivEXT : (target: GLenum, pname: GLenum, params: *GLuint) #foreign;
	GetTexParameterIivEXT : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetTexParameterIuivEXT : (target: GLenum, pname: GLenum, params: *GLuint) #foreign;
	ClearColorIiEXT : (red: GLint, green: GLint, blue: GLint, alpha: GLint) #foreign;
	ClearColorIuiEXT : (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) #foreign;
	
	// EXT_texture_lod_bias
	
	// EXT_texture_mirror_clamp
	
	// EXT_texture_object
	AreTexturesResidentEXT : (n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean #foreign;
	BindTextureEXT : (target: GLenum, texture: GLuint) #foreign;
	DeleteTexturesEXT : (n: GLsizei, textures: *GLuint) #foreign;
	GenTexturesEXT : (n: GLsizei, textures: *GLuint) #foreign;
	IsTextureEXT : (texture: GLuint) -> GLboolean #foreign;
	PrioritizeTexturesEXT : (n: GLsizei, textures: *GLuint, priorities: *GLclampf) #foreign;
	
	// EXT_texture_perturb_normal
	TextureNormalEXT : (mode: GLenum) #foreign;
	
	// EXT_texture_sRGB
	
	// EXT_texture_sRGB_decode
	
	// EXT_texture_shared_exponent
	
	// EXT_texture_snorm
	
	// EXT_texture_swizzle
	
	// EXT_timer_query
	GetQueryObjecti64vEXT : (id: GLuint, pname: GLenum, params: *GLint64) #foreign;
	GetQueryObjectui64vEXT : (id: GLuint, pname: GLenum, params: *GLuint64) #foreign;
	
	// EXT_transform_feedback
	BeginTransformFeedbackEXT : (primitiveMode: GLenum) #foreign;
	EndTransformFeedbackEXT : () #foreign;
	BindBufferRangeEXT : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
	BindBufferOffsetEXT : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) #foreign;
	BindBufferBaseEXT : (target: GLenum, index: GLuint, buffer: GLuint) #foreign;
	TransformFeedbackVaryingsEXT : (program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) #foreign;
	GetTransformFeedbackVaryingEXT : (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type: *GLenum, name: *GLchar) #foreign;
	
	// EXT_vertex_array
	ArrayElementEXT : (i: GLint) #foreign;
	ColorPointerEXT : (size: GLint, type: GLenum, stride: GLsizei, count: GLsizei, pointer: *void) #foreign;
	DrawArraysEXT : (mode: GLenum, first: GLint, count: GLsizei) #foreign;
	EdgeFlagPointerEXT : (stride: GLsizei, count: GLsizei, pointer: *GLboolean) #foreign;
	GetPointervEXT : (pname: GLenum, params: **void) #foreign;
	IndexPointerEXT : (type: GLenum, stride: GLsizei, count: GLsizei, pointer: *void) #foreign;
	NormalPointerEXT : (type: GLenum, stride: GLsizei, count: GLsizei, pointer: *void) #foreign;
	TexCoordPointerEXT : (size: GLint, type: GLenum, stride: GLsizei, count: GLsizei, pointer: *void) #foreign;
	VertexPointerEXT : (size: GLint, type: GLenum, stride: GLsizei, count: GLsizei, pointer: *void) #foreign;
	
	// EXT_vertex_array_bgra
	
	// EXT_vertex_attrib_64bit
	VertexAttribL1dEXT : (index: GLuint, x: GLdouble) #foreign;
	VertexAttribL2dEXT : (index: GLuint, x: GLdouble, y: GLdouble) #foreign;
	VertexAttribL3dEXT : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	VertexAttribL4dEXT : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	VertexAttribL1dvEXT : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttribL2dvEXT : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttribL3dvEXT : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttribL4dvEXT : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttribLPointerEXT : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	GetVertexAttribLdvEXT : (index: GLuint, pname: GLenum, params: *GLdouble) #foreign;
	
	// EXT_vertex_shader
	BeginVertexShaderEXT : () #foreign;
	EndVertexShaderEXT : () #foreign;
	BindVertexShaderEXT : (id: GLuint) #foreign;
	GenVertexShadersEXT : (range: GLuint) -> GLuint #foreign;
	DeleteVertexShaderEXT : (id: GLuint) #foreign;
	ShaderOp1EXT : (op: GLenum, res: GLuint, arg1: GLuint) #foreign;
	ShaderOp2EXT : (op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) #foreign;
	ShaderOp3EXT : (op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) #foreign;
	SwizzleEXT : (res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) #foreign;
	WriteMaskEXT : (res: GLuint, in: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) #foreign;
	InsertComponentEXT : (res: GLuint, src: GLuint, num: GLuint) #foreign;
	ExtractComponentEXT : (res: GLuint, src: GLuint, num: GLuint) #foreign;
	GenSymbolsEXT : (datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint) -> GLuint #foreign;
	SetInvariantEXT : (id: GLuint, type: GLenum, addr: *void) #foreign;
	SetLocalConstantEXT : (id: GLuint, type: GLenum, addr: *void) #foreign;
	VariantbvEXT : (id: GLuint, addr: *GLbyte) #foreign;
	VariantsvEXT : (id: GLuint, addr: *GLshort) #foreign;
	VariantivEXT : (id: GLuint, addr: *GLint) #foreign;
	VariantfvEXT : (id: GLuint, addr: *GLfloat) #foreign;
	VariantdvEXT : (id: GLuint, addr: *GLdouble) #foreign;
	VariantubvEXT : (id: GLuint, addr: *GLubyte) #foreign;
	VariantusvEXT : (id: GLuint, addr: *GLushort) #foreign;
	VariantuivEXT : (id: GLuint, addr: *GLuint) #foreign;
	VariantPointerEXT : (id: GLuint, type: GLenum, stride: GLuint, addr: *void) #foreign;
	EnableVariantClientStateEXT : (id: GLuint) #foreign;
	DisableVariantClientStateEXT : (id: GLuint) #foreign;
	BindLightParameterEXT : (light: GLenum, value: GLenum) -> GLuint #foreign;
	BindMaterialParameterEXT : (face: GLenum, value: GLenum) -> GLuint #foreign;
	BindTexGenParameterEXT : (unit: GLenum, coord: GLenum, value: GLenum) -> GLuint #foreign;
	BindTextureUnitParameterEXT : (unit: GLenum, value: GLenum) -> GLuint #foreign;
	BindParameterEXT : (value: GLenum) -> GLuint #foreign;
	IsVariantEnabledEXT : (id: GLuint, cap: GLenum) -> GLboolean #foreign;
	GetVariantBooleanvEXT : (id: GLuint, value: GLenum, data: *GLboolean) #foreign;
	GetVariantIntegervEXT : (id: GLuint, value: GLenum, data: *GLint) #foreign;
	GetVariantFloatvEXT : (id: GLuint, value: GLenum, data: *GLfloat) #foreign;
	GetVariantPointervEXT : (id: GLuint, value: GLenum, data: **void) #foreign;
	GetInvariantBooleanvEXT : (id: GLuint, value: GLenum, data: *GLboolean) #foreign;
	GetInvariantIntegervEXT : (id: GLuint, value: GLenum, data: *GLint) #foreign;
	GetInvariantFloatvEXT : (id: GLuint, value: GLenum, data: *GLfloat) #foreign;
	GetLocalConstantBooleanvEXT : (id: GLuint, value: GLenum, data: *GLboolean) #foreign;
	GetLocalConstantIntegervEXT : (id: GLuint, value: GLenum, data: *GLint) #foreign;
	GetLocalConstantFloatvEXT : (id: GLuint, value: GLenum, data: *GLfloat) #foreign;
	
	// EXT_vertex_weighting
	VertexWeightfEXT : (weight: GLfloat) #foreign;
	VertexWeightfvEXT : (weight: *GLfloat) #foreign;
	VertexWeightPointerEXT : (size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	
	// EXT_win32_keyed_mutex
	AcquireKeyedMutexWin32EXT : (memory: GLuint, key: GLuint64, timeout: GLuint) -> GLboolean #foreign;
	ReleaseKeyedMutexWin32EXT : (memory: GLuint, key: GLuint64) -> GLboolean #foreign;
	
	// EXT_window_rectangles
	WindowRectanglesEXT : (mode: GLenum, count: GLsizei, box: *GLint) #foreign;
	
	// EXT_x11_sync_object
	ImportSyncEXT : (external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield) -> GLsync #foreign;
	
	// GREMEDY_frame_terminator
	FrameTerminatorGREMEDY : () #foreign;
	
	// GREMEDY_string_marker
	StringMarkerGREMEDY : (len: GLsizei, str: *void) #foreign;
	
	// HP_convolution_border_modes
	
	// HP_image_transform
	ImageTransformParameteriHP : (target: GLenum, pname: GLenum, param: GLint) #foreign;
	ImageTransformParameterfHP : (target: GLenum, pname: GLenum, param: GLfloat) #foreign;
	ImageTransformParameterivHP : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	ImageTransformParameterfvHP : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetImageTransformParameterivHP : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetImageTransformParameterfvHP : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	
	// HP_occlusion_test
	
	// HP_texture_lighting
	
	// IBM_cull_vertex
	
	// IBM_multimode_draw_arrays
	MultiModeDrawArraysIBM : (mode: *GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei, modestride: GLint) #foreign;
	MultiModeDrawElementsIBM : (mode: *GLenum, count: *GLsizei, type: GLenum, indices: **void, primcount: GLsizei, modestride: GLint) #foreign;
	
	// IBM_rasterpos_clip
	
	// IBM_static_data
	FlushStaticDataIBM : (target: GLenum) #foreign;
	
	// IBM_texture_mirrored_repeat
	
	// IBM_vertex_array_lists
	ColorPointerListIBM : (size: GLint, type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #foreign;
	SecondaryColorPointerListIBM : (size: GLint, type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #foreign;
	EdgeFlagPointerListIBM : (stride: GLint, pointer: **GLboolean, ptrstride: GLint) #foreign;
	FogCoordPointerListIBM : (type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #foreign;
	IndexPointerListIBM : (type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #foreign;
	NormalPointerListIBM : (type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #foreign;
	TexCoordPointerListIBM : (size: GLint, type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #foreign;
	VertexPointerListIBM : (size: GLint, type: GLenum, stride: GLint, pointer: **void, ptrstride: GLint) #foreign;
	
	// INGR_blend_func_separate
	BlendFuncSeparateINGR : (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) #foreign;
	
	// INGR_color_clamp
	
	// INGR_interlace_read
	
	// INTEL_conservative_rasterization
	
	// INTEL_fragment_shader_ordering
	
	// INTEL_framebuffer_CMAA
	ApplyFramebufferAttachmentCMAAINTEL : () #foreign;
	
	// INTEL_map_texture
	SyncTextureINTEL : (texture: GLuint) #foreign;
	UnmapTexture2DINTEL : (texture: GLuint, level: GLint) #foreign;
	MapTexture2DINTEL : (texture: GLuint, level: GLint, access: GLbitfield, stride: *GLint, layout: *GLenum) #foreign;
	
	// INTEL_parallel_arrays
	VertexPointervINTEL : (size: GLint, type: GLenum, pointer: **void) #foreign;
	NormalPointervINTEL : (type: GLenum, pointer: **void) #foreign;
	ColorPointervINTEL : (size: GLint, type: GLenum, pointer: **void) #foreign;
	TexCoordPointervINTEL : (size: GLint, type: GLenum, pointer: **void) #foreign;
	
	// INTEL_performance_query
	BeginPerfQueryINTEL : (queryHandle: GLuint) #foreign;
	CreatePerfQueryINTEL : (queryId: GLuint, queryHandle: *GLuint) #foreign;
	DeletePerfQueryINTEL : (queryHandle: GLuint) #foreign;
	EndPerfQueryINTEL : (queryHandle: GLuint) #foreign;
	GetFirstPerfQueryIdINTEL : (queryId: *GLuint) #foreign;
	GetNextPerfQueryIdINTEL : (queryId: GLuint, nextQueryId: *GLuint) #foreign;
	GetPerfCounterInfoINTEL : (queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: *GLchar, counterDescLength: GLuint, counterDesc: *GLchar, counterOffset: *GLuint, counterDataSize: *GLuint, counterTypeEnum: *GLuint, counterDataTypeEnum: *GLuint, rawCounterMaxValue: *GLuint64) #foreign;
	GetPerfQueryDataINTEL : (queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: *void, bytesWritten: *GLuint) #foreign;
	GetPerfQueryIdByNameINTEL : (queryName: *GLchar, queryId: *GLuint) #foreign;
	GetPerfQueryInfoINTEL : (queryId: GLuint, queryNameLength: GLuint, queryName: *GLchar, dataSize: *GLuint, noCounters: *GLuint, noInstances: *GLuint, capsMask: *GLuint) #foreign;
	
	// KHR_blend_equation_advanced
	BlendBarrierKHR : () #foreign;
	
	// KHR_blend_equation_advanced_coherent
	
	// KHR_context_flush_control
	
	// KHR_debug
	// DebugMessageControl : (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #foreign;
	// DebugMessageInsert : (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) #foreign;
	// DebugMessageCallback : (callback: GLDEBUGPROC, userParam: *void) #foreign;
	// GetDebugMessageLog : (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #foreign;
	// PushDebugGroup : (source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) #foreign;
	// PopDebugGroup : () #foreign;
	// ObjectLabel : (identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) #foreign;
	// GetObjectLabel : (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;
	// ObjectPtrLabel : (ptr: *void, length: GLsizei, label: *GLchar) #foreign;
	// GetObjectPtrLabel : (ptr: *void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;
	// GetPointerv : (pname: GLenum, params: **void) #foreign;
	DebugMessageControlKHR : (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #foreign;
	DebugMessageInsertKHR : (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) #foreign;
	DebugMessageCallbackKHR : (callback: GLDEBUGPROCKHR, userParam: *void) #foreign;
	GetDebugMessageLogKHR : (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #foreign;
	PushDebugGroupKHR : (source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) #foreign;
	PopDebugGroupKHR : () #foreign;
	ObjectLabelKHR : (identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) #foreign;
	GetObjectLabelKHR : (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;
	ObjectPtrLabelKHR : (ptr: *void, length: GLsizei, label: *GLchar) #foreign;
	GetObjectPtrLabelKHR : (ptr: *void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;
	GetPointervKHR : (pname: GLenum, params: **void) #foreign;
	
	// KHR_no_error
	
	// KHR_parallel_shader_compile
	MaxShaderCompilerThreadsKHR : (count: GLuint) #foreign;
	
	// KHR_robust_buffer_access_behavior
	
	// KHR_robustness
	// GetGraphicsResetStatus : () -> GLenum #foreign;
	// ReadnPixels : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) #foreign;
	// GetnUniformfv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) #foreign;
	// GetnUniformiv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) #foreign;
	// GetnUniformuiv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) #foreign;
	GetGraphicsResetStatusKHR : () -> GLenum #foreign;
	ReadnPixelsKHR : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) #foreign;
	GetnUniformfvKHR : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) #foreign;
	GetnUniformivKHR : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) #foreign;
	GetnUniformuivKHR : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) #foreign;
	
	// KHR_texture_compression_astc_hdr
	
	// KHR_texture_compression_astc_ldr
	
	// KHR_texture_compression_astc_sliced_3d
	
	// MESAX_texture_stack
	
	// MESA_pack_invert
	
	// MESA_program_binary_formats
	
	// MESA_resize_buffers
	ResizeBuffersMESA : () #foreign;
	
	// MESA_shader_integer_functions
	
	// MESA_tile_raster_order
	
	// MESA_window_pos
	WindowPos2dMESA : (x: GLdouble, y: GLdouble) #foreign;
	WindowPos2dvMESA : (v: *GLdouble) #foreign;
	WindowPos2fMESA : (x: GLfloat, y: GLfloat) #foreign;
	WindowPos2fvMESA : (v: *GLfloat) #foreign;
	WindowPos2iMESA : (x: GLint, y: GLint) #foreign;
	WindowPos2ivMESA : (v: *GLint) #foreign;
	WindowPos2sMESA : (x: GLshort, y: GLshort) #foreign;
	WindowPos2svMESA : (v: *GLshort) #foreign;
	WindowPos3dMESA : (x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	WindowPos3dvMESA : (v: *GLdouble) #foreign;
	WindowPos3fMESA : (x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	WindowPos3fvMESA : (v: *GLfloat) #foreign;
	WindowPos3iMESA : (x: GLint, y: GLint, z: GLint) #foreign;
	WindowPos3ivMESA : (v: *GLint) #foreign;
	WindowPos3sMESA : (x: GLshort, y: GLshort, z: GLshort) #foreign;
	WindowPos3svMESA : (v: *GLshort) #foreign;
	WindowPos4dMESA : (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	WindowPos4dvMESA : (v: *GLdouble) #foreign;
	WindowPos4fMESA : (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	WindowPos4fvMESA : (v: *GLfloat) #foreign;
	WindowPos4iMESA : (x: GLint, y: GLint, z: GLint, w: GLint) #foreign;
	WindowPos4ivMESA : (v: *GLint) #foreign;
	WindowPos4sMESA : (x: GLshort, y: GLshort, z: GLshort, w: GLshort) #foreign;
	WindowPos4svMESA : (v: *GLshort) #foreign;
	
	// MESA_ycbcr_texture
	
	// NVX_blend_equation_advanced_multi_draw_buffers
	
	// NVX_conditional_render
	BeginConditionalRenderNVX : (id: GLuint) #foreign;
	EndConditionalRenderNVX : () #foreign;
	
	// NVX_gpu_memory_info
	
	// NVX_linked_gpu_multicast
	LGPUNamedBufferSubDataNVX : (gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
	LGPUCopyImageSubDataNVX : (sourceGpu: GLuint, destinationGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srxY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) #foreign;
	LGPUInterlockNVX : () #foreign;
	
	// NV_alpha_to_coverage_dither_control
	AlphaToCoverageDitherControlNV : (mode: GLenum) #foreign;
	
	// NV_bindless_multi_draw_indirect
	MultiDrawArraysIndirectBindlessNV : (mode: GLenum, indirect: *void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) #foreign;
	MultiDrawElementsIndirectBindlessNV : (mode: GLenum, type: GLenum, indirect: *void, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) #foreign;
	
	// NV_bindless_multi_draw_indirect_count
	MultiDrawArraysIndirectBindlessCountNV : (mode: GLenum, indirect: *void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) #foreign;
	MultiDrawElementsIndirectBindlessCountNV : (mode: GLenum, type: GLenum, indirect: *void, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) #foreign;
	
	// NV_bindless_texture
	GetTextureHandleNV : (texture: GLuint) -> GLuint64 #foreign;
	GetTextureSamplerHandleNV : (texture: GLuint, sampler: GLuint) -> GLuint64 #foreign;
	MakeTextureHandleResidentNV : (handle: GLuint64) #foreign;
	MakeTextureHandleNonResidentNV : (handle: GLuint64) #foreign;
	GetImageHandleNV : (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 #foreign;
	MakeImageHandleResidentNV : (handle: GLuint64, access: GLenum) #foreign;
	MakeImageHandleNonResidentNV : (handle: GLuint64) #foreign;
	UniformHandleui64NV : (location: GLint, value: GLuint64) #foreign;
	UniformHandleui64vNV : (location: GLint, count: GLsizei, value: *GLuint64) #foreign;
	ProgramUniformHandleui64NV : (program: GLuint, location: GLint, value: GLuint64) #foreign;
	ProgramUniformHandleui64vNV : (program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) #foreign;
	IsTextureHandleResidentNV : (handle: GLuint64) -> GLboolean #foreign;
	IsImageHandleResidentNV : (handle: GLuint64) -> GLboolean #foreign;
	
	// NV_blend_equation_advanced
	BlendParameteriNV : (pname: GLenum, value: GLint) #foreign;
	BlendBarrierNV : () #foreign;
	
	// NV_blend_equation_advanced_coherent
	
	// NV_blend_minmax_factor
	
	// NV_blend_square
	
	// NV_clip_space_w_scaling
	ViewportPositionWScaleNV : (index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) #foreign;
	
	// NV_command_list
	CreateStatesNV : (n: GLsizei, states: *GLuint) #foreign;
	DeleteStatesNV : (n: GLsizei, states: *GLuint) #foreign;
	IsStateNV : (state: GLuint) -> GLboolean #foreign;
	StateCaptureNV : (state: GLuint, mode: GLenum) #foreign;
	GetCommandHeaderNV : (tokenID: GLenum, size: GLuint) -> GLuint #foreign;
	GetStageIndexNV : (shadertype: GLenum) -> GLushort #foreign;
	DrawCommandsNV : (primitiveMode: GLenum, buffer: GLuint, indirects: *GLintptr, sizes: *GLsizei, count: GLuint) #foreign;
	DrawCommandsAddressNV : (primitiveMode: GLenum, indirects: *GLuint64, sizes: *GLsizei, count: GLuint) #foreign;
	DrawCommandsStatesNV : (buffer: GLuint, indirects: *GLintptr, sizes: *GLsizei, states: *GLuint, fbos: *GLuint, count: GLuint) #foreign;
	DrawCommandsStatesAddressNV : (indirects: *GLuint64, sizes: *GLsizei, states: *GLuint, fbos: *GLuint, count: GLuint) #foreign;
	CreateCommandListsNV : (n: GLsizei, lists: *GLuint) #foreign;
	DeleteCommandListsNV : (n: GLsizei, lists: *GLuint) #foreign;
	IsCommandListNV : (list: GLuint) -> GLboolean #foreign;
	ListDrawCommandsStatesClientNV : (list: GLuint, segment: GLuint, indirects: **void, sizes: *GLsizei, states: *GLuint, fbos: *GLuint, count: GLuint) #foreign;
	CommandListSegmentsNV : (list: GLuint, segments: GLuint) #foreign;
	CompileCommandListNV : (list: GLuint) #foreign;
	CallCommandListNV : (list: GLuint) #foreign;
	
	// NV_compute_program5
	
	// NV_conditional_render
	BeginConditionalRenderNV : (id: GLuint, mode: GLenum) #foreign;
	EndConditionalRenderNV : () #foreign;
	
	// NV_conservative_raster
	SubpixelPrecisionBiasNV : (xbits: GLuint, ybits: GLuint) #foreign;
	
	// NV_conservative_raster_dilate
	ConservativeRasterParameterfNV : (pname: GLenum, value: GLfloat) #foreign;
	
	// NV_conservative_raster_pre_snap
	
	// NV_conservative_raster_pre_snap_triangles
	ConservativeRasterParameteriNV : (pname: GLenum, param: GLint) #foreign;
	
	// NV_conservative_raster_underestimation
	
	// NV_copy_depth_to_color
	
	// NV_copy_image
	CopyImageSubDataNV : (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) #foreign;
	
	// NV_deep_texture3D
	
	// NV_depth_buffer_float
	DepthRangedNV : (zNear: GLdouble, zFar: GLdouble) #foreign;
	ClearDepthdNV : (depth: GLdouble) #foreign;
	DepthBoundsdNV : (zmin: GLdouble, zmax: GLdouble) #foreign;
	
	// NV_depth_clamp
	
	// NV_draw_texture
	DrawTextureNV : (texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) #foreign;
	
	// NV_draw_vulkan_image
	DrawVkImageNV : (vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) #foreign;
	// GetVkProcAddrNV : (name: *GLchar) -> GLVULKANPROCNV #foreign;
	WaitVkSemaphoreNV : (vkSemaphore: GLuint64) #foreign;
	SignalVkSemaphoreNV : (vkSemaphore: GLuint64) #foreign;
	SignalVkFenceNV : (vkFence: GLuint64) #foreign;
	
	// NV_evaluators
	MapControlPointsNV : (target: GLenum, index: GLuint, type: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: *void) #foreign;
	MapParameterivNV : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	MapParameterfvNV : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetMapControlPointsNV : (target: GLenum, index: GLuint, type: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: *void) #foreign;
	GetMapParameterivNV : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetMapParameterfvNV : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetMapAttribParameterivNV : (target: GLenum, index: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetMapAttribParameterfvNV : (target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	EvalMapsNV : (target: GLenum, mode: GLenum) #foreign;
	
	// NV_explicit_multisample
	GetMultisamplefvNV : (pname: GLenum, index: GLuint, val: *GLfloat) #foreign;
	SampleMaskIndexedNV : (index: GLuint, mask: GLbitfield) #foreign;
	TexRenderbufferNV : (target: GLenum, renderbuffer: GLuint) #foreign;
	
	// NV_fence
	DeleteFencesNV : (n: GLsizei, fences: *GLuint) #foreign;
	GenFencesNV : (n: GLsizei, fences: *GLuint) #foreign;
	IsFenceNV : (fence: GLuint) -> GLboolean #foreign;
	TestFenceNV : (fence: GLuint) -> GLboolean #foreign;
	GetFenceivNV : (fence: GLuint, pname: GLenum, params: *GLint) #foreign;
	FinishFenceNV : (fence: GLuint) #foreign;
	SetFenceNV : (fence: GLuint, condition: GLenum) #foreign;
	
	// NV_fill_rectangle
	
	// NV_float_buffer
	
	// NV_fog_distance
	
	// NV_fragment_coverage_to_color
	FragmentCoverageColorNV : (color: GLuint) #foreign;
	
	// NV_fragment_program
	ProgramNamedParameter4fNV : (id: GLuint, len: GLsizei, name: *GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	ProgramNamedParameter4fvNV : (id: GLuint, len: GLsizei, name: *GLubyte, v: *GLfloat) #foreign;
	ProgramNamedParameter4dNV : (id: GLuint, len: GLsizei, name: *GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	ProgramNamedParameter4dvNV : (id: GLuint, len: GLsizei, name: *GLubyte, v: *GLdouble) #foreign;
	GetProgramNamedParameterfvNV : (id: GLuint, len: GLsizei, name: *GLubyte, params: *GLfloat) #foreign;
	GetProgramNamedParameterdvNV : (id: GLuint, len: GLsizei, name: *GLubyte, params: *GLdouble) #foreign;
	
	// NV_fragment_program2
	
	// NV_fragment_program4
	
	// NV_fragment_program_option
	
	// NV_fragment_shader_interlock
	
	// NV_framebuffer_mixed_samples
	// RasterSamplesEXT : (samples: GLuint, fixedsamplelocations: GLboolean) #foreign;
	CoverageModulationTableNV : (n: GLsizei, v: *GLfloat) #foreign;
	GetCoverageModulationTableNV : (bufsize: GLsizei, v: *GLfloat) #foreign;
	CoverageModulationNV : (components: GLenum) #foreign;
	
	// NV_framebuffer_multisample_coverage
	RenderbufferStorageMultisampleCoverageNV : (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
	
	// NV_geometry_program4
	ProgramVertexLimitNV : (target: GLenum, limit: GLint) #foreign;
	FramebufferTextureEXT : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) #foreign;
	// FramebufferTextureLayerEXT : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #foreign;
	FramebufferTextureFaceEXT : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) #foreign;
	
	// NV_geometry_shader4
	
	// NV_geometry_shader_passthrough
	
	// NV_gpu_multicast
	RenderGpuMaskNV : (mask: GLbitfield) #foreign;
	MulticastBufferSubDataNV : (gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
	MulticastCopyBufferSubDataNV : (readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #foreign;
	MulticastCopyImageSubDataNV : (srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) #foreign;
	MulticastBlitFramebufferNV : (srcGpu: GLuint, dstGpu: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #foreign;
	MulticastFramebufferSampleLocationsfvNV : (gpu: GLuint, framebuffer: GLuint, start: GLuint, count: GLsizei, v: *GLfloat) #foreign;
	MulticastBarrierNV : () #foreign;
	MulticastWaitSyncNV : (signalGpu: GLuint, waitGpuMask: GLbitfield) #foreign;
	MulticastGetQueryObjectivNV : (gpu: GLuint, id: GLuint, pname: GLenum, params: *GLint) #foreign;
	MulticastGetQueryObjectuivNV : (gpu: GLuint, id: GLuint, pname: GLenum, params: *GLuint) #foreign;
	MulticastGetQueryObjecti64vNV : (gpu: GLuint, id: GLuint, pname: GLenum, params: *GLint64) #foreign;
	MulticastGetQueryObjectui64vNV : (gpu: GLuint, id: GLuint, pname: GLenum, params: *GLuint64) #foreign;
	
	// NV_gpu_program4
	ProgramLocalParameterI4iNV : (target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) #foreign;
	ProgramLocalParameterI4ivNV : (target: GLenum, index: GLuint, params: *GLint) #foreign;
	ProgramLocalParametersI4ivNV : (target: GLenum, index: GLuint, count: GLsizei, params: *GLint) #foreign;
	ProgramLocalParameterI4uiNV : (target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) #foreign;
	ProgramLocalParameterI4uivNV : (target: GLenum, index: GLuint, params: *GLuint) #foreign;
	ProgramLocalParametersI4uivNV : (target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) #foreign;
	ProgramEnvParameterI4iNV : (target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) #foreign;
	ProgramEnvParameterI4ivNV : (target: GLenum, index: GLuint, params: *GLint) #foreign;
	ProgramEnvParametersI4ivNV : (target: GLenum, index: GLuint, count: GLsizei, params: *GLint) #foreign;
	ProgramEnvParameterI4uiNV : (target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) #foreign;
	ProgramEnvParameterI4uivNV : (target: GLenum, index: GLuint, params: *GLuint) #foreign;
	ProgramEnvParametersI4uivNV : (target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) #foreign;
	GetProgramLocalParameterIivNV : (target: GLenum, index: GLuint, params: *GLint) #foreign;
	GetProgramLocalParameterIuivNV : (target: GLenum, index: GLuint, params: *GLuint) #foreign;
	GetProgramEnvParameterIivNV : (target: GLenum, index: GLuint, params: *GLint) #foreign;
	GetProgramEnvParameterIuivNV : (target: GLenum, index: GLuint, params: *GLuint) #foreign;
	
	// NV_gpu_program5
	ProgramSubroutineParametersuivNV : (target: GLenum, count: GLsizei, params: *GLuint) #foreign;
	GetProgramSubroutineParameteruivNV : (target: GLenum, index: GLuint, param: *GLuint) #foreign;
	
	// NV_gpu_program5_mem_extended
	
	// NV_gpu_shader5
	// Uniform1i64NV : (location: GLint, x: GLint64EXT) #foreign;
	// Uniform2i64NV : (location: GLint, x: GLint64EXT, y: GLint64EXT) #foreign;
	// Uniform3i64NV : (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) #foreign;
	// Uniform4i64NV : (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) #foreign;
	// Uniform1i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	// Uniform2i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	// Uniform3i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	// Uniform4i64vNV : (location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	// Uniform1ui64NV : (location: GLint, x: GLuint64EXT) #foreign;
	// Uniform2ui64NV : (location: GLint, x: GLuint64EXT, y: GLuint64EXT) #foreign;
	// Uniform3ui64NV : (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) #foreign;
	// Uniform4ui64NV : (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) #foreign;
	// Uniform1ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	// Uniform2ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	// Uniform3ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	// Uniform4ui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	// GetUniformi64vNV : (program: GLuint, location: GLint, params: *GLint64EXT) #foreign;
	// ProgramUniform1i64NV : (program: GLuint, location: GLint, x: GLint64EXT) #foreign;
	// ProgramUniform2i64NV : (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) #foreign;
	// ProgramUniform3i64NV : (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) #foreign;
	// ProgramUniform4i64NV : (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) #foreign;
	// ProgramUniform1i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	// ProgramUniform2i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	// ProgramUniform3i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	// ProgramUniform4i64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) #foreign;
	// ProgramUniform1ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT) #foreign;
	// ProgramUniform2ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) #foreign;
	// ProgramUniform3ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) #foreign;
	// ProgramUniform4ui64NV : (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) #foreign;
	// ProgramUniform1ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	// ProgramUniform2ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	// ProgramUniform3ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	// ProgramUniform4ui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	
	// NV_half_float
	Vertex2hNV : (x: GLhalfNV, y: GLhalfNV) #foreign;
	Vertex2hvNV : (v: *GLhalfNV) #foreign;
	Vertex3hNV : (x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) #foreign;
	Vertex3hvNV : (v: *GLhalfNV) #foreign;
	Vertex4hNV : (x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) #foreign;
	Vertex4hvNV : (v: *GLhalfNV) #foreign;
	Normal3hNV : (nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) #foreign;
	Normal3hvNV : (v: *GLhalfNV) #foreign;
	Color3hNV : (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) #foreign;
	Color3hvNV : (v: *GLhalfNV) #foreign;
	Color4hNV : (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) #foreign;
	Color4hvNV : (v: *GLhalfNV) #foreign;
	TexCoord1hNV : (s: GLhalfNV) #foreign;
	TexCoord1hvNV : (v: *GLhalfNV) #foreign;
	TexCoord2hNV : (s: GLhalfNV, t: GLhalfNV) #foreign;
	TexCoord2hvNV : (v: *GLhalfNV) #foreign;
	TexCoord3hNV : (s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) #foreign;
	TexCoord3hvNV : (v: *GLhalfNV) #foreign;
	TexCoord4hNV : (s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) #foreign;
	TexCoord4hvNV : (v: *GLhalfNV) #foreign;
	MultiTexCoord1hNV : (target: GLenum, s: GLhalfNV) #foreign;
	MultiTexCoord1hvNV : (target: GLenum, v: *GLhalfNV) #foreign;
	MultiTexCoord2hNV : (target: GLenum, s: GLhalfNV, t: GLhalfNV) #foreign;
	MultiTexCoord2hvNV : (target: GLenum, v: *GLhalfNV) #foreign;
	MultiTexCoord3hNV : (target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) #foreign;
	MultiTexCoord3hvNV : (target: GLenum, v: *GLhalfNV) #foreign;
	MultiTexCoord4hNV : (target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) #foreign;
	MultiTexCoord4hvNV : (target: GLenum, v: *GLhalfNV) #foreign;
	FogCoordhNV : (fog: GLhalfNV) #foreign;
	FogCoordhvNV : (fog: *GLhalfNV) #foreign;
	SecondaryColor3hNV : (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) #foreign;
	SecondaryColor3hvNV : (v: *GLhalfNV) #foreign;
	VertexWeighthNV : (weight: GLhalfNV) #foreign;
	VertexWeighthvNV : (weight: *GLhalfNV) #foreign;
	VertexAttrib1hNV : (index: GLuint, x: GLhalfNV) #foreign;
	VertexAttrib1hvNV : (index: GLuint, v: *GLhalfNV) #foreign;
	VertexAttrib2hNV : (index: GLuint, x: GLhalfNV, y: GLhalfNV) #foreign;
	VertexAttrib2hvNV : (index: GLuint, v: *GLhalfNV) #foreign;
	VertexAttrib3hNV : (index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) #foreign;
	VertexAttrib3hvNV : (index: GLuint, v: *GLhalfNV) #foreign;
	VertexAttrib4hNV : (index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) #foreign;
	VertexAttrib4hvNV : (index: GLuint, v: *GLhalfNV) #foreign;
	VertexAttribs1hvNV : (index: GLuint, n: GLsizei, v: *GLhalfNV) #foreign;
	VertexAttribs2hvNV : (index: GLuint, n: GLsizei, v: *GLhalfNV) #foreign;
	VertexAttribs3hvNV : (index: GLuint, n: GLsizei, v: *GLhalfNV) #foreign;
	VertexAttribs4hvNV : (index: GLuint, n: GLsizei, v: *GLhalfNV) #foreign;
	
	// NV_internalformat_sample_query
	GetInternalformatSampleivNV : (target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, bufSize: GLsizei, params: *GLint) #foreign;
	
	// NV_light_max_exponent
	
	// NV_multisample_coverage
	
	// NV_multisample_filter_hint
	
	// NV_occlusion_query
	GenOcclusionQueriesNV : (n: GLsizei, ids: *GLuint) #foreign;
	DeleteOcclusionQueriesNV : (n: GLsizei, ids: *GLuint) #foreign;
	IsOcclusionQueryNV : (id: GLuint) -> GLboolean #foreign;
	BeginOcclusionQueryNV : (id: GLuint) #foreign;
	EndOcclusionQueryNV : () #foreign;
	GetOcclusionQueryivNV : (id: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetOcclusionQueryuivNV : (id: GLuint, pname: GLenum, params: *GLuint) #foreign;
	
	// NV_packed_depth_stencil
	
	// NV_parameter_buffer_object
	ProgramBufferParametersfvNV : (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLfloat) #foreign;
	ProgramBufferParametersIivNV : (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLint) #foreign;
	ProgramBufferParametersIuivNV : (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLuint) #foreign;
	
	// NV_parameter_buffer_object2
	
	// NV_path_rendering
	GenPathsNV : (range: GLsizei) -> GLuint #foreign;
	DeletePathsNV : (path: GLuint, range: GLsizei) #foreign;
	IsPathNV : (path: GLuint) -> GLboolean #foreign;
	PathCommandsNV : (path: GLuint, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *void) #foreign;
	PathCoordsNV : (path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: *void) #foreign;
	PathSubCommandsNV : (path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *void) #foreign;
	PathSubCoordsNV : (path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: *void) #foreign;
	PathStringNV : (path: GLuint, format: GLenum, length: GLsizei, pathString: *void) #foreign;
	PathGlyphsNV : (firstPathName: GLuint, fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, numGlyphs: GLsizei, type: GLenum, charcodes: *void, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) #foreign;
	PathGlyphRangeNV : (firstPathName: GLuint, fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) #foreign;
	WeightPathsNV : (resultPath: GLuint, numPaths: GLsizei, paths: *GLuint, weights: *GLfloat) #foreign;
	CopyPathNV : (resultPath: GLuint, srcPath: GLuint) #foreign;
	InterpolatePathsNV : (resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) #foreign;
	TransformPathNV : (resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: *GLfloat) #foreign;
	PathParameterivNV : (path: GLuint, pname: GLenum, value: *GLint) #foreign;
	PathParameteriNV : (path: GLuint, pname: GLenum, value: GLint) #foreign;
	PathParameterfvNV : (path: GLuint, pname: GLenum, value: *GLfloat) #foreign;
	PathParameterfNV : (path: GLuint, pname: GLenum, value: GLfloat) #foreign;
	PathDashArrayNV : (path: GLuint, dashCount: GLsizei, dashArray: *GLfloat) #foreign;
	PathStencilFuncNV : (func: GLenum, ref: GLint, mask: GLuint) #foreign;
	PathStencilDepthOffsetNV : (factor: GLfloat, units: GLfloat) #foreign;
	StencilFillPathNV : (path: GLuint, fillMode: GLenum, mask: GLuint) #foreign;
	StencilStrokePathNV : (path: GLuint, reference: GLint, mask: GLuint) #foreign;
	StencilFillPathInstancedNV : (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) #foreign;
	StencilStrokePathInstancedNV : (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) #foreign;
	PathCoverDepthFuncNV : (func: GLenum) #foreign;
	CoverFillPathNV : (path: GLuint, coverMode: GLenum) #foreign;
	CoverStrokePathNV : (path: GLuint, coverMode: GLenum) #foreign;
	CoverFillPathInstancedNV : (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) #foreign;
	CoverStrokePathInstancedNV : (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) #foreign;
	GetPathParameterivNV : (path: GLuint, pname: GLenum, value: *GLint) #foreign;
	GetPathParameterfvNV : (path: GLuint, pname: GLenum, value: *GLfloat) #foreign;
	GetPathCommandsNV : (path: GLuint, commands: *GLubyte) #foreign;
	GetPathCoordsNV : (path: GLuint, coords: *GLfloat) #foreign;
	GetPathDashArrayNV : (path: GLuint, dashArray: *GLfloat) #foreign;
	GetPathMetricsNV : (metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, stride: GLsizei, metrics: *GLfloat) #foreign;
	GetPathMetricRangeNV : (metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: *GLfloat) #foreign;
	GetPathSpacingNV : (pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: *GLfloat) #foreign;
	IsPointInFillPathNV : (path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean #foreign;
	IsPointInStrokePathNV : (path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean #foreign;
	GetPathLengthNV : (path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat #foreign;
	PointAlongPathNV : (path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: *GLfloat, y: *GLfloat, tangentX: *GLfloat, tangentY: *GLfloat) -> GLboolean #foreign;
	MatrixLoad3x2fNV : (matrixMode: GLenum, m: *GLfloat) #foreign;
	MatrixLoad3x3fNV : (matrixMode: GLenum, m: *GLfloat) #foreign;
	MatrixLoadTranspose3x3fNV : (matrixMode: GLenum, m: *GLfloat) #foreign;
	MatrixMult3x2fNV : (matrixMode: GLenum, m: *GLfloat) #foreign;
	MatrixMult3x3fNV : (matrixMode: GLenum, m: *GLfloat) #foreign;
	MatrixMultTranspose3x3fNV : (matrixMode: GLenum, m: *GLfloat) #foreign;
	StencilThenCoverFillPathNV : (path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum) #foreign;
	StencilThenCoverStrokePathNV : (path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum) #foreign;
	StencilThenCoverFillPathInstancedNV : (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) #foreign;
	StencilThenCoverStrokePathInstancedNV : (numPaths: GLsizei, pathNameType: GLenum, paths: *void, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) #foreign;
	PathGlyphIndexRangeNV : (fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: *GLuint) -> GLenum #foreign;
	PathGlyphIndexArrayNV : (firstPathName: GLuint, fontTarget: GLenum, fontName: *void, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) -> GLenum #foreign;
	PathMemoryGlyphIndexArrayNV : (firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: *void, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat) -> GLenum #foreign;
	ProgramPathFragmentInputGenNV : (program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: *GLfloat) #foreign;
	GetProgramResourcefvNV : (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLfloat) #foreign;
	PathColorGenNV : (color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: *GLfloat) #foreign;
	PathTexGenNV : (texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: *GLfloat) #foreign;
	PathFogGenNV : (genMode: GLenum) #foreign;
	GetPathColorGenivNV : (color: GLenum, pname: GLenum, value: *GLint) #foreign;
	GetPathColorGenfvNV : (color: GLenum, pname: GLenum, value: *GLfloat) #foreign;
	GetPathTexGenivNV : (texCoordSet: GLenum, pname: GLenum, value: *GLint) #foreign;
	GetPathTexGenfvNV : (texCoordSet: GLenum, pname: GLenum, value: *GLfloat) #foreign;
	// MatrixFrustumEXT : (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #foreign;
	// MatrixLoadIdentityEXT : (mode: GLenum) #foreign;
	// MatrixLoadTransposefEXT : (mode: GLenum, m: *GLfloat) #foreign;
	// MatrixLoadTransposedEXT : (mode: GLenum, m: *GLdouble) #foreign;
	// MatrixLoadfEXT : (mode: GLenum, m: *GLfloat) #foreign;
	// MatrixLoaddEXT : (mode: GLenum, m: *GLdouble) #foreign;
	// MatrixMultTransposefEXT : (mode: GLenum, m: *GLfloat) #foreign;
	// MatrixMultTransposedEXT : (mode: GLenum, m: *GLdouble) #foreign;
	// MatrixMultfEXT : (mode: GLenum, m: *GLfloat) #foreign;
	// MatrixMultdEXT : (mode: GLenum, m: *GLdouble) #foreign;
	// MatrixOrthoEXT : (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) #foreign;
	// MatrixPopEXT : (mode: GLenum) #foreign;
	// MatrixPushEXT : (mode: GLenum) #foreign;
	// MatrixRotatefEXT : (mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	// MatrixRotatedEXT : (mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	// MatrixScalefEXT : (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	// MatrixScaledEXT : (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	// MatrixTranslatefEXT : (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	// MatrixTranslatedEXT : (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	
	// NV_path_rendering_shared_edge
	
	// NV_pixel_data_range
	PixelDataRangeNV : (target: GLenum, length: GLsizei, pointer: *void) #foreign;
	FlushPixelDataRangeNV : (target: GLenum) #foreign;
	
	// NV_point_sprite
	PointParameteriNV : (pname: GLenum, param: GLint) #foreign;
	PointParameterivNV : (pname: GLenum, params: *GLint) #foreign;
	
	// NV_present_video
	PresentFrameKeyedNV : (video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) #foreign;
	PresentFrameDualFillNV : (video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) #foreign;
	GetVideoivNV : (video_slot: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetVideouivNV : (video_slot: GLuint, pname: GLenum, params: *GLuint) #foreign;
	GetVideoi64vNV : (video_slot: GLuint, pname: GLenum, params: *GLint64EXT) #foreign;
	GetVideoui64vNV : (video_slot: GLuint, pname: GLenum, params: *GLuint64EXT) #foreign;
	
	// NV_primitive_restart
	PrimitiveRestartNV : () #foreign;
	PrimitiveRestartIndexNV : (index: GLuint) #foreign;
	
	// NV_query_resource
	QueryResourceNV : (queryType: GLenum, tagId: GLint, bufSize: GLuint, buffer: *GLint) -> GLint #foreign;
	
	// NV_query_resource_tag
	GenQueryResourceTagNV : (n: GLsizei, tagIds: *GLint) #foreign;
	DeleteQueryResourceTagNV : (n: GLsizei, tagIds: *GLint) #foreign;
	QueryResourceTagNV : (tagId: GLint, tagString: *GLchar) #foreign;
	
	// NV_register_combiners
	CombinerParameterfvNV : (pname: GLenum, params: *GLfloat) #foreign;
	CombinerParameterfNV : (pname: GLenum, param: GLfloat) #foreign;
	CombinerParameterivNV : (pname: GLenum, params: *GLint) #foreign;
	CombinerParameteriNV : (pname: GLenum, param: GLint) #foreign;
	CombinerInputNV : (stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) #foreign;
	CombinerOutputNV : (stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) #foreign;
	FinalCombinerInputNV : (variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) #foreign;
	GetCombinerInputParameterfvNV : (stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetCombinerInputParameterivNV : (stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetCombinerOutputParameterfvNV : (stage: GLenum, portion: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetCombinerOutputParameterivNV : (stage: GLenum, portion: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetFinalCombinerInputParameterfvNV : (variable: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetFinalCombinerInputParameterivNV : (variable: GLenum, pname: GLenum, params: *GLint) #foreign;
	
	// NV_register_combiners2
	CombinerStageParameterfvNV : (stage: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetCombinerStageParameterfvNV : (stage: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	
	// NV_robustness_video_memory_purge
	
	// NV_sample_locations
	FramebufferSampleLocationsfvNV : (target: GLenum, start: GLuint, count: GLsizei, v: *GLfloat) #foreign;
	NamedFramebufferSampleLocationsfvNV : (framebuffer: GLuint, start: GLuint, count: GLsizei, v: *GLfloat) #foreign;
	ResolveDepthValuesNV : () #foreign;
	
	// NV_sample_mask_override_coverage
	
	// NV_shader_atomic_counters
	
	// NV_shader_atomic_float
	
	// NV_shader_atomic_float64
	
	// NV_shader_atomic_fp16_vector
	
	// NV_shader_atomic_int64
	
	// NV_shader_buffer_load
	MakeBufferResidentNV : (target: GLenum, access: GLenum) #foreign;
	MakeBufferNonResidentNV : (target: GLenum) #foreign;
	IsBufferResidentNV : (target: GLenum) -> GLboolean #foreign;
	MakeNamedBufferResidentNV : (buffer: GLuint, access: GLenum) #foreign;
	MakeNamedBufferNonResidentNV : (buffer: GLuint) #foreign;
	IsNamedBufferResidentNV : (buffer: GLuint) -> GLboolean #foreign;
	GetBufferParameterui64vNV : (target: GLenum, pname: GLenum, params: *GLuint64EXT) #foreign;
	GetNamedBufferParameterui64vNV : (buffer: GLuint, pname: GLenum, params: *GLuint64EXT) #foreign;
	GetIntegerui64vNV : (value: GLenum, result: *GLuint64EXT) #foreign;
	Uniformui64NV : (location: GLint, value: GLuint64EXT) #foreign;
	Uniformui64vNV : (location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	// GetUniformui64vNV : (program: GLuint, location: GLint, params: *GLuint64EXT) #foreign;
	ProgramUniformui64NV : (program: GLuint, location: GLint, value: GLuint64EXT) #foreign;
	ProgramUniformui64vNV : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) #foreign;
	
	// NV_shader_buffer_store
	
	// NV_shader_storage_buffer_object
	
	// NV_shader_thread_group
	
	// NV_shader_thread_shuffle
	
	// NV_stereo_view_rendering
	
	// NV_tessellation_program5
	
	// NV_texgen_emboss
	
	// NV_texgen_reflection
	
	// NV_texture_barrier
	TextureBarrierNV : () #foreign;
	
	// NV_texture_compression_vtc
	
	// NV_texture_env_combine4
	
	// NV_texture_expand_normal
	
	// NV_texture_multisample
	TexImage2DMultisampleCoverageNV : (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) #foreign;
	TexImage3DMultisampleCoverageNV : (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) #foreign;
	TextureImage2DMultisampleNV : (texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) #foreign;
	TextureImage3DMultisampleNV : (texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) #foreign;
	TextureImage2DMultisampleCoverageNV : (texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) #foreign;
	TextureImage3DMultisampleCoverageNV : (texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) #foreign;
	
	// NV_texture_rectangle
	
	// NV_texture_rectangle_compressed
	
	// NV_texture_shader
	
	// NV_texture_shader2
	
	// NV_texture_shader3
	
	// NV_transform_feedback
	BeginTransformFeedbackNV : (primitiveMode: GLenum) #foreign;
	EndTransformFeedbackNV : () #foreign;
	TransformFeedbackAttribsNV : (count: GLsizei, attribs: *GLint, bufferMode: GLenum) #foreign;
	BindBufferRangeNV : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
	BindBufferOffsetNV : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) #foreign;
	BindBufferBaseNV : (target: GLenum, index: GLuint, buffer: GLuint) #foreign;
	TransformFeedbackVaryingsNV : (program: GLuint, count: GLsizei, locations: *GLint, bufferMode: GLenum) #foreign;
	ActiveVaryingNV : (program: GLuint, name: *GLchar) #foreign;
	GetVaryingLocationNV : (program: GLuint, name: *GLchar) -> GLint #foreign;
	GetActiveVaryingNV : (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type: *GLenum, name: *GLchar) #foreign;
	GetTransformFeedbackVaryingNV : (program: GLuint, index: GLuint, location: *GLint) #foreign;
	TransformFeedbackStreamAttribsNV : (count: GLsizei, attribs: *GLint, nbuffers: GLsizei, bufstreams: *GLint, bufferMode: GLenum) #foreign;
	
	// NV_transform_feedback2
	BindTransformFeedbackNV : (target: GLenum, id: GLuint) #foreign;
	DeleteTransformFeedbacksNV : (n: GLsizei, ids: *GLuint) #foreign;
	GenTransformFeedbacksNV : (n: GLsizei, ids: *GLuint) #foreign;
	IsTransformFeedbackNV : (id: GLuint) -> GLboolean #foreign;
	PauseTransformFeedbackNV : () #foreign;
	ResumeTransformFeedbackNV : () #foreign;
	DrawTransformFeedbackNV : (mode: GLenum, id: GLuint) #foreign;
	
	// NV_uniform_buffer_unified_memory
	
	// NV_vdpau_interop
	VDPAUInitNV : (vdpDevice: *void, getProcAddress: *void) #foreign;
	VDPAUFiniNV : () #foreign;
	// VDPAURegisterVideoSurfaceNV : (vdpSurface: *void, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV #foreign;
	// VDPAURegisterOutputSurfaceNV : (vdpSurface: *void, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV #foreign;
	// VDPAUIsSurfaceNV : (surface: GLvdpauSurfaceNV) -> GLboolean #foreign;
	// VDPAUUnregisterSurfaceNV : (surface: GLvdpauSurfaceNV) #foreign;
	// VDPAUGetSurfaceivNV : (surface: GLvdpauSurfaceNV, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) #foreign;
	// VDPAUSurfaceAccessNV : (surface: GLvdpauSurfaceNV, access: GLenum) #foreign;
	// VDPAUMapSurfacesNV : (numSurfaces: GLsizei, surfaces: *GLvdpauSurfaceNV) #foreign;
	// VDPAUUnmapSurfacesNV : (numSurface: GLsizei, surfaces: *GLvdpauSurfaceNV) #foreign;
	
	// NV_vertex_array_range
	FlushVertexArrayRangeNV : () #foreign;
	VertexArrayRangeNV : (length: GLsizei, pointer: *void) #foreign;
	
	// NV_vertex_array_range2
	
	// NV_vertex_attrib_integer_64bit
	VertexAttribL1i64NV : (index: GLuint, x: GLint64EXT) #foreign;
	VertexAttribL2i64NV : (index: GLuint, x: GLint64EXT, y: GLint64EXT) #foreign;
	VertexAttribL3i64NV : (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) #foreign;
	VertexAttribL4i64NV : (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) #foreign;
	VertexAttribL1i64vNV : (index: GLuint, v: *GLint64EXT) #foreign;
	VertexAttribL2i64vNV : (index: GLuint, v: *GLint64EXT) #foreign;
	VertexAttribL3i64vNV : (index: GLuint, v: *GLint64EXT) #foreign;
	VertexAttribL4i64vNV : (index: GLuint, v: *GLint64EXT) #foreign;
	VertexAttribL1ui64NV : (index: GLuint, x: GLuint64EXT) #foreign;
	VertexAttribL2ui64NV : (index: GLuint, x: GLuint64EXT, y: GLuint64EXT) #foreign;
	VertexAttribL3ui64NV : (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) #foreign;
	VertexAttribL4ui64NV : (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) #foreign;
	VertexAttribL1ui64vNV : (index: GLuint, v: *GLuint64EXT) #foreign;
	VertexAttribL2ui64vNV : (index: GLuint, v: *GLuint64EXT) #foreign;
	VertexAttribL3ui64vNV : (index: GLuint, v: *GLuint64EXT) #foreign;
	VertexAttribL4ui64vNV : (index: GLuint, v: *GLuint64EXT) #foreign;
	GetVertexAttribLi64vNV : (index: GLuint, pname: GLenum, params: *GLint64EXT) #foreign;
	GetVertexAttribLui64vNV : (index: GLuint, pname: GLenum, params: *GLuint64EXT) #foreign;
	VertexAttribLFormatNV : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei) #foreign;
	
	// NV_vertex_buffer_unified_memory
	BufferAddressRangeNV : (pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) #foreign;
	VertexFormatNV : (size: GLint, type: GLenum, stride: GLsizei) #foreign;
	NormalFormatNV : (type: GLenum, stride: GLsizei) #foreign;
	ColorFormatNV : (size: GLint, type: GLenum, stride: GLsizei) #foreign;
	IndexFormatNV : (type: GLenum, stride: GLsizei) #foreign;
	TexCoordFormatNV : (size: GLint, type: GLenum, stride: GLsizei) #foreign;
	EdgeFlagFormatNV : (stride: GLsizei) #foreign;
	SecondaryColorFormatNV : (size: GLint, type: GLenum, stride: GLsizei) #foreign;
	FogCoordFormatNV : (type: GLenum, stride: GLsizei) #foreign;
	VertexAttribFormatNV : (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei) #foreign;
	VertexAttribIFormatNV : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei) #foreign;
	GetIntegerui64i_vNV : (value: GLenum, index: GLuint, result: *GLuint64EXT) #foreign;
	
	// NV_vertex_program
	AreProgramsResidentNV : (n: GLsizei, programs: *GLuint, residences: *GLboolean) -> GLboolean #foreign;
	BindProgramNV : (target: GLenum, id: GLuint) #foreign;
	DeleteProgramsNV : (n: GLsizei, programs: *GLuint) #foreign;
	ExecuteProgramNV : (target: GLenum, id: GLuint, params: *GLfloat) #foreign;
	GenProgramsNV : (n: GLsizei, programs: *GLuint) #foreign;
	GetProgramParameterdvNV : (target: GLenum, index: GLuint, pname: GLenum, params: *GLdouble) #foreign;
	GetProgramParameterfvNV : (target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	GetProgramivNV : (id: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetProgramStringNV : (id: GLuint, pname: GLenum, program: *GLubyte) #foreign;
	GetTrackMatrixivNV : (target: GLenum, address: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetVertexAttribdvNV : (index: GLuint, pname: GLenum, params: *GLdouble) #foreign;
	GetVertexAttribfvNV : (index: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	GetVertexAttribivNV : (index: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetVertexAttribPointervNV : (index: GLuint, pname: GLenum, pointer: **void) #foreign;
	IsProgramNV : (id: GLuint) -> GLboolean #foreign;
	LoadProgramNV : (target: GLenum, id: GLuint, len: GLsizei, program: *GLubyte) #foreign;
	ProgramParameter4dNV : (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	ProgramParameter4dvNV : (target: GLenum, index: GLuint, v: *GLdouble) #foreign;
	ProgramParameter4fNV : (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	ProgramParameter4fvNV : (target: GLenum, index: GLuint, v: *GLfloat) #foreign;
	ProgramParameters4dvNV : (target: GLenum, index: GLuint, count: GLsizei, v: *GLdouble) #foreign;
	ProgramParameters4fvNV : (target: GLenum, index: GLuint, count: GLsizei, v: *GLfloat) #foreign;
	RequestResidentProgramsNV : (n: GLsizei, programs: *GLuint) #foreign;
	TrackMatrixNV : (target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) #foreign;
	VertexAttribPointerNV : (index: GLuint, fsize: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	VertexAttrib1dNV : (index: GLuint, x: GLdouble) #foreign;
	VertexAttrib1dvNV : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttrib1fNV : (index: GLuint, x: GLfloat) #foreign;
	VertexAttrib1fvNV : (index: GLuint, v: *GLfloat) #foreign;
	VertexAttrib1sNV : (index: GLuint, x: GLshort) #foreign;
	VertexAttrib1svNV : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib2dNV : (index: GLuint, x: GLdouble, y: GLdouble) #foreign;
	VertexAttrib2dvNV : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttrib2fNV : (index: GLuint, x: GLfloat, y: GLfloat) #foreign;
	VertexAttrib2fvNV : (index: GLuint, v: *GLfloat) #foreign;
	VertexAttrib2sNV : (index: GLuint, x: GLshort, y: GLshort) #foreign;
	VertexAttrib2svNV : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib3dNV : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
	VertexAttrib3dvNV : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttrib3fNV : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	VertexAttrib3fvNV : (index: GLuint, v: *GLfloat) #foreign;
	VertexAttrib3sNV : (index: GLuint, x: GLshort, y: GLshort, z: GLshort) #foreign;
	VertexAttrib3svNV : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib4dNV : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
	VertexAttrib4dvNV : (index: GLuint, v: *GLdouble) #foreign;
	VertexAttrib4fNV : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	VertexAttrib4fvNV : (index: GLuint, v: *GLfloat) #foreign;
	VertexAttrib4sNV : (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) #foreign;
	VertexAttrib4svNV : (index: GLuint, v: *GLshort) #foreign;
	VertexAttrib4ubNV : (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) #foreign;
	VertexAttrib4ubvNV : (index: GLuint, v: *GLubyte) #foreign;
	VertexAttribs1dvNV : (index: GLuint, count: GLsizei, v: *GLdouble) #foreign;
	VertexAttribs1fvNV : (index: GLuint, count: GLsizei, v: *GLfloat) #foreign;
	VertexAttribs1svNV : (index: GLuint, count: GLsizei, v: *GLshort) #foreign;
	VertexAttribs2dvNV : (index: GLuint, count: GLsizei, v: *GLdouble) #foreign;
	VertexAttribs2fvNV : (index: GLuint, count: GLsizei, v: *GLfloat) #foreign;
	VertexAttribs2svNV : (index: GLuint, count: GLsizei, v: *GLshort) #foreign;
	VertexAttribs3dvNV : (index: GLuint, count: GLsizei, v: *GLdouble) #foreign;
	VertexAttribs3fvNV : (index: GLuint, count: GLsizei, v: *GLfloat) #foreign;
	VertexAttribs3svNV : (index: GLuint, count: GLsizei, v: *GLshort) #foreign;
	VertexAttribs4dvNV : (index: GLuint, count: GLsizei, v: *GLdouble) #foreign;
	VertexAttribs4fvNV : (index: GLuint, count: GLsizei, v: *GLfloat) #foreign;
	VertexAttribs4svNV : (index: GLuint, count: GLsizei, v: *GLshort) #foreign;
	VertexAttribs4ubvNV : (index: GLuint, count: GLsizei, v: *GLubyte) #foreign;
	
	// NV_vertex_program1_1
	
	// NV_vertex_program2
	
	// NV_vertex_program2_option
	
	// NV_vertex_program3
	
	// NV_vertex_program4
	VertexAttribI1iEXT : (index: GLuint, x: GLint) #foreign;
	VertexAttribI2iEXT : (index: GLuint, x: GLint, y: GLint) #foreign;
	VertexAttribI3iEXT : (index: GLuint, x: GLint, y: GLint, z: GLint) #foreign;
	VertexAttribI4iEXT : (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) #foreign;
	VertexAttribI1uiEXT : (index: GLuint, x: GLuint) #foreign;
	VertexAttribI2uiEXT : (index: GLuint, x: GLuint, y: GLuint) #foreign;
	VertexAttribI3uiEXT : (index: GLuint, x: GLuint, y: GLuint, z: GLuint) #foreign;
	VertexAttribI4uiEXT : (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) #foreign;
	VertexAttribI1ivEXT : (index: GLuint, v: *GLint) #foreign;
	VertexAttribI2ivEXT : (index: GLuint, v: *GLint) #foreign;
	VertexAttribI3ivEXT : (index: GLuint, v: *GLint) #foreign;
	VertexAttribI4ivEXT : (index: GLuint, v: *GLint) #foreign;
	VertexAttribI1uivEXT : (index: GLuint, v: *GLuint) #foreign;
	VertexAttribI2uivEXT : (index: GLuint, v: *GLuint) #foreign;
	VertexAttribI3uivEXT : (index: GLuint, v: *GLuint) #foreign;
	VertexAttribI4uivEXT : (index: GLuint, v: *GLuint) #foreign;
	VertexAttribI4bvEXT : (index: GLuint, v: *GLbyte) #foreign;
	VertexAttribI4svEXT : (index: GLuint, v: *GLshort) #foreign;
	VertexAttribI4ubvEXT : (index: GLuint, v: *GLubyte) #foreign;
	VertexAttribI4usvEXT : (index: GLuint, v: *GLushort) #foreign;
	VertexAttribIPointerEXT : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
	GetVertexAttribIivEXT : (index: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetVertexAttribIuivEXT : (index: GLuint, pname: GLenum, params: *GLuint) #foreign;
	
	// NV_video_capture
	BeginVideoCaptureNV : (video_capture_slot: GLuint) #foreign;
	BindVideoCaptureStreamBufferNV : (video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB) #foreign;
	BindVideoCaptureStreamTextureNV : (video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) #foreign;
	EndVideoCaptureNV : (video_capture_slot: GLuint) #foreign;
	GetVideoCaptureivNV : (video_capture_slot: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetVideoCaptureStreamivNV : (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) #foreign;
	GetVideoCaptureStreamfvNV : (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	GetVideoCaptureStreamdvNV : (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) #foreign;
	VideoCaptureNV : (video_capture_slot: GLuint, sequence_num: *GLuint, capture_time: *GLuint64EXT) -> GLenum #foreign;
	VideoCaptureStreamParameterivNV : (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) #foreign;
	VideoCaptureStreamParameterfvNV : (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	VideoCaptureStreamParameterdvNV : (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) #foreign;
	
	// NV_viewport_array2
	
	// NV_viewport_swizzle
	ViewportSwizzleNV : (index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum) #foreign;
	
	// OES_byte_coordinates
	MultiTexCoord1bOES : (texture: GLenum, s: GLbyte) #foreign;
	MultiTexCoord1bvOES : (texture: GLenum, coords: *GLbyte) #foreign;
	MultiTexCoord2bOES : (texture: GLenum, s: GLbyte, t: GLbyte) #foreign;
	MultiTexCoord2bvOES : (texture: GLenum, coords: *GLbyte) #foreign;
	MultiTexCoord3bOES : (texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) #foreign;
	MultiTexCoord3bvOES : (texture: GLenum, coords: *GLbyte) #foreign;
	MultiTexCoord4bOES : (texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) #foreign;
	MultiTexCoord4bvOES : (texture: GLenum, coords: *GLbyte) #foreign;
	TexCoord1bOES : (s: GLbyte) #foreign;
	TexCoord1bvOES : (coords: *GLbyte) #foreign;
	TexCoord2bOES : (s: GLbyte, t: GLbyte) #foreign;
	TexCoord2bvOES : (coords: *GLbyte) #foreign;
	TexCoord3bOES : (s: GLbyte, t: GLbyte, r: GLbyte) #foreign;
	TexCoord3bvOES : (coords: *GLbyte) #foreign;
	TexCoord4bOES : (s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) #foreign;
	TexCoord4bvOES : (coords: *GLbyte) #foreign;
	Vertex2bOES : (x: GLbyte, y: GLbyte) #foreign;
	Vertex2bvOES : (coords: *GLbyte) #foreign;
	Vertex3bOES : (x: GLbyte, y: GLbyte, z: GLbyte) #foreign;
	Vertex3bvOES : (coords: *GLbyte) #foreign;
	Vertex4bOES : (x: GLbyte, y: GLbyte, z: GLbyte, w: GLbyte) #foreign;
	Vertex4bvOES : (coords: *GLbyte) #foreign;
	
	// OES_compressed_paletted_texture
	
	// OES_fixed_point
	AlphaFuncxOES : (func: GLenum, ref: GLfixed) #foreign;
	ClearColorxOES : (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) #foreign;
	ClearDepthxOES : (depth: GLfixed) #foreign;
	ClipPlanexOES : (plane: GLenum, equation: *GLfixed) #foreign;
	Color4xOES : (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) #foreign;
	DepthRangexOES : (n: GLfixed, f: GLfixed) #foreign;
	FogxOES : (pname: GLenum, param: GLfixed) #foreign;
	FogxvOES : (pname: GLenum, param: *GLfixed) #foreign;
	FrustumxOES : (l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) #foreign;
	GetClipPlanexOES : (plane: GLenum, equation: *GLfixed) #foreign;
	GetFixedvOES : (pname: GLenum, params: *GLfixed) #foreign;
	GetTexEnvxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #foreign;
	GetTexParameterxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #foreign;
	LightModelxOES : (pname: GLenum, param: GLfixed) #foreign;
	LightModelxvOES : (pname: GLenum, param: *GLfixed) #foreign;
	LightxOES : (light: GLenum, pname: GLenum, param: GLfixed) #foreign;
	LightxvOES : (light: GLenum, pname: GLenum, params: *GLfixed) #foreign;
	LineWidthxOES : (width: GLfixed) #foreign;
	LoadMatrixxOES : (m: *GLfixed) #foreign;
	MaterialxOES : (face: GLenum, pname: GLenum, param: GLfixed) #foreign;
	MaterialxvOES : (face: GLenum, pname: GLenum, param: *GLfixed) #foreign;
	MultMatrixxOES : (m: *GLfixed) #foreign;
	MultiTexCoord4xOES : (texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) #foreign;
	Normal3xOES : (nx: GLfixed, ny: GLfixed, nz: GLfixed) #foreign;
	OrthoxOES : (l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) #foreign;
	PointParameterxvOES : (pname: GLenum, params: *GLfixed) #foreign;
	PointSizexOES : (size: GLfixed) #foreign;
	PolygonOffsetxOES : (factor: GLfixed, units: GLfixed) #foreign;
	RotatexOES : (angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) #foreign;
	ScalexOES : (x: GLfixed, y: GLfixed, z: GLfixed) #foreign;
	TexEnvxOES : (target: GLenum, pname: GLenum, param: GLfixed) #foreign;
	TexEnvxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #foreign;
	TexParameterxOES : (target: GLenum, pname: GLenum, param: GLfixed) #foreign;
	TexParameterxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #foreign;
	TranslatexOES : (x: GLfixed, y: GLfixed, z: GLfixed) #foreign;
	GetLightxvOES : (light: GLenum, pname: GLenum, params: *GLfixed) #foreign;
	GetMaterialxvOES : (face: GLenum, pname: GLenum, params: *GLfixed) #foreign;
	PointParameterxOES : (pname: GLenum, param: GLfixed) #foreign;
	SampleCoveragexOES : (value: GLclampx, invert: GLboolean) #foreign;
	AccumxOES : (op: GLenum, value: GLfixed) #foreign;
	BitmapxOES : (width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: *GLubyte) #foreign;
	BlendColorxOES : (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) #foreign;
	ClearAccumxOES : (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) #foreign;
	Color3xOES : (red: GLfixed, green: GLfixed, blue: GLfixed) #foreign;
	Color3xvOES : (components: *GLfixed) #foreign;
	Color4xvOES : (components: *GLfixed) #foreign;
	ConvolutionParameterxOES : (target: GLenum, pname: GLenum, param: GLfixed) #foreign;
	ConvolutionParameterxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #foreign;
	EvalCoord1xOES : (u: GLfixed) #foreign;
	EvalCoord1xvOES : (coords: *GLfixed) #foreign;
	EvalCoord2xOES : (u: GLfixed, v: GLfixed) #foreign;
	EvalCoord2xvOES : (coords: *GLfixed) #foreign;
	FeedbackBufferxOES : (n: GLsizei, type: GLenum, buffer: *GLfixed) #foreign;
	GetConvolutionParameterxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #foreign;
	GetHistogramParameterxvOES : (target: GLenum, pname: GLenum, params: *GLfixed) #foreign;
	GetLightxOES : (light: GLenum, pname: GLenum, params: *GLfixed) #foreign;
	GetMapxvOES : (target: GLenum, query: GLenum, v: *GLfixed) #foreign;
	GetMaterialxOES : (face: GLenum, pname: GLenum, param: GLfixed) #foreign;
	GetPixelMapxv : (map: GLenum, size: GLint, values: *GLfixed) #foreign;
	GetTexGenxvOES : (coord: GLenum, pname: GLenum, params: *GLfixed) #foreign;
	GetTexLevelParameterxvOES : (target: GLenum, level: GLint, pname: GLenum, params: *GLfixed) #foreign;
	IndexxOES : (component: GLfixed) #foreign;
	IndexxvOES : (component: *GLfixed) #foreign;
	LoadTransposeMatrixxOES : (m: *GLfixed) #foreign;
	Map1xOES : (target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) #foreign;
	Map2xOES : (target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) #foreign;
	MapGrid1xOES : (n: GLint, u1: GLfixed, u2: GLfixed) #foreign;
	MapGrid2xOES : (n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) #foreign;
	MultTransposeMatrixxOES : (m: *GLfixed) #foreign;
	MultiTexCoord1xOES : (texture: GLenum, s: GLfixed) #foreign;
	MultiTexCoord1xvOES : (texture: GLenum, coords: *GLfixed) #foreign;
	MultiTexCoord2xOES : (texture: GLenum, s: GLfixed, t: GLfixed) #foreign;
	MultiTexCoord2xvOES : (texture: GLenum, coords: *GLfixed) #foreign;
	MultiTexCoord3xOES : (texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) #foreign;
	MultiTexCoord3xvOES : (texture: GLenum, coords: *GLfixed) #foreign;
	MultiTexCoord4xvOES : (texture: GLenum, coords: *GLfixed) #foreign;
	Normal3xvOES : (coords: *GLfixed) #foreign;
	PassThroughxOES : (token: GLfixed) #foreign;
	PixelMapx : (map: GLenum, size: GLint, values: *GLfixed) #foreign;
	PixelStorex : (pname: GLenum, param: GLfixed) #foreign;
	PixelTransferxOES : (pname: GLenum, param: GLfixed) #foreign;
	PixelZoomxOES : (xfactor: GLfixed, yfactor: GLfixed) #foreign;
	PrioritizeTexturesxOES : (n: GLsizei, textures: *GLuint, priorities: *GLfixed) #foreign;
	RasterPos2xOES : (x: GLfixed, y: GLfixed) #foreign;
	RasterPos2xvOES : (coords: *GLfixed) #foreign;
	RasterPos3xOES : (x: GLfixed, y: GLfixed, z: GLfixed) #foreign;
	RasterPos3xvOES : (coords: *GLfixed) #foreign;
	RasterPos4xOES : (x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) #foreign;
	RasterPos4xvOES : (coords: *GLfixed) #foreign;
	RectxOES : (x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) #foreign;
	RectxvOES : (v1: *GLfixed, v2: *GLfixed) #foreign;
	TexCoord1xOES : (s: GLfixed) #foreign;
	TexCoord1xvOES : (coords: *GLfixed) #foreign;
	TexCoord2xOES : (s: GLfixed, t: GLfixed) #foreign;
	TexCoord2xvOES : (coords: *GLfixed) #foreign;
	TexCoord3xOES : (s: GLfixed, t: GLfixed, r: GLfixed) #foreign;
	TexCoord3xvOES : (coords: *GLfixed) #foreign;
	TexCoord4xOES : (s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) #foreign;
	TexCoord4xvOES : (coords: *GLfixed) #foreign;
	TexGenxOES : (coord: GLenum, pname: GLenum, param: GLfixed) #foreign;
	TexGenxvOES : (coord: GLenum, pname: GLenum, params: *GLfixed) #foreign;
	Vertex2xOES : (x: GLfixed) #foreign;
	Vertex2xvOES : (coords: *GLfixed) #foreign;
	Vertex3xOES : (x: GLfixed, y: GLfixed) #foreign;
	Vertex3xvOES : (coords: *GLfixed) #foreign;
	Vertex4xOES : (x: GLfixed, y: GLfixed, z: GLfixed) #foreign;
	Vertex4xvOES : (coords: *GLfixed) #foreign;
	
	// OES_query_matrix
	QueryMatrixxOES : (mantissa: *GLfixed, exponent: *GLint) -> GLbitfield #foreign;
	
	// OES_read_format
	
	// OES_single_precision
	ClearDepthfOES : (depth: GLclampf) #foreign;
	ClipPlanefOES : (plane: GLenum, equation: *GLfloat) #foreign;
	DepthRangefOES : (n: GLclampf, f: GLclampf) #foreign;
	FrustumfOES : (l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) #foreign;
	GetClipPlanefOES : (plane: GLenum, equation: *GLfloat) #foreign;
	OrthofOES : (l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) #foreign;
	
	// OML_interlace
	
	// OML_resample
	
	// OML_subsample
	
	// OVR_multiview
	FramebufferTextureMultiviewOVR : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei) #foreign;
	
	// OVR_multiview2
	
	// PGI_misc_hints
	HintPGI : (target: GLenum, mode: GLint) #foreign;
	
	// PGI_vertex_hints
	
	// REND_screen_coordinates
	
	// S3_s3tc
	
	// SGIS_detail_texture
	DetailTexFuncSGIS : (target: GLenum, n: GLsizei, points: *GLfloat) #foreign;
	GetDetailTexFuncSGIS : (target: GLenum, points: *GLfloat) #foreign;
	
	// SGIS_fog_function
	FogFuncSGIS : (n: GLsizei, points: *GLfloat) #foreign;
	GetFogFuncSGIS : (points: *GLfloat) #foreign;
	
	// SGIS_generate_mipmap
	
	// SGIS_multisample
	SampleMaskSGIS : (value: GLclampf, invert: GLboolean) #foreign;
	SamplePatternSGIS : (pattern: GLenum) #foreign;
	
	// SGIS_pixel_texture
	PixelTexGenParameteriSGIS : (pname: GLenum, param: GLint) #foreign;
	PixelTexGenParameterivSGIS : (pname: GLenum, params: *GLint) #foreign;
	PixelTexGenParameterfSGIS : (pname: GLenum, param: GLfloat) #foreign;
	PixelTexGenParameterfvSGIS : (pname: GLenum, params: *GLfloat) #foreign;
	GetPixelTexGenParameterivSGIS : (pname: GLenum, params: *GLint) #foreign;
	GetPixelTexGenParameterfvSGIS : (pname: GLenum, params: *GLfloat) #foreign;
	
	// SGIS_point_line_texgen
	
	// SGIS_point_parameters
	PointParameterfSGIS : (pname: GLenum, param: GLfloat) #foreign;
	PointParameterfvSGIS : (pname: GLenum, params: *GLfloat) #foreign;
	
	// SGIS_sharpen_texture
	SharpenTexFuncSGIS : (target: GLenum, n: GLsizei, points: *GLfloat) #foreign;
	GetSharpenTexFuncSGIS : (target: GLenum, points: *GLfloat) #foreign;
	
	// SGIS_texture4D
	TexImage4DSGIS : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
	TexSubImage4DSGIS : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
	
	// SGIS_texture_border_clamp
	
	// SGIS_texture_color_mask
	TextureColorMaskSGIS : (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) #foreign;
	
	// SGIS_texture_edge_clamp
	
	// SGIS_texture_filter4
	GetTexFilterFuncSGIS : (target: GLenum, filter: GLenum, weights: *GLfloat) #foreign;
	TexFilterFuncSGIS : (target: GLenum, filter: GLenum, n: GLsizei, weights: *GLfloat) #foreign;
	
	// SGIS_texture_lod
	
	// SGIS_texture_select
	
	// SGIX_async
	AsyncMarkerSGIX : (marker: GLuint) #foreign;
	FinishAsyncSGIX : (markerp: *GLuint) -> GLint #foreign;
	PollAsyncSGIX : (markerp: *GLuint) -> GLint #foreign;
	GenAsyncMarkersSGIX : (range: GLsizei) -> GLuint #foreign;
	DeleteAsyncMarkersSGIX : (marker: GLuint, range: GLsizei) #foreign;
	IsAsyncMarkerSGIX : (marker: GLuint) -> GLboolean #foreign;
	
	// SGIX_async_histogram
	
	// SGIX_async_pixel
	
	// SGIX_blend_alpha_minmax
	
	// SGIX_calligraphic_fragment
	
	// SGIX_clipmap
	
	// SGIX_convolution_accuracy
	
	// SGIX_depth_pass_instrument
	
	// SGIX_depth_texture
	
	// SGIX_flush_raster
	FlushRasterSGIX : () #foreign;
	
	// SGIX_fog_offset
	
	// SGIX_fragment_lighting
	FragmentColorMaterialSGIX : (face: GLenum, mode: GLenum) #foreign;
	FragmentLightfSGIX : (light: GLenum, pname: GLenum, param: GLfloat) #foreign;
	FragmentLightfvSGIX : (light: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	FragmentLightiSGIX : (light: GLenum, pname: GLenum, param: GLint) #foreign;
	FragmentLightivSGIX : (light: GLenum, pname: GLenum, params: *GLint) #foreign;
	FragmentLightModelfSGIX : (pname: GLenum, param: GLfloat) #foreign;
	FragmentLightModelfvSGIX : (pname: GLenum, params: *GLfloat) #foreign;
	FragmentLightModeliSGIX : (pname: GLenum, param: GLint) #foreign;
	FragmentLightModelivSGIX : (pname: GLenum, params: *GLint) #foreign;
	FragmentMaterialfSGIX : (face: GLenum, pname: GLenum, param: GLfloat) #foreign;
	FragmentMaterialfvSGIX : (face: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	FragmentMaterialiSGIX : (face: GLenum, pname: GLenum, param: GLint) #foreign;
	FragmentMaterialivSGIX : (face: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetFragmentLightfvSGIX : (light: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetFragmentLightivSGIX : (light: GLenum, pname: GLenum, params: *GLint) #foreign;
	GetFragmentMaterialfvSGIX : (face: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetFragmentMaterialivSGIX : (face: GLenum, pname: GLenum, params: *GLint) #foreign;
	LightEnviSGIX : (pname: GLenum, param: GLint) #foreign;
	
	// SGIX_framezoom
	FrameZoomSGIX : (factor: GLint) #foreign;
	
	// SGIX_igloo_interface
	IglooInterfaceSGIX : (pname: GLenum, params: *void) #foreign;
	
	// SGIX_instruments
	GetInstrumentsSGIX : () -> GLint #foreign;
	InstrumentsBufferSGIX : (size: GLsizei, buffer: *GLint) #foreign;
	PollInstrumentsSGIX : (marker_p: *GLint) -> GLint #foreign;
	ReadInstrumentsSGIX : (marker: GLint) #foreign;
	StartInstrumentsSGIX : () #foreign;
	StopInstrumentsSGIX : (marker: GLint) #foreign;
	
	// SGIX_interlace
	
	// SGIX_ir_instrument1
	
	// SGIX_list_priority
	GetListParameterfvSGIX : (list: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	GetListParameterivSGIX : (list: GLuint, pname: GLenum, params: *GLint) #foreign;
	ListParameterfSGIX : (list: GLuint, pname: GLenum, param: GLfloat) #foreign;
	ListParameterfvSGIX : (list: GLuint, pname: GLenum, params: *GLfloat) #foreign;
	ListParameteriSGIX : (list: GLuint, pname: GLenum, param: GLint) #foreign;
	ListParameterivSGIX : (list: GLuint, pname: GLenum, params: *GLint) #foreign;
	
	// SGIX_pixel_texture
	PixelTexGenSGIX : (mode: GLenum) #foreign;
	
	// SGIX_pixel_tiles
	
	// SGIX_polynomial_ffd
	DeformationMap3dSGIX : (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: *GLdouble) #foreign;
	DeformationMap3fSGIX : (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: *GLfloat) #foreign;
	DeformSGIX : (mask: GLbitfield) #foreign;
	LoadIdentityDeformationMapSGIX : (mask: GLbitfield) #foreign;
	
	// SGIX_reference_plane
	ReferencePlaneSGIX : (equation: *GLdouble) #foreign;
	
	// SGIX_resample
	
	// SGIX_scalebias_hint
	
	// SGIX_shadow
	
	// SGIX_shadow_ambient
	
	// SGIX_sprite
	SpriteParameterfSGIX : (pname: GLenum, param: GLfloat) #foreign;
	SpriteParameterfvSGIX : (pname: GLenum, params: *GLfloat) #foreign;
	SpriteParameteriSGIX : (pname: GLenum, param: GLint) #foreign;
	SpriteParameterivSGIX : (pname: GLenum, params: *GLint) #foreign;
	
	// SGIX_subsample
	
	// SGIX_tag_sample_buffer
	TagSampleBufferSGIX : () #foreign;
	
	// SGIX_texture_add_env
	
	// SGIX_texture_coordinate_clamp
	
	// SGIX_texture_lod_bias
	
	// SGIX_texture_multi_buffer
	
	// SGIX_texture_scale_bias
	
	// SGIX_vertex_preclip
	
	// SGIX_ycrcb
	
	// SGIX_ycrcb_subsample
	
	// SGIX_ycrcba
	
	// SGI_color_matrix
	
	// SGI_color_table
	ColorTableSGI : (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: *void) #foreign;
	ColorTableParameterfvSGI : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	ColorTableParameterivSGI : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	CopyColorTableSGI : (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) #foreign;
	GetColorTableSGI : (target: GLenum, format: GLenum, type: GLenum, table: *void) #foreign;
	GetColorTableParameterfvSGI : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
	GetColorTableParameterivSGI : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
	
	// SGI_texture_color_table
	
	// SUNX_constant_data
	FinishTextureSUNX : () #foreign;
	
	// SUN_convolution_border_modes
	
	// SUN_global_alpha
	GlobalAlphaFactorbSUN : (factor: GLbyte) #foreign;
	GlobalAlphaFactorsSUN : (factor: GLshort) #foreign;
	GlobalAlphaFactoriSUN : (factor: GLint) #foreign;
	GlobalAlphaFactorfSUN : (factor: GLfloat) #foreign;
	GlobalAlphaFactordSUN : (factor: GLdouble) #foreign;
	GlobalAlphaFactorubSUN : (factor: GLubyte) #foreign;
	GlobalAlphaFactorusSUN : (factor: GLushort) #foreign;
	GlobalAlphaFactoruiSUN : (factor: GLuint) #foreign;
	
	// SUN_mesh_array
	DrawMeshArraysSUN : (mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) #foreign;
	
	// SUN_slice_accum
	
	// SUN_triangle_list
	ReplacementCodeuiSUN : (code: GLuint) #foreign;
	ReplacementCodeusSUN : (code: GLushort) #foreign;
	ReplacementCodeubSUN : (code: GLubyte) #foreign;
	ReplacementCodeuivSUN : (code: *GLuint) #foreign;
	ReplacementCodeusvSUN : (code: *GLushort) #foreign;
	ReplacementCodeubvSUN : (code: *GLubyte) #foreign;
	ReplacementCodePointerSUN : (type: GLenum, stride: GLsizei, pointer: **void) #foreign;
	
	// SUN_vertex
	Color4ubVertex2fSUN : (r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) #foreign;
	Color4ubVertex2fvSUN : (c: *GLubyte, v: *GLfloat) #foreign;
	Color4ubVertex3fSUN : (r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	Color4ubVertex3fvSUN : (c: *GLubyte, v: *GLfloat) #foreign;
	Color3fVertex3fSUN : (r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	Color3fVertex3fvSUN : (c: *GLfloat, v: *GLfloat) #foreign;
	Normal3fVertex3fSUN : (nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	Normal3fVertex3fvSUN : (n: *GLfloat, v: *GLfloat) #foreign;
	Color4fNormal3fVertex3fSUN : (r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	Color4fNormal3fVertex3fvSUN : (c: *GLfloat, n: *GLfloat, v: *GLfloat) #foreign;
	TexCoord2fVertex3fSUN : (s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	TexCoord2fVertex3fvSUN : (tc: *GLfloat, v: *GLfloat) #foreign;
	TexCoord4fVertex4fSUN : (s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	TexCoord4fVertex4fvSUN : (tc: *GLfloat, v: *GLfloat) #foreign;
	TexCoord2fColor4ubVertex3fSUN : (s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	TexCoord2fColor4ubVertex3fvSUN : (tc: *GLfloat, c: *GLubyte, v: *GLfloat) #foreign;
	TexCoord2fColor3fVertex3fSUN : (s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	TexCoord2fColor3fVertex3fvSUN : (tc: *GLfloat, c: *GLfloat, v: *GLfloat) #foreign;
	TexCoord2fNormal3fVertex3fSUN : (s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	TexCoord2fNormal3fVertex3fvSUN : (tc: *GLfloat, n: *GLfloat, v: *GLfloat) #foreign;
	TexCoord2fColor4fNormal3fVertex3fSUN : (s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	TexCoord2fColor4fNormal3fVertex3fvSUN : (tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) #foreign;
	TexCoord4fColor4fNormal3fVertex4fSUN : (s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
	TexCoord4fColor4fNormal3fVertex4fvSUN : (tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) #foreign;
	ReplacementCodeuiVertex3fSUN : (rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	ReplacementCodeuiVertex3fvSUN : (rc: *GLuint, v: *GLfloat) #foreign;
	ReplacementCodeuiColor4ubVertex3fSUN : (rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	ReplacementCodeuiColor4ubVertex3fvSUN : (rc: *GLuint, c: *GLubyte, v: *GLfloat) #foreign;
	ReplacementCodeuiColor3fVertex3fSUN : (rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	ReplacementCodeuiColor3fVertex3fvSUN : (rc: *GLuint, c: *GLfloat, v: *GLfloat) #foreign;
	ReplacementCodeuiNormal3fVertex3fSUN : (rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	ReplacementCodeuiNormal3fVertex3fvSUN : (rc: *GLuint, n: *GLfloat, v: *GLfloat) #foreign;
	ReplacementCodeuiColor4fNormal3fVertex3fSUN : (rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	ReplacementCodeuiColor4fNormal3fVertex3fvSUN : (rc: *GLuint, c: *GLfloat, n: *GLfloat, v: *GLfloat) #foreign;
	ReplacementCodeuiTexCoord2fVertex3fSUN : (rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	ReplacementCodeuiTexCoord2fVertex3fvSUN : (rc: *GLuint, tc: *GLfloat, v: *GLfloat) #foreign;
	ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN : (rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN : (rc: *GLuint, tc: *GLfloat, n: *GLfloat, v: *GLfloat) #foreign;
	ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN : (rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
	ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN : (rc: *GLuint, tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) #foreign;
	
	// WIN_phong_shading
	
	// WIN_specular_fog
}
